nameOverride: ""
fullnameOverride: ""

infisical:
  enabled: true
  name: infisical
  autoDatabaseSchemaMigration: true
  databaseSchemaMigrationInitContainer:
      image: "ghcr.io/groundnuty/k8s-wait-for:no-root-v2.0"
      imagePullPolicy: IfNotPresent

  databaseSchemaMigrationJob:
    serviceAccountName: default

  fullnameOverride: ""
  podAnnotations: {}
  deploymentAnnotations: {}
  replicaCount: 2

  image:
    repository: infisical/infisical
    tag: "v0.46.3-postgres"
    pullPolicy: IfNotPresent
    imagePullSecrets: []

  affinity: {}
  kubeSecretRef: "infisical-secrets"

  service:
    annotations: {}
    type: ClusterIP
    nodePort: ""

  resources:
    limits:
      memory: 600Mi
    requests:
      cpu: 350m

configMaps:
  dotenv:
  - name: log-level
    path: values/prod/app.env

ingress:
  enabled: true
  hostName: ""
  ingressClassName: nginx
  nginx:
    enabled: true
  annotations: {}
  tls: []
  # - secretName: letsencrypt-prod
  #   hosts:
  #     - some.domain.com

postgresql:
  # -- When enabled, this will start up a in cluster Postgres
  enabled: true
  name: "postgresql"
  fullnameOverride: "postgresql"
  auth:
    username: infisical
    password: root
    database: infisicalDB
  useExistingPostgresSecret:
    # -- When this is enabled, postgresql.enabled needs to be false
    enabled: false
    # -- The name from where to get the existing postgresql connection string
    existingConnectionStringSecret:
      # -- The name of the secret that contains the postgres connection string
      name: ""
      # -- Secret key name that contains the postgres connection string
      key: ""

redis:
  enabled: true
  name: "redis"
  fullnameOverride: "redis"
  cluster:
    enabled: false
  usePassword: true
  auth:
    password: "mysecretpassword"
  architecture: standalone
