# yaml-language-server: $schema=values.schema.json

# -- Override release name
nameOverride: ""
# -- Override release fullname
fullnameOverride: ""

# Infisical parameters
# https://infisical.com/docs/self-hosting/deployments/kubernetes
infisical:
  # -- Enable Infisical
  enabled: true
  # -- Backend deployment name
  name: infisical
  # -- Automatically apply database schema migration
  autoDatabaseSchemaMigration: true
  # -- Backend deployment fullname override
  fullnameOverride: ""
  # -- Backend pod annotations
  podAnnotations: {}
  # -- Backend deployment annotations
  deploymentAnnotations: {}
  # @schema
  # minimum: 1
  # @schema
  # -- Backend replicas count
  replicaCount: 2
  # Backend image parameters
  image:
    # -- Backend image repository
    repository: infisical/infisical
    # -- Backend image [tag](https://hub.docker.com/r/infisical/infisical/tags)
    tag: "v0.46.3-postgres"
    # @schema
    # enum: [IfNotPresent,Always,Never]
    # @schema
    # -- Backend image pullPolicy
    pullPolicy: IfNotPresent
  # -- Backend pod affinity
  affinity: {}
  # @schema
  # examples: [infisical-secrets]
  # @schema
  # -- Backend secret resource reference name (containing required [backend configuration variables](https://infisical.com/docs/self-hosting/configuration/envars))
  kubeSecretRef: "infisical-secrets"
  # @schema
  # patternProperties:
  #   "^CLIENT_.*":
  #     type: string
  # properties:
  #   ENCRYPTION_KEY:
  #     title: ENCRYPTION_KEY
  #     description: Must be a random 16 byte hex string. Can be generated with `openssl rand -hex 16`.
  #     type: string
  #     examples: [f47dc9501a44c19efe46ca982eb96c9f]
  #     pattern: ^[a-zA-Z0-9]{32}$
  #   AUTH_SECRET:
  #     title: AUTH_SECRET
  #     description: Must be a random 32 byte base64 string. Can be generated with `openssl rand -base64 32`.
  #     type: string
  #     examples: [kR4i4vGsaS1Cz2kCDLRO5LpKmtRuk09ThARraYOn5sQ=]
  #     pattern: ^[-A-Za-z0-9+\/]{43}={0,3}$
  #   SITE_URL:
  #     title: SITE_URL
  #     description: Must be an absolute URL including the protocol (e.g. https://app.infisical.com).
  #     type: string
  #     examples: [https://app.infisical.com]
  #   DB_CONNECTION_URI:
  #     title: DB_CONNECTION_URI
  #     description: Database connection string (postgres, e.g. 'postgresql://user:pass@host:5432/my_db').
  #     type: string
  #     examples: [postgresql://user:pass@host:5432/my_db]
  #     pattern: ^postgresql:(?://[^/]+/)?(\w+)
  #   DB_ROOT_CERT:
  #     title: DB_ROOT_CERT
  #     description: Configure the SSL certificate for securing a Postgres connection by first encoding it in base64. To encode your certificate `echo "<certificate>" | base64`
  #     type: string
  #   REDIS_URL:
  #     title: REDIS_URL
  #     description: Redis connection string (e.g. 'redis://user:pass@host:6379').
  #     type: string
  #     examples: [redis://user:pass@host:6379]
  #   SMTP_HOST:
  #     title: SMTP_HOST
  #     description: Hostname to connect to for establishing SMTP connections (e.g. smtp.example.org).
  #     type: string
  #     examples: [smtp.example.org] 
  #   SMTP_PORT:
  #     title: SMTP_PORT
  #     description: Port to connect to for establishing SMTP connections.
  #     type: integer
  #   SMTP_USERNAME:
  #     title: SMTP_USERNAME
  #     description: Credential to connect to host (e.g. team@example.org).
  #     type: string
  #     examples: [team@example.org]
  #     format: idn-email
  #   SMTP_PASSWORD:
  #     title: SMTP_PASSWORD
  #     description: Credential to connect to host.
  #     type: string
  #   SMTP_SECURE:
  #     title: SMTP_SECURE
  #     description: If true, use TLS when connecting to host. If false, TLS will be used if STARTTLS is supported.
  #     type: boolean
  #   SMTP_FROM_ADDRESS:
  #     title: SMTP_FROM_ADDRESS
  #     description: Email address to be used for sending emails.
  #     type: string
  #     examples: [team@example.org]
  #     format: idn-email
  #   SMTP_FROM_NAME:
  #     title: SMTP_FROM_NAME
  #     description: Name label to be used in From field (e.g. Team)
  #     type: string
  #   CLIENT_ID_HEROKU:
  #     title: CLIENT_ID_HEROKU
  #     description: OAuth2 client ID for Heroku integration.
  #   CLIENT_ID_VERCEL:
  #     title: CLIENT_ID_VERCEL
  #     description: OAuth2 client ID for Vercel integration.
  #   CLIENT_ID_NETLIFY:
  #     title: CLIENT_ID_NETLIFY
  #     description: OAuth2 client ID for Netlify integration.
  #   CLIENT_ID_GITHUB:
  #     title: CLIENT_ID_GITHUB
  #     description: OAuth2 client ID for GitHub integration.
  #   CLIENT_ID_GITLAB:
  #     title: CLIENT_ID_GITLAB
  #     description: OAuth2 client id for Gitlab integration.
  #   CLIENT_ID_BITBUCKET:
  #     title: CLIENT_ID_BITBUCKET
  #     description: OAuth2 client ID for BitBucket integration.
  #   CLIENT_SECRET_HEROKU:
  #     title: CLIENT_SECRET_HEROKU
  #     description: OAuth2 client secret for Heroku integration.
  #   CLIENT_SECRET_VERCEL:
  #     title: CLIENT_SECRET_VERCEL
  #     description: OAuth2 client secret for Vercel integration.
  #   CLIENT_SECRET_NETLIFY:
  #     title: CLIENT_SECRET_NETLIFY
  #     description: OAuth2 client secret for Netlify integration.
  #   CLIENT_SECRET_GITHUB:
  #     title: CLIENT_SECRET_GITHUB
  #     description: OAuth2 client secret for GitHub integration.
  #   CLIENT_SECRET_GITLAB:
  #     title: CLIENT_SECRET_GITLAB
  #     description: OAuth2 client secret for Gitlab integration.
  #   CLIENT_SECRET_BITBUCKET:
  #     title: CLIENT_SECRET_BITBUCKET
  #     description: OAuth2 client secret for BitBucket integration.
  #   CLIENT_SLUG_VERCEL:
  #     title: CLIENT_SLUG_VERCEL
  #     description: OAuth2 slug for Vercel integration.
  #   CLIENT_ID_GOOGLE_LOGIN:
  #     title: CLIENT_ID_GOOGLE_LOGIN
  #     description: OAuth2 client ID for Google login.
  #   CLIENT_SECRET_GOOGLE_LOGIN:
  #     title: CLIENT_SECRET_GOOGLE_LOGIN
  #     description: OAuth2 client secret for Google login.
  #   CLIENT_ID_GITHUB_LOGIN:
  #     title: CLIENT_ID_GITHUB_LOGIN
  #     description: OAuth2 client ID for GitHub login.
  #   CLIENT_SECRET_GITHUB_LOGIN:
  #     title: CLIENT_SECRET_GITHUB_LOGIN
  #     description: OAuth2 client secret for GitHub login.
  #   CLIENT_ID_GITLAB_LOGIN:
  #     title: CLIENT_ID_GITLAB_LOGIN
  #     description: OAuth2 client ID for GitLab login.
  #   CLIENT_SECRET_GITLAB_LOGIN:
  #     title: CLIENT_SECRET_GITLAB_LOGIN
  #     description: OAuth2 client secret for GitLab login.
  #   URL_GITLAB_LOGIN:
  #     title: URL_GITLAB_LOGIN 
  #     description: URL of your self-hosted instance of GitLab where the OAuth application is registered (default 'https://gitlab.com').
  #     type: string
  #     examples: [https://gitlab.com] 
  #   CLIENT_ID_GCP_SECRET_MANAGER:
  #     title: CLIENT_ID_GCP_SECRET_MANAGER
  #     description: OAuth2 client id for GCP secrets manager integration.
  #   CLIENT_SECRET_GCP_SECRET_MANAGER:
  #     title: CLIENT_SECRET_GCP_SECRET_MANAGER
  #     description: OAuth2 client secret for GCP secrets manager integration.
  #   CLIENT_ID_AZURE:
  #     title: CLIENT_ID_AZURE
  #     description: OAuth2 client id for Azure integration.
  #   CLIENT_SECRET_AZURE:
  #     title: CLIENT_SECRET_AZURE
  #     description: OAuth2 client secret for Azure integration.
  #   SENTRY_DSN:
  #     description: Sentry (optional) for monitoring errors
  #     type: string
  # @schema
  # -- Backend [configuration variables](https://infisical.com/docs/self-hosting/configuration/envars) (inline, e.g. for gitops mechanism).
  # Those variables take precedence over `infisical.kubeSecretRef`
  config: {}    
  # Backend service
  service:
    # -- Backend service annotations
    annotations: {}
    # @schema
    # enum: [ClusterIP,NodePort]
    # @schema
    # -- Backend service type
    type: ClusterIP
    # -- Backend service nodePort (used if above type is `NodePort`)
    nodePort: 0000
  # Infisical instance resources and limits
  resources:
    # Above which Infisical's pods will not be able to use
    # Warning: too low resources may alter the application's stability
    limits:
      # -- Memory resource limit
      memory: "350Mi"
    # Infisical's pods will at least use the below resources
    # Warning: too low resources may alter the application's stability
    # Warning: make sure your cluster have enough resources, taking into consideration the replicas amount
    requests:
      # -- CPU resource request
      cpu: "350m"

# Ingress parameters
# https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/
ingress:
  # -- Enable ingress
  enabled: true
  # @schema
  # format: idn-hostname
  # @schema
  # -- Your instance's hostname (e.g. `infisical.example.org`).
  # Replace with your own domain
  hostName: ""
  # -- Ingress class name
  ingressClassName: nginx
  nginx:
    # -- Enable and install NginX ingress controller
    enabled: true
  # -- Ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: "nginx"
    # cert-manager.io/issuer: letsencrypt-nginx
  # -- Ingress TLS hosts (matching above `ingress.hostName`).
  # Replace with your own domain
  tls: []
    # - secretName: letsencrypt-prod
    #   hosts:
    #     - infisical.example.org

# PostgreSQL parameters
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  # -- Enable PostgreSQL
  enabled: true
  # -- PostgreSQL deployment name
  name: "postgresql"
  # -- PostgreSQL deployment fullname override
  fullnameOverride: "postgresql"
  auth:
    # -- PostgreSQL database username
    username: infisical
    # -- PostgreSQL database password
    password: root
    # -- PostgreSQL database name
    database: infisicalDB
  # PostgreSQL Primary persistence configuration
  persistence:
    # -- Enable PostgreSQL Primary data persistence using PVC
    enabled: true
    # -- Name of an existing PVC to use
    existingClaim: ""
    # -- The path the volume will be mounted at.
    # Useful when using custom PostgreSQL images
    mountPath: /bitnami/postgresql
    # -- PVC Storage Class for PostgreSQL Primary data volume.
    # If defined, `storageClassName: <storageClass>`
    # If set to `"-"`, `storageClassName: ""`, which disables dynamic provisioning
    # Default is undefined/null, no `storageClassName` spec is set. Using default provisioner
    storageClass: ""
    # @schema
    # type: array
    # items:
    #   enum: [ReadWriteOnce,ReadOnlyMany,ReadWriteMany,ReadWriteOncePod]
    # @schema
    # -- PVC [Access Mode](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes) for PostgreSQL volume
    accessModes:
      - ReadWriteOnce
    # -- PVC Storage Request for PostgreSQL volume
    size: 8Gi
    # -- Annotations for the PVC
    annotations: {}
    # -- Labels for the PVC
    labels: {}
    # -- Selector to match an existing Persistent Volume (this value is evaluated as a template)
    selector: {}
    # -- Custom PVC data source
    dataSource: {}

# Redis parameters
# https://github.com/bitnami/charts/tree/main/bitnami/redis
redis:
  # -- Enable Redis
  enabled: true
  # -- Redis deployment name
  name: "redis"
  # -- Redis deployment fullname override
  fullnameOverride: "redis"
  auth:
    # -- Enable Redis password authentication
    enabled: true
    # -- The name of an existing secret with Redis&reg; credentials.
    existingSecret: ""
    # -- Password key to be retrieved from existing secret (ignored unless `existingSecret` parameter is set).
    existingSecretPasswordKey: ""
    # -- Redis [password](https://github.com/bitnami/containers/tree/main/bitnami/redis#setting-the-server-password-on-first-run) (ignored if `existingSecret` set).
    # Defaults to a random 10-character alphanumeric string if not set and `usePassword` is true
    password: "mysecretpassword"
  # @schema
  # enum: [standalone,replication]
  # @schema
  # -- Redis architecture. Allowed values: `standalone` or `replication`
  architecture: standalone
