# yaml-language-server: $schema=values.schema.json

# -- Override release name
nameOverride: ""
# -- Override release fullname
fullnameOverride: ""

# Infisical backend parameters
# https://infisical.com/docs/self-hosting/deployments/kubernetes
backend:
  # -- Enable backend
  enabled: true
  # -- Backend name
  name: backend
  # -- Backend fullnameOverride
  fullnameOverride: ""
  # -- Backend pod annotations
  podAnnotations: {}
  # -- Backend deployment annotations
  deploymentAnnotations: {}
  # -- Backend replica count
  replicaCount: 2
  # Backend image parameters
  image:
    # -- Backend image repository
    repository: infisical/infisical
    # -- Backend image tag
    tag: "latest"
    # -- Backend image pullPolicy
    pullPolicy: IfNotPresent
  # -- Backend pod affinity
  affinity: {}
  # -- Backend secret resource reference name (containing required [backend configuration variables](https://infisical.com/docs/self-hosting/configuration/envars))
  kubeSecretRef: ""
  # Backend service
  service:
    # -- Backend service annotations
    annotations: {}
    # -- Backend service type
    type: ClusterIP
    # -- Backend service nodePort (used if above type is `NodePort`)
    nodePort: ""

# Backend variables configuration
# https://infisical.com/docs/self-hosting/configuration/envars
backendEnvironmentVariables:
  # Command to generate the required value (linux) : 'hexdump -vn16 -e'4/4 "%08X" 1 "\n"' /dev/urandom', 'openssl rand -hex 16'
  # -- **Required** Backend encryption key (128-bit hex value, 32-characters hex, [example](https://stackoverflow.com/a/34329057))</br><kbd>auto-generated</kbd> variable (if not provided, and not found in an existing secret)
  ENCRYPTION_KEY: ""
  # Command to generate the required value (linux) : 'hexdump -vn16 -e'4/4 "%08X" 1 "\n"' /dev/urandom', 'openssl rand -hex 16'
  # -- **Required** Secrets to sign JWT tokens (128-bit hex value, 32-characters hex, [example](https://stackoverflow.com/a/34329057))</br><kbd>auto-generated</kbd> variable (if not provided, and not found in an existing secret)
  JWT_SIGNUP_SECRET: ""
  # -- **Required** Secrets to sign JWT tokens (128-bit hex value, 32-characters hex, [example](https://stackoverflow.com/a/34329057))</br><kbd>auto-generated</kbd> variable (if not provided, and not found in an existing secret)
  JWT_REFRESH_SECRET: ""
  # -- **Required** Secrets to sign JWT tokens (128-bit hex value, 32-characters hex, [example](https://stackoverflow.com/a/34329057))</br><kbd>auto-generated</kbd> variable (if not provided, and not found in an existing secret)
  JWT_AUTH_SECRET: ""
  # -- **Required** Secrets to sign JWT tokens (128-bit hex value, 32-characters hex, [example](https://stackoverflow.com/a/34329057))</br><kbd>auto-generated</kbd> variable (if not provided, and not found in an existing secret)
  JWT_SERVICE_SECRET: ""
  # -- **Required** Secrets to sign JWT tokens (128-bit hex value, 32-characters hex, [example](https://stackoverflow.com/a/34329057))</br><kbd>auto-generated</kbd> variable (if not provided, and not found in an existing secret)
  JWT_MFA_SECRET: ""
  # -- **Required** Secrets to sign JWT OAuth tokens (128-bit hex value, 32-characters hex, [example](https://stackoverflow.com/a/34329057))</br><kbd>auto-generated</kbd> variable (if not provided, and not found in an existing secret)
  JWT_PROVIDER_AUTH_SECRET: ""
  # -- **Required** Hostname to connect to for establishing SMTP connections
  SMTP_HOST: ""
  # -- Port to connect to for establishing SMTP connections
  SMTP_PORT: 587
  # -- If true, use TLS when connecting to host. If false, TLS will be used if STARTTLS is supported
  SMTP_SECURE: false
  # -- Name label to be used in From field (e.g. Infisical)
  SMTP_FROM_NAME: Infisical
  # -- **Required** Email address to be used for sending emails (e.g. dev@infisical.com)
  SMTP_FROM_ADDRESS: ""
  # -- **Required** Credential to connect to host (e.g. team@infisical.com)
  SMTP_USERNAME: ""
  # -- **Required** Credential to connect to host
  SMTP_PASSWORD: ""
  # -- Absolute URL including the protocol (e.g. https://app.infisical.com)
  SITE_URL: infisical.local
  # -- To disable account creation from the login page (invites only)
  INVITE_ONLY_SIGNUP: false
  ## By default the backend will automatically be connected to a Mongo instance within the cluster
  ## However, it is recommended to add a managed document DB connection string for production-use (DBaaS)
  ## Learn about connection string type here https://www.mongodb.com/docs/manual/reference/connection-string/
  ## e.g. "mongodb://<user>:<pass>@<host>:<port>/<database-name>"
  # -- MongoDB connection string (external or internal)</br>Leave it empty for auto-generated connection string
  MONGO_URL: ""

  # By default, the backend will use the Redis that is auto deployed along with Infisical
  # -- Redis URL (cache service)
  REDIS_URL: "redis://redis-master:6379"

# MongoDB parameters
# https://github.com/bitnami/charts/blob/main/bitnami/mongodb/values.yaml
mongodb:
  # -- Enable MongoDB(&reg;)
  enabled: true
  # -- Name used to build variables (deprecated)
  name: "mongodb"
  # -- Fullname override
  fullnameOverride: "mongodb"
  # -- Name override
  nameOverride: "mongodb"
  # -- Pod annotations
  podAnnotations: {}
  # -- Set to true to use a StatefulSet instead of a Deployment (only when `architecture: standalone`)
  useStatefulSet: true
  # -- MongoDB(&reg;) architecture (`standalone` or `replicaset`)
  architecture: "standalone"
  # Bitnami MongoDB(&reg;) image
  # https://hub.docker.com/r/bitnami/mongodb/tags/
  image:
    # -- MongoDB(&reg;) image registry
    repository: bitnami/mongodb
    # -- MongoDB(&reg;) image pull policy
    pullPolicy: IfNotPresent
    # -- MongoDB(&reg;) image tag (immutable tags are recommended)
    tag: "6.0.4-debian-11-r0"
  # Bitnami MongoDB(&reg;) pods' liveness probe
  # https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  livenessProbe:
    # -- Enable livenessProbe
    enabled: true
    # -- Initial delay seconds for livenessProbe
    initialDelaySeconds: 30
    # -- Period seconds for livenessProbe
    periodSeconds: 20
    # -- Timeout seconds for livenessProbe
    timeoutSeconds: 10
    # -- Failure threshold for livenessProbe
    failureThreshold: 6
    # -- Success threshold for livenessProbe
    successThreshold: 1
  # Bitnami MongoDB(&reg;) pods' readiness probe. Evaluated as a template.
  # https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  readinessProbe:
    # -- Enable readinessProbe
    enabled: true
    # -- Initial delay seconds for readinessProbe
    initialDelaySeconds: 5
    # -- Period seconds for readinessProbe
    periodSeconds: 10
    # -- Timeout seconds for readinessProbe
    timeoutSeconds: 10
    # -- Failure threshold for readinessProbe
    failureThreshold: 6
    # -- Success threshold for readinessProbe
    successThreshold: 1
  service:
    # -- Service annotations
    annotations: {}
  # Infisical MongoDB custom authentication
  auth:
    # -- Enable custom authentication
    enabled: true
    # -- Custom usernames list ([special characters warning](https://www/docs/manual/reference/connection-string/#standard-connection-string-format))
    usernames:
      - "infisical"
    # -- Custom passwords list, match the above usernames order ([special characters warning](https://www/docs/manual/reference/connection-string/#standard-connection-string-format))
    passwords:
      - "infisical"
    # -- Custom databases list ([special characters warning](https://www/docs/manual/reference/connection-string/#standard-connection-string-format))
    databases:
      - "infisical"
    # -- Database root user name
    rootUser: root
    # -- Database root user password
    rootPassword: root

    # NOTE: When it's set the previous parameters are ignored.
    # -- Existing secret with MongoDB(&reg;) credentials (keys: `mongodb-passwords`, `mongodb-root-password`, `mongodb-metrics-password`, `mongodb-replica-set-key`)
    existingSecret: ""

  # MongoDB persistence configuration
  persistence:
    # -- Enable database persistence
    enabled: true
    # -- Existing persistent volume claim name
    existingClaim: ""
    # -- Keep the persistent volume even on deletion (`keep` or `""`)
    resourcePolicy: "keep"
    # -- Persistent volume access modes
    accessModes: ["ReadWriteOnce"]
    # -- Persistent storage request size
    size: 8Gi

mongodbConnection:
  # By default the backend will be connected to a Mongo instance within the cluster
  # However, it is recommended to add a managed document DB connection string for production-use (DBaaS)
  # Learn about connection string type here https://www/docs/manual/reference/connection-string/
  # e.g. "mongodb://<user>:<pass>@<host>:<port>/<database-name>"
  # -- Deprecated :warning: External MongoDB connection string</br>Use `backendEnvironmentVariables.MONGO_URL` instead
  externalMongoDBConnectionString: ""

# Ingress parameters
ingress:
  # -- Enable ingress
  enabled: true
  # -- Ingress class name
  ingressClassName: nginx
  nginx:
    # -- Enable and install `ingress-nginx` controller
    enabled: false
  # -- Ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: "nginx"
    # cert-manager.io/issuer: letsencrypt-nginx
  # -- Ingress hostname (your custom domain name, e.g. `infisical.example.org`).
  # Replace with your own domain
  hostName: ""
  # -- Ingress TLS hosts (matching above hostName).
  # Replace with your own domain
  tls: []
    # - secretName: letsencrypt-nginx
    #   hosts:
    #     - infisical.local

# Mailhog parameters
# https://github.com/codecentric/helm-charts/blob/master/charts/mailhog/values.yaml
mailhog:
  # -- Enable Mailhog
  enabled: false
  # -- Fullname override
  fullnameOverride: "mailhog"
  # -- Name override
  nameOverride: ""
  image:
    # Why we use this version : https://github.com/mailhog/MailHog/issues/353#issuecomment-821137362
    # -- Image repository
    repository: lytrax/mailhog
    # -- Image tag
    tag: "latest"
    # -- Image pull policy
    pullPolicy: IfNotPresent

  containerPort:
    # -- Mailhog HTTP port (Web UI)
    http:
      name: http
      port: 8025
    # -- Mailhog SMTP port (Mail)
    smtp:
      name: tcp-smtp
      port: 1025
  service:
    annotations: {}
    extraPorts: []
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    # Named target ports are not supported by GCE health checks, so when deploying on GKE
    # and exposing it via GCE ingress, the health checks fail and the load balancer returns a 502.
    namedTargetPort: true
    port:
      http: 8025
      smtp: 1025
    nodePort:
      http: ""
      smtp: ""
  # Mailhog ingress
  ingress:
    # -- Enable ingress
    enabled: true
    # -- Ingress class name
    ingressClassName: nginx
    # -- Ingress annotations
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- Ingress labels
    labels: {}
    hosts:
      # -- Mailhog host
      - host: mailhog.infisical.local
        # -- Mailhog paths
        paths:
          - path: "/"
            pathType: Prefix

# Redis parameters
# https://github.com/bitnami/charts/tree/main/bitnami/redis#parameters
redis:
  # -- Enable Redis
  enabled: true
  # -- Redis deployment name
  name: "redis"
  # -- Redis fullname override
  fullnameOverride: "redis"
  # -- Redis architecture
  architecture: standalone
  auth:
    # -- Redis authentication
    enabled: false
