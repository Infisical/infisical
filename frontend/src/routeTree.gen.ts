/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/root'
import { Route as middlewaresRestrictLoginSignupImport } from './pages/middlewares/restrict-login-signup'
import { Route as middlewaresAuthenticateImport } from './pages/middlewares/authenticate'
import { Route as publicShareSecretPageRouteImport } from './pages/public/ShareSecretPage/route'
import { Route as authCliRedirectPageRouteImport } from './pages/auth/CliRedirectPage/route'
import { Route as indexImport } from './pages/index'
import { Route as middlewaresInjectOrgDetailsImport } from './pages/middlewares/inject-org-details'
import { Route as authVerifyEmailPageRouteImport } from './pages/auth/VerifyEmailPage/route'
import { Route as authSignUpInvitePageRouteImport } from './pages/auth/SignUpInvitePage/route'
import { Route as authRequestNewInvitePageRouteImport } from './pages/auth/RequestNewInvitePage/route'
import { Route as authPasswordResetPageRouteImport } from './pages/auth/PasswordResetPage/route'
import { Route as authEmailNotVerifiedPageRouteImport } from './pages/auth/EmailNotVerifiedPage/route'
import { Route as authPasswordSetupPageRouteImport } from './pages/auth/PasswordSetupPage/route'
import { Route as userLayoutImport } from './pages/user/layout'
import { Route as organizationLayoutImport } from './pages/organization/layout'
import { Route as publicViewSharedSecretByIDPageRouteImport } from './pages/public/ViewSharedSecretByIDPage/route'
import { Route as publicViewSecretRequestByIDPageRouteImport } from './pages/public/ViewSecretRequestByIDPage/route'
import { Route as authSignUpSsoPageRouteImport } from './pages/auth/SignUpSsoPage/route'
import { Route as authLoginSsoPageRouteImport } from './pages/auth/LoginSsoPage/route'
import { Route as authSelectOrgPageRouteImport } from './pages/auth/SelectOrgPage/route'
import { Route as authLoginLdapPageRouteImport } from './pages/auth/LoginLdapPage/route'
import { Route as authAdminLoginPageRouteImport } from './pages/auth/AdminLoginPage/route'
import { Route as adminSignUpPageRouteImport } from './pages/admin/SignUpPage/route'
import { Route as organizationNoOrgPageRouteImport } from './pages/organization/NoOrgPage/route'
import { Route as authSignUpPageRouteImport } from './pages/auth/SignUpPage/route'
import { Route as authLoginPageRouteImport } from './pages/auth/LoginPage/route'
import { Route as adminLayoutImport } from './pages/admin/layout'
import { Route as authProviderSuccessPageRouteImport } from './pages/auth/ProviderSuccessPage/route'
import { Route as authProviderErrorPageRouteImport } from './pages/auth/ProviderErrorPage/route'
import { Route as userPersonalSettingsPageRouteImport } from './pages/user/PersonalSettingsPage/route'
import { Route as adminIntegrationsPageRouteImport } from './pages/admin/IntegrationsPage/route'
import { Route as adminEnvironmentPageRouteImport } from './pages/admin/EnvironmentPage/route'
import { Route as adminEncryptionPageRouteImport } from './pages/admin/EncryptionPage/route'
import { Route as adminCachingPageRouteImport } from './pages/admin/CachingPage/route'
import { Route as adminAuthenticationPageRouteImport } from './pages/admin/AuthenticationPage/route'
import { Route as organizationProjectsPageRouteImport } from './pages/organization/ProjectsPage/route'
import { Route as organizationBillingPageRouteImport } from './pages/organization/BillingPage/route'
import { Route as organizationAuditLogsPageRouteImport } from './pages/organization/AuditLogsPage/route'
import { Route as organizationAdminPageRouteImport } from './pages/organization/AdminPage/route'
import { Route as organizationAccessManagementPageRouteImport } from './pages/organization/AccessManagementPage/route'
import { Route as adminGeneralPageRouteImport } from './pages/admin/GeneralPage/route'
import { Route as secretManagerRedirectsRedirectApprovalPageImport } from './pages/secret-manager/redirects/redirect-approval-page'
import { Route as adminUserIdentitiesResourcesPageRouteImport } from './pages/admin/UserIdentitiesResourcesPage/route'
import { Route as adminOrganizationResourcesPageRouteImport } from './pages/admin/OrganizationResourcesPage/route'
import { Route as adminMachineIdentitiesResourcesPageRouteImport } from './pages/admin/MachineIdentitiesResourcesPage/route'
import { Route as organizationSecretSharingSettingsPageRouteImport } from './pages/organization/SecretSharingSettingsPage/route'
import { Route as organizationRoleByIDPageRouteImport } from './pages/organization/RoleByIDPage/route'
import { Route as organizationUserDetailsByIDPageRouteImport } from './pages/organization/UserDetailsByIDPage/route'
import { Route as organizationIdentityDetailsByIDPageRouteImport } from './pages/organization/IdentityDetailsByIDPage/route'
import { Route as organizationGroupDetailsByIDPageRouteImport } from './pages/organization/GroupDetailsByIDPage/route'
import { Route as organizationSettingsPageRouteImport } from './pages/organization/SettingsPage/route'
import { Route as organizationSecretSharingPageRouteImport } from './pages/organization/SecretSharingPage/route'
import { Route as organizationGatewaysGatewayListPageRouteImport } from './pages/organization/Gateways/GatewayListPage/route'
import { Route as organizationAppConnectionsAppConnectionsPageRouteImport } from './pages/organization/AppConnections/AppConnectionsPage/route'
import { Route as sshLayoutImport } from './pages/ssh/layout'
import { Route as secretScanningLayoutImport } from './pages/secret-scanning/layout'
import { Route as secretManagerLayoutImport } from './pages/secret-manager/layout'
import { Route as kmsLayoutImport } from './pages/kms/layout'
import { Route as certManagerLayoutImport } from './pages/cert-manager/layout'
import { Route as secretManagerIntegrationsRouteVercelOauthRedirectImport } from './pages/secret-manager/integrations/route-vercel-oauth-redirect'
import { Route as secretManagerIntegrationsRouteNetlifyOauthRedirectImport } from './pages/secret-manager/integrations/route-netlify-oauth-redirect'
import { Route as secretManagerIntegrationsRouteHerokuOauthRedirectImport } from './pages/secret-manager/integrations/route-heroku-oauth-redirect'
import { Route as secretManagerIntegrationsRouteGitlabOauthRedirectImport } from './pages/secret-manager/integrations/route-gitlab-oauth-redirect'
import { Route as secretManagerIntegrationsRouteGithubOauthRedirectImport } from './pages/secret-manager/integrations/route-github-oauth-redirect'
import { Route as secretManagerIntegrationsRouteGcpOauthRedirectImport } from './pages/secret-manager/integrations/route-gcp-oauth-redirect'
import { Route as secretManagerIntegrationsRouteBitbucketOauthRedirectImport } from './pages/secret-manager/integrations/route-bitbucket-oauth-redirect'
import { Route as secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectImport } from './pages/secret-manager/integrations/route-azure-key-vault-oauth-redirect'
import { Route as secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectImport } from './pages/secret-manager/integrations/route-azure-app-configurations-oauth-redirect'
import { Route as organizationSettingsPageOauthCallbackPageRouteImport } from './pages/organization/SettingsPage/OauthCallbackPage/route'
import { Route as projectAuditLogsPageRouteSshImport } from './pages/project/AuditLogsPage/route-ssh'
import { Route as projectAccessControlPageRouteSshImport } from './pages/project/AccessControlPage/route-ssh'
import { Route as projectAuditLogsPageRouteSecretScanningImport } from './pages/project/AuditLogsPage/route-secret-scanning'
import { Route as projectAccessControlPageRouteSecretScanningImport } from './pages/project/AccessControlPage/route-secret-scanning'
import { Route as projectAuditLogsPageRouteSecretManagerImport } from './pages/project/AuditLogsPage/route-secret-manager'
import { Route as projectAccessControlPageRouteSecretManagerImport } from './pages/project/AccessControlPage/route-secret-manager'
import { Route as projectAuditLogsPageRouteKmsImport } from './pages/project/AuditLogsPage/route-kms'
import { Route as projectAccessControlPageRouteKmsImport } from './pages/project/AccessControlPage/route-kms'
import { Route as projectAuditLogsPageRouteCertManagerImport } from './pages/project/AuditLogsPage/route-cert-manager'
import { Route as projectAccessControlPageRouteCertManagerImport } from './pages/project/AccessControlPage/route-cert-manager'
import { Route as sshSettingsPageRouteImport } from './pages/ssh/SettingsPage/route'
import { Route as sshSshHostsPageRouteImport } from './pages/ssh/SshHostsPage/route'
import { Route as sshSshCertsPageRouteImport } from './pages/ssh/SshCertsPage/route'
import { Route as sshSshCasPageRouteImport } from './pages/ssh/SshCasPage/route'
import { Route as secretScanningSettingsPageRouteImport } from './pages/secret-scanning/SettingsPage/route'
import { Route as secretScanningSecretScanningFindingsPageRouteImport } from './pages/secret-scanning/SecretScanningFindingsPage/route'
import { Route as secretManagerSettingsPageRouteImport } from './pages/secret-manager/SettingsPage/route'
import { Route as secretManagerSecretRotationPageRouteImport } from './pages/secret-manager/SecretRotationPage/route'
import { Route as secretManagerOverviewPageRouteImport } from './pages/secret-manager/OverviewPage/route'
import { Route as secretManagerSecretApprovalsPageRouteImport } from './pages/secret-manager/SecretApprovalsPage/route'
import { Route as secretManagerIPAllowlistPageRouteImport } from './pages/secret-manager/IPAllowlistPage/route'
import { Route as kmsSettingsPageRouteImport } from './pages/kms/SettingsPage/route'
import { Route as kmsOverviewPageRouteImport } from './pages/kms/OverviewPage/route'
import { Route as kmsKmipPageRouteImport } from './pages/kms/KmipPage/route'
import { Route as certManagerSettingsPageRouteImport } from './pages/cert-manager/SettingsPage/route'
import { Route as certManagerCertificatesPageRouteImport } from './pages/cert-manager/CertificatesPage/route'
import { Route as certManagerCertificateAuthoritiesPageRouteImport } from './pages/cert-manager/CertificateAuthoritiesPage/route'
import { Route as certManagerAlertingPageRouteImport } from './pages/cert-manager/AlertingPage/route'
import { Route as organizationAppConnectionsOauthCallbackPageRouteImport } from './pages/organization/AppConnections/OauthCallbackPage/route'
import { Route as projectRoleDetailsBySlugPageRouteSshImport } from './pages/project/RoleDetailsBySlugPage/route-ssh'
import { Route as projectMemberDetailsByIDPageRouteSshImport } from './pages/project/MemberDetailsByIDPage/route-ssh'
import { Route as projectIdentityDetailsByIDPageRouteSshImport } from './pages/project/IdentityDetailsByIDPage/route-ssh'
import { Route as projectGroupDetailsByIDPageRouteSshImport } from './pages/project/GroupDetailsByIDPage/route-ssh'
import { Route as projectRoleDetailsBySlugPageRouteSecretScanningImport } from './pages/project/RoleDetailsBySlugPage/route-secret-scanning'
import { Route as projectMemberDetailsByIDPageRouteSecretScanningImport } from './pages/project/MemberDetailsByIDPage/route-secret-scanning'
import { Route as projectIdentityDetailsByIDPageRouteSecretScanningImport } from './pages/project/IdentityDetailsByIDPage/route-secret-scanning'
import { Route as projectGroupDetailsByIDPageRouteSecretScanningImport } from './pages/project/GroupDetailsByIDPage/route-secret-scanning'
import { Route as projectRoleDetailsBySlugPageRouteSecretManagerImport } from './pages/project/RoleDetailsBySlugPage/route-secret-manager'
import { Route as projectMemberDetailsByIDPageRouteSecretManagerImport } from './pages/project/MemberDetailsByIDPage/route-secret-manager'
import { Route as projectIdentityDetailsByIDPageRouteSecretManagerImport } from './pages/project/IdentityDetailsByIDPage/route-secret-manager'
import { Route as projectGroupDetailsByIDPageRouteSecretManagerImport } from './pages/project/GroupDetailsByIDPage/route-secret-manager'
import { Route as projectRoleDetailsBySlugPageRouteKmsImport } from './pages/project/RoleDetailsBySlugPage/route-kms'
import { Route as projectMemberDetailsByIDPageRouteKmsImport } from './pages/project/MemberDetailsByIDPage/route-kms'
import { Route as projectIdentityDetailsByIDPageRouteKmsImport } from './pages/project/IdentityDetailsByIDPage/route-kms'
import { Route as projectGroupDetailsByIDPageRouteKmsImport } from './pages/project/GroupDetailsByIDPage/route-kms'
import { Route as projectRoleDetailsBySlugPageRouteCertManagerImport } from './pages/project/RoleDetailsBySlugPage/route-cert-manager'
import { Route as certManagerPkiCollectionDetailsByIDPageRoutesImport } from './pages/cert-manager/PkiCollectionDetailsByIDPage/routes'
import { Route as projectMemberDetailsByIDPageRouteCertManagerImport } from './pages/project/MemberDetailsByIDPage/route-cert-manager'
import { Route as projectIdentityDetailsByIDPageRouteCertManagerImport } from './pages/project/IdentityDetailsByIDPage/route-cert-manager'
import { Route as projectGroupDetailsByIDPageRouteCertManagerImport } from './pages/project/GroupDetailsByIDPage/route-cert-manager'
import { Route as sshSshHostGroupDetailsByIDPageRouteImport } from './pages/ssh/SshHostGroupDetailsByIDPage/route'
import { Route as sshSshCaByIDPageRouteImport } from './pages/ssh/SshCaByIDPage/route'
import { Route as secretManagerSecretDashboardPageRouteImport } from './pages/secret-manager/SecretDashboardPage/route'
import { Route as secretManagerIntegrationsSelectIntegrationAuthPageRouteImport } from './pages/secret-manager/integrations/SelectIntegrationAuthPage/route'
import { Route as secretManagerIntegrationsDetailsByIDPageRouteImport } from './pages/secret-manager/IntegrationsDetailsByIDPage/route'
import { Route as certManagerPkiSubscriberDetailsByIDPageRouteImport } from './pages/cert-manager/PkiSubscriberDetailsByIDPage/route'
import { Route as certManagerCertAuthDetailsByIDPageRouteImport } from './pages/cert-manager/CertAuthDetailsByIDPage/route'
import { Route as secretScanningSecretScanningDataSourcesPageRouteImport } from './pages/secret-scanning/SecretScanningDataSourcesPage/route'
import { Route as secretManagerIntegrationsListPageRouteImport } from './pages/secret-manager/IntegrationsListPage/route'
import { Route as certManagerPkiSubscribersPageRouteImport } from './pages/cert-manager/PkiSubscribersPage/route'
import { Route as certManagerPkiTemplateListPageRouteImport } from './pages/cert-manager/PkiTemplateListPage/route'
import { Route as secretScanningSecretScanningDataSourceByIdPageRouteImport } from './pages/secret-scanning/SecretScanningDataSourceByIdPage/route'
import { Route as secretManagerIntegrationsWindmillConfigurePageRouteImport } from './pages/secret-manager/integrations/WindmillConfigurePage/route'
import { Route as secretManagerIntegrationsWindmillAuthorizePageRouteImport } from './pages/secret-manager/integrations/WindmillAuthorizePage/route'
import { Route as secretManagerIntegrationsVercelConfigurePageRouteImport } from './pages/secret-manager/integrations/VercelConfigurePage/route'
import { Route as secretManagerIntegrationsTravisCIConfigurePageRouteImport } from './pages/secret-manager/integrations/TravisCIConfigurePage/route'
import { Route as secretManagerIntegrationsTravisCIAuthorizePageRouteImport } from './pages/secret-manager/integrations/TravisCIAuthorizePage/route'
import { Route as secretManagerIntegrationsTerraformCloudConfigurePageRouteImport } from './pages/secret-manager/integrations/TerraformCloudConfigurePage/route'
import { Route as secretManagerIntegrationsTerraformCloudAuthorizePageRouteImport } from './pages/secret-manager/integrations/TerraformCloudAuthorizePage/route'
import { Route as secretManagerIntegrationsTeamcityConfigurePageRouteImport } from './pages/secret-manager/integrations/TeamcityConfigurePage/route'
import { Route as secretManagerIntegrationsTeamcityAuthorizePageRouteImport } from './pages/secret-manager/integrations/TeamcityAuthorizePage/route'
import { Route as secretManagerIntegrationsSupabaseConfigurePageRouteImport } from './pages/secret-manager/integrations/SupabaseConfigurePage/route'
import { Route as secretManagerIntegrationsSupabaseAuthorizePageRouteImport } from './pages/secret-manager/integrations/SupabaseAuthorizePage/route'
import { Route as secretManagerIntegrationsRundeckConfigurePageRouteImport } from './pages/secret-manager/integrations/RundeckConfigurePage/route'
import { Route as secretManagerIntegrationsRundeckAuthorizePageRouteImport } from './pages/secret-manager/integrations/RundeckAuthorizePage/route'
import { Route as secretManagerIntegrationsRenderConfigurePageRouteImport } from './pages/secret-manager/integrations/RenderConfigurePage/route'
import { Route as secretManagerIntegrationsRenderAuthorizePageRouteImport } from './pages/secret-manager/integrations/RenderAuthorizePage/route'
import { Route as secretManagerIntegrationsRailwayConfigurePageRouteImport } from './pages/secret-manager/integrations/RailwayConfigurePage/route'
import { Route as secretManagerIntegrationsRailwayAuthorizePageRouteImport } from './pages/secret-manager/integrations/RailwayAuthorizePage/route'
import { Route as secretManagerIntegrationsQoveryConfigurePageRouteImport } from './pages/secret-manager/integrations/QoveryConfigurePage/route'
import { Route as secretManagerIntegrationsQoveryAuthorizePageRouteImport } from './pages/secret-manager/integrations/QoveryAuthorizePage/route'
import { Route as secretManagerIntegrationsOctopusDeployConfigurePageRouteImport } from './pages/secret-manager/integrations/OctopusDeployConfigurePage/route'
import { Route as secretManagerIntegrationsOctopusDeployAuthorizePageRouteImport } from './pages/secret-manager/integrations/OctopusDeployAuthorizePage/route'
import { Route as secretManagerIntegrationsNorthflankConfigurePageRouteImport } from './pages/secret-manager/integrations/NorthflankConfigurePage/route'
import { Route as secretManagerIntegrationsNorthflankAuthorizePageRouteImport } from './pages/secret-manager/integrations/NorthflankAuthorizePage/route'
import { Route as secretManagerIntegrationsNetlifyConfigurePageRouteImport } from './pages/secret-manager/integrations/NetlifyConfigurePage/route'
import { Route as secretManagerIntegrationsLaravelForgeConfigurePageRouteImport } from './pages/secret-manager/integrations/LaravelForgeConfigurePage/route'
import { Route as secretManagerIntegrationsLaravelForgeAuthorizePageRouteImport } from './pages/secret-manager/integrations/LaravelForgeAuthorizePage/route'
import { Route as secretManagerIntegrationsHerokuConfigurePageRouteImport } from './pages/secret-manager/integrations/HerokuConfigurePage/route'
import { Route as secretManagerIntegrationsHasuraCloudConfigurePageRouteImport } from './pages/secret-manager/integrations/HasuraCloudConfigurePage/route'
import { Route as secretManagerIntegrationsHasuraCloudAuthorizePageRouteImport } from './pages/secret-manager/integrations/HasuraCloudAuthorizePage/route'
import { Route as secretManagerIntegrationsHashicorpVaultConfigurePageRouteImport } from './pages/secret-manager/integrations/HashicorpVaultConfigurePage/route'
import { Route as secretManagerIntegrationsHashicorpVaultAuthorizePageRouteImport } from './pages/secret-manager/integrations/HashicorpVaultAuthorizePage/route'
import { Route as secretManagerIntegrationsGitlabConfigurePageRouteImport } from './pages/secret-manager/integrations/GitlabConfigurePage/route'
import { Route as secretManagerIntegrationsGitlabAuthorizePageRouteImport } from './pages/secret-manager/integrations/GitlabAuthorizePage/route'
import { Route as secretManagerIntegrationsGithubConfigurePageRouteImport } from './pages/secret-manager/integrations/GithubConfigurePage/route'
import { Route as secretManagerIntegrationsGithubAuthorizePageRouteImport } from './pages/secret-manager/integrations/GithubAuthorizePage/route'
import { Route as secretManagerIntegrationsGcpSecretManagerConfigurePageRouteImport } from './pages/secret-manager/integrations/GcpSecretManagerConfigurePage/route'
import { Route as secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteImport } from './pages/secret-manager/integrations/GcpSecretManagerAuthorizePage/route'
import { Route as secretManagerIntegrationsFlyioConfigurePageRouteImport } from './pages/secret-manager/integrations/FlyioConfigurePage/route'
import { Route as secretManagerIntegrationsFlyioAuthorizePageRouteImport } from './pages/secret-manager/integrations/FlyioAuthorizePage/route'
import { Route as secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteImport } from './pages/secret-manager/integrations/DigitalOceanAppPlatformConfigurePage/route'
import { Route as secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteImport } from './pages/secret-manager/integrations/DigitalOceanAppPlatformAuthorizePage/route'
import { Route as secretManagerIntegrationsDatabricksConfigurePageRouteImport } from './pages/secret-manager/integrations/DatabricksConfigurePage/route'
import { Route as secretManagerIntegrationsDatabricksAuthorizePageRouteImport } from './pages/secret-manager/integrations/DatabricksAuthorizePage/route'
import { Route as secretManagerIntegrationsCodefreshConfigurePageRouteImport } from './pages/secret-manager/integrations/CodefreshConfigurePage/route'
import { Route as secretManagerIntegrationsCodefreshAuthorizePageRouteImport } from './pages/secret-manager/integrations/CodefreshAuthorizePage/route'
import { Route as secretManagerIntegrationsCloudflareWorkersConfigurePageRouteImport } from './pages/secret-manager/integrations/CloudflareWorkersConfigurePage/route'
import { Route as secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteImport } from './pages/secret-manager/integrations/CloudflareWorkersAuthorizePage/route'
import { Route as secretManagerIntegrationsCloudflarePagesConfigurePageRouteImport } from './pages/secret-manager/integrations/CloudflarePagesConfigurePage/route'
import { Route as secretManagerIntegrationsCloudflarePagesAuthorizePageRouteImport } from './pages/secret-manager/integrations/CloudflarePagesAuthorizePage/route'
import { Route as secretManagerIntegrationsCloud66ConfigurePageRouteImport } from './pages/secret-manager/integrations/Cloud66ConfigurePage/route'
import { Route as secretManagerIntegrationsCloud66AuthorizePageRouteImport } from './pages/secret-manager/integrations/Cloud66AuthorizePage/route'
import { Route as secretManagerIntegrationsCircleCIConfigurePageRouteImport } from './pages/secret-manager/integrations/CircleCIConfigurePage/route'
import { Route as secretManagerIntegrationsCircleCIAuthorizePageRouteImport } from './pages/secret-manager/integrations/CircleCIAuthorizePage/route'
import { Route as secretManagerIntegrationsChecklyConfigurePageRouteImport } from './pages/secret-manager/integrations/ChecklyConfigurePage/route'
import { Route as secretManagerIntegrationsChecklyAuthorizePageRouteImport } from './pages/secret-manager/integrations/ChecklyAuthorizePage/route'
import { Route as secretManagerIntegrationsBitbucketConfigurePageRouteImport } from './pages/secret-manager/integrations/BitbucketConfigurePage/route'
import { Route as secretManagerIntegrationsAzureKeyVaultConfigurePageRouteImport } from './pages/secret-manager/integrations/AzureKeyVaultConfigurePage/route'
import { Route as secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteImport } from './pages/secret-manager/integrations/AzureKeyVaultAuthorizePage/route'
import { Route as secretManagerIntegrationsAzureDevopsConfigurePageRouteImport } from './pages/secret-manager/integrations/AzureDevopsConfigurePage/route'
import { Route as secretManagerIntegrationsAzureDevopsAuthorizePageRouteImport } from './pages/secret-manager/integrations/AzureDevopsAuthorizePage/route'
import { Route as secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteImport } from './pages/secret-manager/integrations/AzureAppConfigurationConfigurePage/route'
import { Route as secretManagerIntegrationsAwsSecretManagerConfigurePageRouteImport } from './pages/secret-manager/integrations/AwsSecretManagerConfigurePage/route'
import { Route as secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteImport } from './pages/secret-manager/integrations/AwsSecretManagerAuthorizePage/route'
import { Route as secretManagerIntegrationsAwsParameterStoreConfigurePageRouteImport } from './pages/secret-manager/integrations/AwsParameterStoreConfigurePage/route'
import { Route as secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteImport } from './pages/secret-manager/integrations/AwsParameterStoreAuthorizePage/route'
import { Route as secretManagerIntegrationsVercelOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/VercelOauthCallbackPage/route'
import { Route as secretManagerSecretSyncDetailsByIDPageRouteImport } from './pages/secret-manager/SecretSyncDetailsByIDPage/route'
import { Route as secretManagerIntegrationsNetlifyOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/NetlifyOauthCallbackPage/route'
import { Route as secretManagerIntegrationsHerokuOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/HerokuOauthCallbackPage/route'
import { Route as secretManagerIntegrationsGitlabOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/GitlabOauthCallbackPage/route'
import { Route as secretManagerIntegrationsGithubOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/GithubOauthCallbackPage/route'
import { Route as secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/GcpSecretManagerOauthCallbackPage/route'
import { Route as secretManagerIntegrationsBitbucketOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/BitbucketOauthCallbackPage/route'
import { Route as secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/AzureKeyVaultOauthCallbackPage/route'
import { Route as secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteImport } from './pages/secret-manager/integrations/AzureAppConfigurationOauthCallbackPage/route'
import { Route as secretManagerCommitsPageRouteImport } from './pages/secret-manager/CommitsPage/route'
import { Route as secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteImport } from './pages/secret-manager/CommitDetailsPage/components/RollbackPreviewTab/route'
import { Route as secretManagerCommitDetailsPageRouteImport } from './pages/secret-manager/CommitDetailsPage/route'

// Create Virtual Routes

const RestrictLoginSignupSignupImport = createFileRoute(
  '/_restrict-login-signup/signup',
)()
const RestrictLoginSignupLoginImport = createFileRoute(
  '/_restrict-login-signup/login',
)()
const AuthenticatePersonalSettingsImport = createFileRoute(
  '/_authenticate/personal-settings',
)()
const AuthenticateInjectOrgDetailsAdminImport = createFileRoute(
  '/_authenticate/_inject-org-details/admin',
)()
const AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport = createFileRoute(
  '/_authenticate/_inject-org-details/_org-layout/organization',
)()
const AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport = createFileRoute(
  '/_authenticate/_inject-org-details/_org-layout/integrations',
)()
const AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/organization/settings',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/organization/gateways',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/organization/app-connections',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId',
  )()
const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdImport =
  createFileRoute(
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId',
  )()

// Create/Update Routes

const middlewaresRestrictLoginSignupRoute =
  middlewaresRestrictLoginSignupImport.update({
    id: '/_restrict-login-signup',
    getParentRoute: () => rootRoute,
  } as any)

const middlewaresAuthenticateRoute = middlewaresAuthenticateImport.update({
  id: '/_authenticate',
  getParentRoute: () => rootRoute,
} as any)

const publicShareSecretPageRouteRoute = publicShareSecretPageRouteImport.update(
  {
    id: '/share-secret',
    path: '/share-secret',
    getParentRoute: () => rootRoute,
  } as any,
)

const authCliRedirectPageRouteRoute = authCliRedirectPageRouteImport.update({
  id: '/cli-redirect',
  path: '/cli-redirect',
  getParentRoute: () => rootRoute,
} as any)

const indexRoute = indexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RestrictLoginSignupSignupRoute = RestrictLoginSignupSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const RestrictLoginSignupLoginRoute = RestrictLoginSignupLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const AuthenticatePersonalSettingsRoute =
  AuthenticatePersonalSettingsImport.update({
    id: '/personal-settings',
    path: '/personal-settings',
    getParentRoute: () => middlewaresAuthenticateRoute,
  } as any)

const middlewaresInjectOrgDetailsRoute =
  middlewaresInjectOrgDetailsImport.update({
    id: '/_inject-org-details',
    getParentRoute: () => middlewaresAuthenticateRoute,
  } as any)

const authVerifyEmailPageRouteRoute = authVerifyEmailPageRouteImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const authSignUpInvitePageRouteRoute = authSignUpInvitePageRouteImport.update({
  id: '/signupinvite',
  path: '/signupinvite',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const authRequestNewInvitePageRouteRoute =
  authRequestNewInvitePageRouteImport.update({
    id: '/requestnewinvite',
    path: '/requestnewinvite',
    getParentRoute: () => middlewaresRestrictLoginSignupRoute,
  } as any)

const authPasswordResetPageRouteRoute = authPasswordResetPageRouteImport.update(
  {
    id: '/password-reset',
    path: '/password-reset',
    getParentRoute: () => middlewaresRestrictLoginSignupRoute,
  } as any,
)

const authEmailNotVerifiedPageRouteRoute =
  authEmailNotVerifiedPageRouteImport.update({
    id: '/email-not-verified',
    path: '/email-not-verified',
    getParentRoute: () => middlewaresRestrictLoginSignupRoute,
  } as any)

const authPasswordSetupPageRouteRoute = authPasswordSetupPageRouteImport.update(
  {
    id: '/password-setup',
    path: '/password-setup',
    getParentRoute: () => middlewaresAuthenticateRoute,
  } as any,
)

const userLayoutRoute = userLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthenticatePersonalSettingsRoute,
} as any)

const AuthenticateInjectOrgDetailsAdminRoute =
  AuthenticateInjectOrgDetailsAdminImport.update({
    id: '/admin',
    path: '/admin',
    getParentRoute: () => middlewaresInjectOrgDetailsRoute,
  } as any)

const organizationLayoutRoute = organizationLayoutImport.update({
  id: '/_org-layout',
  getParentRoute: () => middlewaresInjectOrgDetailsRoute,
} as any)

const publicViewSharedSecretByIDPageRouteRoute =
  publicViewSharedSecretByIDPageRouteImport.update({
    id: '/shared/secret/$secretId',
    path: '/shared/secret/$secretId',
    getParentRoute: () => rootRoute,
  } as any)

const publicViewSecretRequestByIDPageRouteRoute =
  publicViewSecretRequestByIDPageRouteImport.update({
    id: '/secret-request/secret/$secretRequestId',
    path: '/secret-request/secret/$secretRequestId',
    getParentRoute: () => rootRoute,
  } as any)

const authSignUpSsoPageRouteRoute = authSignUpSsoPageRouteImport.update({
  id: '/sso',
  path: '/sso',
  getParentRoute: () => RestrictLoginSignupSignupRoute,
} as any)

const authLoginSsoPageRouteRoute = authLoginSsoPageRouteImport.update({
  id: '/sso',
  path: '/sso',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const authSelectOrgPageRouteRoute = authSelectOrgPageRouteImport.update({
  id: '/select-organization',
  path: '/select-organization',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const authLoginLdapPageRouteRoute = authLoginLdapPageRouteImport.update({
  id: '/ldap',
  path: '/ldap',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const authAdminLoginPageRouteRoute = authAdminLoginPageRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const adminSignUpPageRouteRoute = adminSignUpPageRouteImport.update({
  id: '/admin/signup',
  path: '/admin/signup',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const organizationNoOrgPageRouteRoute = organizationNoOrgPageRouteImport.update(
  {
    id: '/organization/none',
    path: '/organization/none',
    getParentRoute: () => middlewaresAuthenticateRoute,
  } as any,
)

const authSignUpPageRouteRoute = authSignUpPageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RestrictLoginSignupSignupRoute,
} as any)

const authLoginPageRouteRoute = authLoginPageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const adminLayoutRoute = adminLayoutImport.update({
  id: '/_admin-layout',
  getParentRoute: () => AuthenticateInjectOrgDetailsAdminRoute,
} as any)

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport.update({
    id: '/organization',
    path: '/organization',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute =
  AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport.update({
    id: '/integrations',
    path: '/integrations',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const authProviderSuccessPageRouteRoute =
  authProviderSuccessPageRouteImport.update({
    id: '/provider/success',
    path: '/provider/success',
    getParentRoute: () => RestrictLoginSignupLoginRoute,
  } as any)

const authProviderErrorPageRouteRoute = authProviderErrorPageRouteImport.update(
  {
    id: '/provider/error',
    path: '/provider/error',
    getParentRoute: () => RestrictLoginSignupLoginRoute,
  } as any,
)

const userPersonalSettingsPageRouteRoute =
  userPersonalSettingsPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => userLayoutRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRoute =
  AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdImport.update({
    id: '/secret-manager/$projectId',
    path: '/secret-manager/$projectId',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRoute =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRoute =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingImport.update({
    id: '/secret-sharing',
    path: '/secret-sharing',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRoute =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysImport.update({
    id: '/gateways',
    path: '/gateways',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRoute =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsImport.update({
    id: '/app-connections',
    path: '/app-connections',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const adminIntegrationsPageRouteRoute = adminIntegrationsPageRouteImport.update(
  {
    id: '/integrations',
    path: '/integrations',
    getParentRoute: () => adminLayoutRoute,
  } as any,
)

const adminEnvironmentPageRouteRoute = adminEnvironmentPageRouteImport.update({
  id: '/environment',
  path: '/environment',
  getParentRoute: () => adminLayoutRoute,
} as any)

const adminEncryptionPageRouteRoute = adminEncryptionPageRouteImport.update({
  id: '/encryption',
  path: '/encryption',
  getParentRoute: () => adminLayoutRoute,
} as any)

const adminCachingPageRouteRoute = adminCachingPageRouteImport.update({
  id: '/caching',
  path: '/caching',
  getParentRoute: () => adminLayoutRoute,
} as any)

const adminAuthenticationPageRouteRoute =
  adminAuthenticationPageRouteImport.update({
    id: '/authentication',
    path: '/authentication',
    getParentRoute: () => adminLayoutRoute,
  } as any)

const organizationProjectsPageRouteRoute =
  organizationProjectsPageRouteImport.update({
    id: '/projects',
    path: '/projects',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const organizationBillingPageRouteRoute =
  organizationBillingPageRouteImport.update({
    id: '/billing',
    path: '/billing',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const organizationAuditLogsPageRouteRoute =
  organizationAuditLogsPageRouteImport.update({
    id: '/audit-logs',
    path: '/audit-logs',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const organizationAdminPageRouteRoute = organizationAdminPageRouteImport.update(
  {
    id: '/admin',
    path: '/admin',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any,
)

const organizationAccessManagementPageRouteRoute =
  organizationAccessManagementPageRouteImport.update({
    id: '/access-management',
    path: '/access-management',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const adminGeneralPageRouteRoute = adminGeneralPageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => adminLayoutRoute,
} as any)

const secretManagerRedirectsRedirectApprovalPageRoute =
  secretManagerRedirectsRedirectApprovalPageImport.update({
    id: '/approval',
    path: '/approval',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdImport.update({
    id: '/projects/ssh/$projectId',
    path: '/projects/ssh/$projectId',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdImport.update(
    {
      id: '/projects/secret-scanning/$projectId',
      path: '/projects/secret-scanning/$projectId',
      getParentRoute: () => organizationLayoutRoute,
    } as any,
  )

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdImport.update(
    {
      id: '/projects/secret-management/$projectId',
      path: '/projects/secret-management/$projectId',
      getParentRoute: () => organizationLayoutRoute,
    } as any,
  )

const AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdImport.update({
    id: '/projects/kms/$projectId',
    path: '/projects/kms/$projectId',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdImport.update(
    {
      id: '/projects/cert-management/$projectId',
      path: '/projects/cert-management/$projectId',
      getParentRoute: () => organizationLayoutRoute,
    } as any,
  )

const adminUserIdentitiesResourcesPageRouteRoute =
  adminUserIdentitiesResourcesPageRouteImport.update({
    id: '/resources/user-identities',
    path: '/resources/user-identities',
    getParentRoute: () => adminLayoutRoute,
  } as any)

const adminOrganizationResourcesPageRouteRoute =
  adminOrganizationResourcesPageRouteImport.update({
    id: '/resources/organizations',
    path: '/resources/organizations',
    getParentRoute: () => adminLayoutRoute,
  } as any)

const adminMachineIdentitiesResourcesPageRouteRoute =
  adminMachineIdentitiesResourcesPageRouteImport.update({
    id: '/resources/machine-identities',
    path: '/resources/machine-identities',
    getParentRoute: () => adminLayoutRoute,
  } as any)

const organizationSecretSharingSettingsPageRouteRoute =
  organizationSecretSharingSettingsPageRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRoute,
  } as any)

const organizationRoleByIDPageRouteRoute =
  organizationRoleByIDPageRouteImport.update({
    id: '/roles/$roleId',
    path: '/roles/$roleId',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const organizationUserDetailsByIDPageRouteRoute =
  organizationUserDetailsByIDPageRouteImport.update({
    id: '/members/$membershipId',
    path: '/members/$membershipId',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const organizationIdentityDetailsByIDPageRouteRoute =
  organizationIdentityDetailsByIDPageRouteImport.update({
    id: '/identities/$identityId',
    path: '/identities/$identityId',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const organizationGroupDetailsByIDPageRouteRoute =
  organizationGroupDetailsByIDPageRouteImport.update({
    id: '/groups/$groupId',
    path: '/groups/$groupId',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute,
  } as any)

const organizationSettingsPageRouteRoute =
  organizationSettingsPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRoute,
  } as any)

const organizationSecretSharingPageRouteRoute =
  organizationSecretSharingPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRoute,
  } as any)

const organizationGatewaysGatewayListPageRouteRoute =
  organizationGatewaysGatewayListPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRoute,
  } as any)

const organizationAppConnectionsAppConnectionsPageRouteRoute =
  organizationAppConnectionsAppConnectionsPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRoute,
  } as any)

const sshLayoutRoute = sshLayoutImport.update({
  id: '/_ssh-layout',
  getParentRoute: () =>
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRoute,
} as any)

const secretScanningLayoutRoute = secretScanningLayoutImport.update({
  id: '/_secret-scanning-layout',
  getParentRoute: () =>
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRoute,
} as any)

const secretManagerLayoutRoute = secretManagerLayoutImport.update({
  id: '/_secret-manager-layout',
  getParentRoute: () =>
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRoute,
} as any)

const kmsLayoutRoute = kmsLayoutImport.update({
  id: '/_kms-layout',
  getParentRoute: () =>
    AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRoute,
} as any)

const certManagerLayoutRoute = certManagerLayoutImport.update({
  id: '/_cert-manager-layout',
  getParentRoute: () =>
    AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRoute,
} as any)

const secretManagerIntegrationsRouteVercelOauthRedirectRoute =
  secretManagerIntegrationsRouteVercelOauthRedirectImport.update({
    id: '/vercel/oauth2/callback',
    path: '/vercel/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRouteNetlifyOauthRedirectRoute =
  secretManagerIntegrationsRouteNetlifyOauthRedirectImport.update({
    id: '/netlify/oauth2/callback',
    path: '/netlify/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRouteHerokuOauthRedirectRoute =
  secretManagerIntegrationsRouteHerokuOauthRedirectImport.update({
    id: '/heroku/oauth2/callback',
    path: '/heroku/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRouteGitlabOauthRedirectRoute =
  secretManagerIntegrationsRouteGitlabOauthRedirectImport.update({
    id: '/gitlab/oauth2/callback',
    path: '/gitlab/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRouteGithubOauthRedirectRoute =
  secretManagerIntegrationsRouteGithubOauthRedirectImport.update({
    id: '/github/oauth2/callback',
    path: '/github/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRouteGcpOauthRedirectRoute =
  secretManagerIntegrationsRouteGcpOauthRedirectImport.update({
    id: '/gcp-secret-manager/oauth2/callback',
    path: '/gcp-secret-manager/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRouteBitbucketOauthRedirectRoute =
  secretManagerIntegrationsRouteBitbucketOauthRedirectImport.update({
    id: '/bitbucket/oauth2/callback',
    path: '/bitbucket/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectRoute =
  secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectImport.update({
    id: '/azure-key-vault/oauth2/callback',
    path: '/azure-key-vault/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectRoute =
  secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectImport.update(
    {
      id: '/azure-app-configuration/oauth2/callback',
      path: '/azure-app-configuration/oauth2/callback',
      getParentRoute: () =>
        AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute,
    } as any,
  )

const organizationSettingsPageOauthCallbackPageRouteRoute =
  organizationSettingsPageOauthCallbackPageRouteImport.update({
    id: '/oauth/callback',
    path: '/oauth/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRoute,
  } as any)

const projectAuditLogsPageRouteSshRoute =
  projectAuditLogsPageRouteSshImport.update({
    id: '/audit-logs',
    path: '/audit-logs',
    getParentRoute: () => sshLayoutRoute,
  } as any)

const projectAccessControlPageRouteSshRoute =
  projectAccessControlPageRouteSshImport.update({
    id: '/access-management',
    path: '/access-management',
    getParentRoute: () => sshLayoutRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesImport.update(
    {
      id: '/data-sources',
      path: '/data-sources',
      getParentRoute: () => secretScanningLayoutRoute,
    } as any,
  )

const projectAuditLogsPageRouteSecretScanningRoute =
  projectAuditLogsPageRouteSecretScanningImport.update({
    id: '/audit-logs',
    path: '/audit-logs',
    getParentRoute: () => secretScanningLayoutRoute,
  } as any)

const projectAccessControlPageRouteSecretScanningRoute =
  projectAccessControlPageRouteSecretScanningImport.update({
    id: '/access-management',
    path: '/access-management',
    getParentRoute: () => secretScanningLayoutRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport.update(
    {
      id: '/integrations',
      path: '/integrations',
      getParentRoute: () => secretManagerLayoutRoute,
    } as any,
  )

const projectAuditLogsPageRouteSecretManagerRoute =
  projectAuditLogsPageRouteSecretManagerImport.update({
    id: '/audit-logs',
    path: '/audit-logs',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const projectAccessControlPageRouteSecretManagerRoute =
  projectAccessControlPageRouteSecretManagerImport.update({
    id: '/access-management',
    path: '/access-management',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const projectAuditLogsPageRouteKmsRoute =
  projectAuditLogsPageRouteKmsImport.update({
    id: '/audit-logs',
    path: '/audit-logs',
    getParentRoute: () => kmsLayoutRoute,
  } as any)

const projectAccessControlPageRouteKmsRoute =
  projectAccessControlPageRouteKmsImport.update({
    id: '/access-management',
    path: '/access-management',
    getParentRoute: () => kmsLayoutRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersImport.update(
    {
      id: '/subscribers',
      path: '/subscribers',
      getParentRoute: () => certManagerLayoutRoute,
    } as any,
  )

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesImport.update(
    {
      id: '/certificate-templates',
      path: '/certificate-templates',
      getParentRoute: () => certManagerLayoutRoute,
    } as any,
  )

const projectAuditLogsPageRouteCertManagerRoute =
  projectAuditLogsPageRouteCertManagerImport.update({
    id: '/audit-logs',
    path: '/audit-logs',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const projectAccessControlPageRouteCertManagerRoute =
  projectAccessControlPageRouteCertManagerImport.update({
    id: '/access-management',
    path: '/access-management',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const sshSettingsPageRouteRoute = sshSettingsPageRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => sshLayoutRoute,
} as any)

const sshSshHostsPageRouteRoute = sshSshHostsPageRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => sshLayoutRoute,
} as any)

const sshSshCertsPageRouteRoute = sshSshCertsPageRouteImport.update({
  id: '/certificates',
  path: '/certificates',
  getParentRoute: () => sshLayoutRoute,
} as any)

const sshSshCasPageRouteRoute = sshSshCasPageRouteImport.update({
  id: '/cas',
  path: '/cas',
  getParentRoute: () => sshLayoutRoute,
} as any)

const secretScanningSettingsPageRouteRoute =
  secretScanningSettingsPageRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => secretScanningLayoutRoute,
  } as any)

const secretScanningSecretScanningFindingsPageRouteRoute =
  secretScanningSecretScanningFindingsPageRouteImport.update({
    id: '/findings',
    path: '/findings',
    getParentRoute: () => secretScanningLayoutRoute,
  } as any)

const secretManagerSettingsPageRouteRoute =
  secretManagerSettingsPageRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const secretManagerSecretRotationPageRouteRoute =
  secretManagerSecretRotationPageRouteImport.update({
    id: '/secret-rotation',
    path: '/secret-rotation',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const secretManagerOverviewPageRouteRoute =
  secretManagerOverviewPageRouteImport.update({
    id: '/overview',
    path: '/overview',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const secretManagerSecretApprovalsPageRouteRoute =
  secretManagerSecretApprovalsPageRouteImport.update({
    id: '/approval',
    path: '/approval',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const secretManagerIPAllowlistPageRouteRoute =
  secretManagerIPAllowlistPageRouteImport.update({
    id: '/allowlist',
    path: '/allowlist',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const kmsSettingsPageRouteRoute = kmsSettingsPageRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => kmsLayoutRoute,
} as any)

const kmsOverviewPageRouteRoute = kmsOverviewPageRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => kmsLayoutRoute,
} as any)

const kmsKmipPageRouteRoute = kmsKmipPageRouteImport.update({
  id: '/kmip',
  path: '/kmip',
  getParentRoute: () => kmsLayoutRoute,
} as any)

const certManagerSettingsPageRouteRoute =
  certManagerSettingsPageRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const certManagerCertificatesPageRouteRoute =
  certManagerCertificatesPageRouteImport.update({
    id: '/certificates',
    path: '/certificates',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const certManagerCertificateAuthoritiesPageRouteRoute =
  certManagerCertificateAuthoritiesPageRouteImport.update({
    id: '/certificate-authorities',
    path: '/certificate-authorities',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const certManagerAlertingPageRouteRoute =
  certManagerAlertingPageRouteImport.update({
    id: '/alerting',
    path: '/alerting',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const organizationAppConnectionsOauthCallbackPageRouteRoute =
  organizationAppConnectionsOauthCallbackPageRouteImport.update({
    id: '/$appConnection/oauth/callback',
    path: '/$appConnection/oauth/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRoute,
  } as any)

const projectRoleDetailsBySlugPageRouteSshRoute =
  projectRoleDetailsBySlugPageRouteSshImport.update({
    id: '/roles/$roleSlug',
    path: '/roles/$roleSlug',
    getParentRoute: () => sshLayoutRoute,
  } as any)

const projectMemberDetailsByIDPageRouteSshRoute =
  projectMemberDetailsByIDPageRouteSshImport.update({
    id: '/members/$membershipId',
    path: '/members/$membershipId',
    getParentRoute: () => sshLayoutRoute,
  } as any)

const projectIdentityDetailsByIDPageRouteSshRoute =
  projectIdentityDetailsByIDPageRouteSshImport.update({
    id: '/identities/$identityId',
    path: '/identities/$identityId',
    getParentRoute: () => sshLayoutRoute,
  } as any)

const projectGroupDetailsByIDPageRouteSshRoute =
  projectGroupDetailsByIDPageRouteSshImport.update({
    id: '/groups/$groupId',
    path: '/groups/$groupId',
    getParentRoute: () => sshLayoutRoute,
  } as any)

const projectRoleDetailsBySlugPageRouteSecretScanningRoute =
  projectRoleDetailsBySlugPageRouteSecretScanningImport.update({
    id: '/roles/$roleSlug',
    path: '/roles/$roleSlug',
    getParentRoute: () => secretScanningLayoutRoute,
  } as any)

const projectMemberDetailsByIDPageRouteSecretScanningRoute =
  projectMemberDetailsByIDPageRouteSecretScanningImport.update({
    id: '/members/$membershipId',
    path: '/members/$membershipId',
    getParentRoute: () => secretScanningLayoutRoute,
  } as any)

const projectIdentityDetailsByIDPageRouteSecretScanningRoute =
  projectIdentityDetailsByIDPageRouteSecretScanningImport.update({
    id: '/identities/$identityId',
    path: '/identities/$identityId',
    getParentRoute: () => secretScanningLayoutRoute,
  } as any)

const projectGroupDetailsByIDPageRouteSecretScanningRoute =
  projectGroupDetailsByIDPageRouteSecretScanningImport.update({
    id: '/groups/$groupId',
    path: '/groups/$groupId',
    getParentRoute: () => secretScanningLayoutRoute,
  } as any)

const projectRoleDetailsBySlugPageRouteSecretManagerRoute =
  projectRoleDetailsBySlugPageRouteSecretManagerImport.update({
    id: '/roles/$roleSlug',
    path: '/roles/$roleSlug',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const projectMemberDetailsByIDPageRouteSecretManagerRoute =
  projectMemberDetailsByIDPageRouteSecretManagerImport.update({
    id: '/members/$membershipId',
    path: '/members/$membershipId',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const projectIdentityDetailsByIDPageRouteSecretManagerRoute =
  projectIdentityDetailsByIDPageRouteSecretManagerImport.update({
    id: '/identities/$identityId',
    path: '/identities/$identityId',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const projectGroupDetailsByIDPageRouteSecretManagerRoute =
  projectGroupDetailsByIDPageRouteSecretManagerImport.update({
    id: '/groups/$groupId',
    path: '/groups/$groupId',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const projectRoleDetailsBySlugPageRouteKmsRoute =
  projectRoleDetailsBySlugPageRouteKmsImport.update({
    id: '/roles/$roleSlug',
    path: '/roles/$roleSlug',
    getParentRoute: () => kmsLayoutRoute,
  } as any)

const projectMemberDetailsByIDPageRouteKmsRoute =
  projectMemberDetailsByIDPageRouteKmsImport.update({
    id: '/members/$membershipId',
    path: '/members/$membershipId',
    getParentRoute: () => kmsLayoutRoute,
  } as any)

const projectIdentityDetailsByIDPageRouteKmsRoute =
  projectIdentityDetailsByIDPageRouteKmsImport.update({
    id: '/identities/$identityId',
    path: '/identities/$identityId',
    getParentRoute: () => kmsLayoutRoute,
  } as any)

const projectGroupDetailsByIDPageRouteKmsRoute =
  projectGroupDetailsByIDPageRouteKmsImport.update({
    id: '/groups/$groupId',
    path: '/groups/$groupId',
    getParentRoute: () => kmsLayoutRoute,
  } as any)

const projectRoleDetailsBySlugPageRouteCertManagerRoute =
  projectRoleDetailsBySlugPageRouteCertManagerImport.update({
    id: '/roles/$roleSlug',
    path: '/roles/$roleSlug',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const certManagerPkiCollectionDetailsByIDPageRoutesRoute =
  certManagerPkiCollectionDetailsByIDPageRoutesImport.update({
    id: '/pki-collections/$collectionId',
    path: '/pki-collections/$collectionId',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const projectMemberDetailsByIDPageRouteCertManagerRoute =
  projectMemberDetailsByIDPageRouteCertManagerImport.update({
    id: '/members/$membershipId',
    path: '/members/$membershipId',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const projectIdentityDetailsByIDPageRouteCertManagerRoute =
  projectIdentityDetailsByIDPageRouteCertManagerImport.update({
    id: '/identities/$identityId',
    path: '/identities/$identityId',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const projectGroupDetailsByIDPageRouteCertManagerRoute =
  projectGroupDetailsByIDPageRouteCertManagerImport.update({
    id: '/groups/$groupId',
    path: '/groups/$groupId',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const sshSshHostGroupDetailsByIDPageRouteRoute =
  sshSshHostGroupDetailsByIDPageRouteImport.update({
    id: '/ssh-host-groups/$sshHostGroupId',
    path: '/ssh-host-groups/$sshHostGroupId',
    getParentRoute: () => sshLayoutRoute,
  } as any)

const sshSshCaByIDPageRouteRoute = sshSshCaByIDPageRouteImport.update({
  id: '/ca/$caId',
  path: '/ca/$caId',
  getParentRoute: () => sshLayoutRoute,
} as any)

const secretManagerSecretDashboardPageRouteRoute =
  secretManagerSecretDashboardPageRouteImport.update({
    id: '/secrets/$envSlug',
    path: '/secrets/$envSlug',
    getParentRoute: () => secretManagerLayoutRoute,
  } as any)

const secretManagerIntegrationsSelectIntegrationAuthPageRouteRoute =
  secretManagerIntegrationsSelectIntegrationAuthPageRouteImport.update({
    id: '/select-integration-auth',
    path: '/select-integration-auth',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsDetailsByIDPageRouteRoute =
  secretManagerIntegrationsDetailsByIDPageRouteImport.update({
    id: '/$integrationId',
    path: '/$integrationId',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const certManagerPkiSubscriberDetailsByIDPageRouteRoute =
  certManagerPkiSubscriberDetailsByIDPageRouteImport.update({
    id: '/$subscriberName',
    path: '/$subscriberName',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRoute,
  } as any)

const certManagerCertAuthDetailsByIDPageRouteRoute =
  certManagerCertAuthDetailsByIDPageRouteImport.update({
    id: '/ca/$caName',
    path: '/ca/$caName',
    getParentRoute: () => certManagerLayoutRoute,
  } as any)

const secretScanningSecretScanningDataSourcesPageRouteRoute =
  secretScanningSecretScanningDataSourcesPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRoute,
  } as any)

const secretManagerIntegrationsListPageRouteRoute =
  secretManagerIntegrationsListPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const certManagerPkiSubscribersPageRouteRoute =
  certManagerPkiSubscribersPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRoute,
  } as any)

const certManagerPkiTemplateListPageRouteRoute =
  certManagerPkiTemplateListPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdImport.update(
    {
      id: '/commits/$environment/$folderId',
      path: '/commits/$environment/$folderId',
      getParentRoute: () => secretManagerLayoutRoute,
    } as any,
  )

const secretScanningSecretScanningDataSourceByIdPageRouteRoute =
  secretScanningSecretScanningDataSourceByIdPageRouteImport.update({
    id: '/$type/$dataSourceId',
    path: '/$type/$dataSourceId',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRoute,
  } as any)

const secretManagerIntegrationsWindmillConfigurePageRouteRoute =
  secretManagerIntegrationsWindmillConfigurePageRouteImport.update({
    id: '/windmill/create',
    path: '/windmill/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsWindmillAuthorizePageRouteRoute =
  secretManagerIntegrationsWindmillAuthorizePageRouteImport.update({
    id: '/windmill/authorize',
    path: '/windmill/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsVercelConfigurePageRouteRoute =
  secretManagerIntegrationsVercelConfigurePageRouteImport.update({
    id: '/vercel/create',
    path: '/vercel/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsTravisCIConfigurePageRouteRoute =
  secretManagerIntegrationsTravisCIConfigurePageRouteImport.update({
    id: '/travisci/create',
    path: '/travisci/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsTravisCIAuthorizePageRouteRoute =
  secretManagerIntegrationsTravisCIAuthorizePageRouteImport.update({
    id: '/travisci/authorize',
    path: '/travisci/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsTerraformCloudConfigurePageRouteRoute =
  secretManagerIntegrationsTerraformCloudConfigurePageRouteImport.update({
    id: '/terraform-cloud/create',
    path: '/terraform-cloud/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsTerraformCloudAuthorizePageRouteRoute =
  secretManagerIntegrationsTerraformCloudAuthorizePageRouteImport.update({
    id: '/terraform-cloud/authorize',
    path: '/terraform-cloud/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsTeamcityConfigurePageRouteRoute =
  secretManagerIntegrationsTeamcityConfigurePageRouteImport.update({
    id: '/teamcity/create',
    path: '/teamcity/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsTeamcityAuthorizePageRouteRoute =
  secretManagerIntegrationsTeamcityAuthorizePageRouteImport.update({
    id: '/teamcity/authorize',
    path: '/teamcity/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsSupabaseConfigurePageRouteRoute =
  secretManagerIntegrationsSupabaseConfigurePageRouteImport.update({
    id: '/supabase/create',
    path: '/supabase/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsSupabaseAuthorizePageRouteRoute =
  secretManagerIntegrationsSupabaseAuthorizePageRouteImport.update({
    id: '/supabase/authorize',
    path: '/supabase/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRundeckConfigurePageRouteRoute =
  secretManagerIntegrationsRundeckConfigurePageRouteImport.update({
    id: '/rundeck/create',
    path: '/rundeck/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRundeckAuthorizePageRouteRoute =
  secretManagerIntegrationsRundeckAuthorizePageRouteImport.update({
    id: '/rundeck/authorize',
    path: '/rundeck/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRenderConfigurePageRouteRoute =
  secretManagerIntegrationsRenderConfigurePageRouteImport.update({
    id: '/render/create',
    path: '/render/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRenderAuthorizePageRouteRoute =
  secretManagerIntegrationsRenderAuthorizePageRouteImport.update({
    id: '/render/authorize',
    path: '/render/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRailwayConfigurePageRouteRoute =
  secretManagerIntegrationsRailwayConfigurePageRouteImport.update({
    id: '/railway/create',
    path: '/railway/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsRailwayAuthorizePageRouteRoute =
  secretManagerIntegrationsRailwayAuthorizePageRouteImport.update({
    id: '/railway/authorize',
    path: '/railway/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsQoveryConfigurePageRouteRoute =
  secretManagerIntegrationsQoveryConfigurePageRouteImport.update({
    id: '/qovery/create',
    path: '/qovery/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsQoveryAuthorizePageRouteRoute =
  secretManagerIntegrationsQoveryAuthorizePageRouteImport.update({
    id: '/qovery/authorize',
    path: '/qovery/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsOctopusDeployConfigurePageRouteRoute =
  secretManagerIntegrationsOctopusDeployConfigurePageRouteImport.update({
    id: '/octopus-deploy/create',
    path: '/octopus-deploy/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsOctopusDeployAuthorizePageRouteRoute =
  secretManagerIntegrationsOctopusDeployAuthorizePageRouteImport.update({
    id: '/octopus-deploy/authorize',
    path: '/octopus-deploy/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsNorthflankConfigurePageRouteRoute =
  secretManagerIntegrationsNorthflankConfigurePageRouteImport.update({
    id: '/northflank/create',
    path: '/northflank/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsNorthflankAuthorizePageRouteRoute =
  secretManagerIntegrationsNorthflankAuthorizePageRouteImport.update({
    id: '/northflank/authorize',
    path: '/northflank/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsNetlifyConfigurePageRouteRoute =
  secretManagerIntegrationsNetlifyConfigurePageRouteImport.update({
    id: '/netlify/create',
    path: '/netlify/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsLaravelForgeConfigurePageRouteRoute =
  secretManagerIntegrationsLaravelForgeConfigurePageRouteImport.update({
    id: '/laravel-forge/create',
    path: '/laravel-forge/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsLaravelForgeAuthorizePageRouteRoute =
  secretManagerIntegrationsLaravelForgeAuthorizePageRouteImport.update({
    id: '/laravel-forge/authorize',
    path: '/laravel-forge/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsHerokuConfigurePageRouteRoute =
  secretManagerIntegrationsHerokuConfigurePageRouteImport.update({
    id: '/heroku/create',
    path: '/heroku/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsHasuraCloudConfigurePageRouteRoute =
  secretManagerIntegrationsHasuraCloudConfigurePageRouteImport.update({
    id: '/hasura-cloud/create',
    path: '/hasura-cloud/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsHasuraCloudAuthorizePageRouteRoute =
  secretManagerIntegrationsHasuraCloudAuthorizePageRouteImport.update({
    id: '/hasura-cloud/authorize',
    path: '/hasura-cloud/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsHashicorpVaultConfigurePageRouteRoute =
  secretManagerIntegrationsHashicorpVaultConfigurePageRouteImport.update({
    id: '/hashicorp-vault/create',
    path: '/hashicorp-vault/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsHashicorpVaultAuthorizePageRouteRoute =
  secretManagerIntegrationsHashicorpVaultAuthorizePageRouteImport.update({
    id: '/hashicorp-vault/authorize',
    path: '/hashicorp-vault/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGitlabConfigurePageRouteRoute =
  secretManagerIntegrationsGitlabConfigurePageRouteImport.update({
    id: '/gitlab/create',
    path: '/gitlab/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGitlabAuthorizePageRouteRoute =
  secretManagerIntegrationsGitlabAuthorizePageRouteImport.update({
    id: '/gitlab/authorize',
    path: '/gitlab/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGithubConfigurePageRouteRoute =
  secretManagerIntegrationsGithubConfigurePageRouteImport.update({
    id: '/github/create',
    path: '/github/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGithubAuthorizePageRouteRoute =
  secretManagerIntegrationsGithubAuthorizePageRouteImport.update({
    id: '/github/auth-mode-selection',
    path: '/github/auth-mode-selection',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGcpSecretManagerConfigurePageRouteRoute =
  secretManagerIntegrationsGcpSecretManagerConfigurePageRouteImport.update({
    id: '/gcp-secret-manager/create',
    path: '/gcp-secret-manager/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteRoute =
  secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteImport.update({
    id: '/gcp-secret-manager/authorize',
    path: '/gcp-secret-manager/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsFlyioConfigurePageRouteRoute =
  secretManagerIntegrationsFlyioConfigurePageRouteImport.update({
    id: '/flyio/create',
    path: '/flyio/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsFlyioAuthorizePageRouteRoute =
  secretManagerIntegrationsFlyioAuthorizePageRouteImport.update({
    id: '/flyio/authorize',
    path: '/flyio/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteRoute =
  secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteImport.update(
    {
      id: '/digital-ocean-app-platform/create',
      path: '/digital-ocean-app-platform/create',
      getParentRoute: () =>
        AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
    } as any,
  )

const secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteRoute =
  secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteImport.update(
    {
      id: '/digital-ocean-app-platform/authorize',
      path: '/digital-ocean-app-platform/authorize',
      getParentRoute: () =>
        AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
    } as any,
  )

const secretManagerIntegrationsDatabricksConfigurePageRouteRoute =
  secretManagerIntegrationsDatabricksConfigurePageRouteImport.update({
    id: '/databricks/create',
    path: '/databricks/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsDatabricksAuthorizePageRouteRoute =
  secretManagerIntegrationsDatabricksAuthorizePageRouteImport.update({
    id: '/databricks/authorize',
    path: '/databricks/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCodefreshConfigurePageRouteRoute =
  secretManagerIntegrationsCodefreshConfigurePageRouteImport.update({
    id: '/codefresh/create',
    path: '/codefresh/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCodefreshAuthorizePageRouteRoute =
  secretManagerIntegrationsCodefreshAuthorizePageRouteImport.update({
    id: '/codefresh/authorize',
    path: '/codefresh/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCloudflareWorkersConfigurePageRouteRoute =
  secretManagerIntegrationsCloudflareWorkersConfigurePageRouteImport.update({
    id: '/cloudflare-workers/create',
    path: '/cloudflare-workers/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteRoute =
  secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteImport.update({
    id: '/cloudflare-workers/authorize',
    path: '/cloudflare-workers/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCloudflarePagesConfigurePageRouteRoute =
  secretManagerIntegrationsCloudflarePagesConfigurePageRouteImport.update({
    id: '/cloudflare-pages/create',
    path: '/cloudflare-pages/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCloudflarePagesAuthorizePageRouteRoute =
  secretManagerIntegrationsCloudflarePagesAuthorizePageRouteImport.update({
    id: '/cloudflare-pages/authorize',
    path: '/cloudflare-pages/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCloud66ConfigurePageRouteRoute =
  secretManagerIntegrationsCloud66ConfigurePageRouteImport.update({
    id: '/cloud-66/create',
    path: '/cloud-66/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCloud66AuthorizePageRouteRoute =
  secretManagerIntegrationsCloud66AuthorizePageRouteImport.update({
    id: '/cloud-66/authorize',
    path: '/cloud-66/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCircleCIConfigurePageRouteRoute =
  secretManagerIntegrationsCircleCIConfigurePageRouteImport.update({
    id: '/circleci/create',
    path: '/circleci/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsCircleCIAuthorizePageRouteRoute =
  secretManagerIntegrationsCircleCIAuthorizePageRouteImport.update({
    id: '/circleci/authorize',
    path: '/circleci/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsChecklyConfigurePageRouteRoute =
  secretManagerIntegrationsChecklyConfigurePageRouteImport.update({
    id: '/checkly/create',
    path: '/checkly/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsChecklyAuthorizePageRouteRoute =
  secretManagerIntegrationsChecklyAuthorizePageRouteImport.update({
    id: '/checkly/authorize',
    path: '/checkly/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsBitbucketConfigurePageRouteRoute =
  secretManagerIntegrationsBitbucketConfigurePageRouteImport.update({
    id: '/bitbucket/create',
    path: '/bitbucket/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAzureKeyVaultConfigurePageRouteRoute =
  secretManagerIntegrationsAzureKeyVaultConfigurePageRouteImport.update({
    id: '/azure-key-vault/create',
    path: '/azure-key-vault/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteRoute =
  secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteImport.update({
    id: '/azure-key-vault/authorize',
    path: '/azure-key-vault/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAzureDevopsConfigurePageRouteRoute =
  secretManagerIntegrationsAzureDevopsConfigurePageRouteImport.update({
    id: '/azure-devops/create',
    path: '/azure-devops/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAzureDevopsAuthorizePageRouteRoute =
  secretManagerIntegrationsAzureDevopsAuthorizePageRouteImport.update({
    id: '/azure-devops/authorize',
    path: '/azure-devops/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteRoute =
  secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteImport.update(
    {
      id: '/azure-app-configuration/create',
      path: '/azure-app-configuration/create',
      getParentRoute: () =>
        AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
    } as any,
  )

const secretManagerIntegrationsAwsSecretManagerConfigurePageRouteRoute =
  secretManagerIntegrationsAwsSecretManagerConfigurePageRouteImport.update({
    id: '/aws-secret-manager/create',
    path: '/aws-secret-manager/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteRoute =
  secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteImport.update({
    id: '/aws-secret-manager/authorize',
    path: '/aws-secret-manager/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAwsParameterStoreConfigurePageRouteRoute =
  secretManagerIntegrationsAwsParameterStoreConfigurePageRouteImport.update({
    id: '/aws-parameter-store/create',
    path: '/aws-parameter-store/create',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteRoute =
  secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteImport.update({
    id: '/aws-parameter-store/authorize',
    path: '/aws-parameter-store/authorize',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRoute =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdImport.update(
    {
      id: '/$commitId',
      path: '/$commitId',
      getParentRoute: () =>
        AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRoute,
    } as any,
  )

const secretManagerIntegrationsVercelOauthCallbackPageRouteRoute =
  secretManagerIntegrationsVercelOauthCallbackPageRouteImport.update({
    id: '/vercel/oauth2/callback',
    path: '/vercel/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerSecretSyncDetailsByIDPageRouteRoute =
  secretManagerSecretSyncDetailsByIDPageRouteImport.update({
    id: '/secret-syncs/$destination/$syncId',
    path: '/secret-syncs/$destination/$syncId',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsNetlifyOauthCallbackPageRouteRoute =
  secretManagerIntegrationsNetlifyOauthCallbackPageRouteImport.update({
    id: '/netlify/oauth2/callback',
    path: '/netlify/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsHerokuOauthCallbackPageRouteRoute =
  secretManagerIntegrationsHerokuOauthCallbackPageRouteImport.update({
    id: '/heroku/oauth2/callback',
    path: '/heroku/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGitlabOauthCallbackPageRouteRoute =
  secretManagerIntegrationsGitlabOauthCallbackPageRouteImport.update({
    id: '/gitlab/oauth2/callback',
    path: '/gitlab/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGithubOauthCallbackPageRouteRoute =
  secretManagerIntegrationsGithubOauthCallbackPageRouteImport.update({
    id: '/github/oauth2/callback',
    path: '/github/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteRoute =
  secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteImport.update({
    id: '/gcp-secret-manager/oauth2/callback',
    path: '/gcp-secret-manager/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsBitbucketOauthCallbackPageRouteRoute =
  secretManagerIntegrationsBitbucketOauthCallbackPageRouteImport.update({
    id: '/bitbucket/oauth2/callback',
    path: '/bitbucket/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteRoute =
  secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteImport.update({
    id: '/azure-key-vault/oauth2/callback',
    path: '/azure-key-vault/oauth2/callback',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
  } as any)

const secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteRoute =
  secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteImport.update(
    {
      id: '/azure-app-configuration/oauth2/callback',
      path: '/azure-app-configuration/oauth2/callback',
      getParentRoute: () =>
        AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute,
    } as any,
  )

const secretManagerCommitsPageRouteRoute =
  secretManagerCommitsPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRoute,
  } as any)

const secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteRoute =
  secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteImport.update({
    id: '/restore',
    path: '/restore',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRoute,
  } as any)

const secretManagerCommitDetailsPageRouteRoute =
  secretManagerCommitDetailsPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () =>
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexImport
      parentRoute: typeof rootRoute
    }
    '/cli-redirect': {
      id: '/cli-redirect'
      path: '/cli-redirect'
      fullPath: '/cli-redirect'
      preLoaderRoute: typeof authCliRedirectPageRouteImport
      parentRoute: typeof rootRoute
    }
    '/share-secret': {
      id: '/share-secret'
      path: '/share-secret'
      fullPath: '/share-secret'
      preLoaderRoute: typeof publicShareSecretPageRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authenticate': {
      id: '/_authenticate'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof middlewaresAuthenticateImport
      parentRoute: typeof rootRoute
    }
    '/_restrict-login-signup': {
      id: '/_restrict-login-signup'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof middlewaresRestrictLoginSignupImport
      parentRoute: typeof rootRoute
    }
    '/_authenticate/password-setup': {
      id: '/_authenticate/password-setup'
      path: '/password-setup'
      fullPath: '/password-setup'
      preLoaderRoute: typeof authPasswordSetupPageRouteImport
      parentRoute: typeof middlewaresAuthenticateImport
    }
    '/_restrict-login-signup/email-not-verified': {
      id: '/_restrict-login-signup/email-not-verified'
      path: '/email-not-verified'
      fullPath: '/email-not-verified'
      preLoaderRoute: typeof authEmailNotVerifiedPageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/password-reset': {
      id: '/_restrict-login-signup/password-reset'
      path: '/password-reset'
      fullPath: '/password-reset'
      preLoaderRoute: typeof authPasswordResetPageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/requestnewinvite': {
      id: '/_restrict-login-signup/requestnewinvite'
      path: '/requestnewinvite'
      fullPath: '/requestnewinvite'
      preLoaderRoute: typeof authRequestNewInvitePageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/signupinvite': {
      id: '/_restrict-login-signup/signupinvite'
      path: '/signupinvite'
      fullPath: '/signupinvite'
      preLoaderRoute: typeof authSignUpInvitePageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/verify-email': {
      id: '/_restrict-login-signup/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof authVerifyEmailPageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_authenticate/_inject-org-details': {
      id: '/_authenticate/_inject-org-details'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof middlewaresInjectOrgDetailsImport
      parentRoute: typeof middlewaresAuthenticateImport
    }
    '/_authenticate/personal-settings': {
      id: '/_authenticate/personal-settings'
      path: '/personal-settings'
      fullPath: '/personal-settings'
      preLoaderRoute: typeof AuthenticatePersonalSettingsImport
      parentRoute: typeof middlewaresAuthenticateImport
    }
    '/_restrict-login-signup/login': {
      id: '/_restrict-login-signup/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof RestrictLoginSignupLoginImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/signup': {
      id: '/_restrict-login-signup/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof RestrictLoginSignupSignupImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/login/': {
      id: '/_restrict-login-signup/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof authLoginPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/signup/': {
      id: '/_restrict-login-signup/signup/'
      path: '/'
      fullPath: '/signup/'
      preLoaderRoute: typeof authSignUpPageRouteImport
      parentRoute: typeof RestrictLoginSignupSignupImport
    }
    '/_authenticate/organization/none': {
      id: '/_authenticate/organization/none'
      path: '/organization/none'
      fullPath: '/organization/none'
      preLoaderRoute: typeof organizationNoOrgPageRouteImport
      parentRoute: typeof middlewaresAuthenticateImport
    }
    '/_restrict-login-signup/admin/signup': {
      id: '/_restrict-login-signup/admin/signup'
      path: '/admin/signup'
      fullPath: '/admin/signup'
      preLoaderRoute: typeof adminSignUpPageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/login/admin': {
      id: '/_restrict-login-signup/login/admin'
      path: '/admin'
      fullPath: '/login/admin'
      preLoaderRoute: typeof authAdminLoginPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/login/ldap': {
      id: '/_restrict-login-signup/login/ldap'
      path: '/ldap'
      fullPath: '/login/ldap'
      preLoaderRoute: typeof authLoginLdapPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/login/select-organization': {
      id: '/_restrict-login-signup/login/select-organization'
      path: '/select-organization'
      fullPath: '/login/select-organization'
      preLoaderRoute: typeof authSelectOrgPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/login/sso': {
      id: '/_restrict-login-signup/login/sso'
      path: '/sso'
      fullPath: '/login/sso'
      preLoaderRoute: typeof authLoginSsoPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/signup/sso': {
      id: '/_restrict-login-signup/signup/sso'
      path: '/sso'
      fullPath: '/signup/sso'
      preLoaderRoute: typeof authSignUpSsoPageRouteImport
      parentRoute: typeof RestrictLoginSignupSignupImport
    }
    '/secret-request/secret/$secretRequestId': {
      id: '/secret-request/secret/$secretRequestId'
      path: '/secret-request/secret/$secretRequestId'
      fullPath: '/secret-request/secret/$secretRequestId'
      preLoaderRoute: typeof publicViewSecretRequestByIDPageRouteImport
      parentRoute: typeof rootRoute
    }
    '/shared/secret/$secretId': {
      id: '/shared/secret/$secretId'
      path: '/shared/secret/$secretId'
      fullPath: '/shared/secret/$secretId'
      preLoaderRoute: typeof publicViewSharedSecretByIDPageRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authenticate/_inject-org-details/_org-layout': {
      id: '/_authenticate/_inject-org-details/_org-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof organizationLayoutImport
      parentRoute: typeof middlewaresInjectOrgDetailsImport
    }
    '/_authenticate/_inject-org-details/admin': {
      id: '/_authenticate/_inject-org-details/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsAdminImport
      parentRoute: typeof middlewaresInjectOrgDetailsImport
    }
    '/_authenticate/personal-settings/_layout': {
      id: '/_authenticate/personal-settings/_layout'
      path: ''
      fullPath: '/personal-settings'
      preLoaderRoute: typeof userLayoutImport
      parentRoute: typeof AuthenticatePersonalSettingsImport
    }
    '/_authenticate/personal-settings/_layout/': {
      id: '/_authenticate/personal-settings/_layout/'
      path: '/'
      fullPath: '/personal-settings/'
      preLoaderRoute: typeof userPersonalSettingsPageRouteImport
      parentRoute: typeof userLayoutImport
    }
    '/_restrict-login-signup/login/provider/error': {
      id: '/_restrict-login-signup/login/provider/error'
      path: '/provider/error'
      fullPath: '/login/provider/error'
      preLoaderRoute: typeof authProviderErrorPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/login/provider/success': {
      id: '/_restrict-login-signup/login/provider/success'
      path: '/provider/success'
      fullPath: '/login/provider/success'
      preLoaderRoute: typeof authProviderSuccessPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization'
      path: '/organization'
      fullPath: '/organization'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout'
      path: ''
      fullPath: '/admin'
      preLoaderRoute: typeof adminLayoutImport
      parentRoute: typeof AuthenticateInjectOrgDetailsAdminImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof adminGeneralPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/access-management': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/access-management'
      path: '/access-management'
      fullPath: '/organization/access-management'
      preLoaderRoute: typeof organizationAccessManagementPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/admin': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/admin'
      path: '/admin'
      fullPath: '/organization/admin'
      preLoaderRoute: typeof organizationAdminPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/audit-logs': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/audit-logs'
      path: '/audit-logs'
      fullPath: '/organization/audit-logs'
      preLoaderRoute: typeof organizationAuditLogsPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/billing': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/billing'
      path: '/billing'
      fullPath: '/organization/billing'
      preLoaderRoute: typeof organizationBillingPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/projects': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/projects'
      path: '/projects'
      fullPath: '/organization/projects'
      preLoaderRoute: typeof organizationProjectsPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/authentication': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/authentication'
      path: '/authentication'
      fullPath: '/admin/authentication'
      preLoaderRoute: typeof adminAuthenticationPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/caching': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/caching'
      path: '/caching'
      fullPath: '/admin/caching'
      preLoaderRoute: typeof adminCachingPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/encryption': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/encryption'
      path: '/encryption'
      fullPath: '/admin/encryption'
      preLoaderRoute: typeof adminEncryptionPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/environment': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/environment'
      path: '/environment'
      fullPath: '/admin/environment'
      preLoaderRoute: typeof adminEnvironmentPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/integrations': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/integrations'
      path: '/integrations'
      fullPath: '/admin/integrations'
      preLoaderRoute: typeof adminIntegrationsPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/app-connections': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/app-connections'
      path: '/app-connections'
      fullPath: '/organization/app-connections'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/gateways': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/gateways'
      path: '/gateways'
      fullPath: '/organization/gateways'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing'
      path: '/secret-sharing'
      fullPath: '/organization/secret-sharing'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/settings': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/settings'
      path: '/settings'
      fullPath: '/organization/settings'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId': {
      id: '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId'
      path: '/secret-manager/$projectId'
      fullPath: '/secret-manager/$projectId'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/app-connections/': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/app-connections/'
      path: '/'
      fullPath: '/organization/app-connections/'
      preLoaderRoute: typeof organizationAppConnectionsAppConnectionsPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/gateways/': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/gateways/'
      path: '/'
      fullPath: '/organization/gateways/'
      preLoaderRoute: typeof organizationGatewaysGatewayListPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/'
      path: '/'
      fullPath: '/organization/secret-sharing/'
      preLoaderRoute: typeof organizationSecretSharingPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/settings/': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/settings/'
      path: '/'
      fullPath: '/organization/settings/'
      preLoaderRoute: typeof organizationSettingsPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/groups/$groupId': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/organization/groups/$groupId'
      preLoaderRoute: typeof organizationGroupDetailsByIDPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/identities/$identityId': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/identities/$identityId'
      path: '/identities/$identityId'
      fullPath: '/organization/identities/$identityId'
      preLoaderRoute: typeof organizationIdentityDetailsByIDPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/members/$membershipId': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/members/$membershipId'
      path: '/members/$membershipId'
      fullPath: '/organization/members/$membershipId'
      preLoaderRoute: typeof organizationUserDetailsByIDPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/roles/$roleId': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/roles/$roleId'
      path: '/roles/$roleId'
      fullPath: '/organization/roles/$roleId'
      preLoaderRoute: typeof organizationRoleByIDPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/settings': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/settings'
      path: '/settings'
      fullPath: '/organization/secret-sharing/settings'
      preLoaderRoute: typeof organizationSecretSharingSettingsPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/resources/machine-identities': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/resources/machine-identities'
      path: '/resources/machine-identities'
      fullPath: '/admin/resources/machine-identities'
      preLoaderRoute: typeof adminMachineIdentitiesResourcesPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/resources/organizations': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/resources/organizations'
      path: '/resources/organizations'
      fullPath: '/admin/resources/organizations'
      preLoaderRoute: typeof adminOrganizationResourcesPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/admin/_admin-layout/resources/user-identities': {
      id: '/_authenticate/_inject-org-details/admin/_admin-layout/resources/user-identities'
      path: '/resources/user-identities'
      fullPath: '/admin/resources/user-identities'
      preLoaderRoute: typeof adminUserIdentitiesResourcesPageRouteImport
      parentRoute: typeof adminLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId'
      path: '/projects/cert-management/$projectId'
      fullPath: '/projects/cert-management/$projectId'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId'
      path: '/projects/kms/$projectId'
      fullPath: '/projects/kms/$projectId'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId'
      path: '/projects/secret-management/$projectId'
      fullPath: '/projects/secret-management/$projectId'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId'
      path: '/projects/secret-scanning/$projectId'
      fullPath: '/projects/secret-scanning/$projectId'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId'
      path: '/projects/ssh/$projectId'
      fullPath: '/projects/ssh/$projectId'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId/approval': {
      id: '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId/approval'
      path: '/approval'
      fullPath: '/secret-manager/$projectId/approval'
      preLoaderRoute: typeof secretManagerRedirectsRedirectApprovalPageImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/settings/oauth/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/settings/oauth/callback'
      path: '/oauth/callback'
      fullPath: '/organization/settings/oauth/callback'
      preLoaderRoute: typeof organizationSettingsPageOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/azure-app-configuration/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/azure-app-configuration/oauth2/callback'
      path: '/azure-app-configuration/oauth2/callback'
      fullPath: '/integrations/azure-app-configuration/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/azure-key-vault/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/azure-key-vault/oauth2/callback'
      path: '/azure-key-vault/oauth2/callback'
      fullPath: '/integrations/azure-key-vault/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/bitbucket/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/bitbucket/oauth2/callback'
      path: '/bitbucket/oauth2/callback'
      fullPath: '/integrations/bitbucket/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteBitbucketOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/gcp-secret-manager/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/gcp-secret-manager/oauth2/callback'
      path: '/gcp-secret-manager/oauth2/callback'
      fullPath: '/integrations/gcp-secret-manager/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteGcpOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/github/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/github/oauth2/callback'
      path: '/github/oauth2/callback'
      fullPath: '/integrations/github/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteGithubOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/gitlab/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/gitlab/oauth2/callback'
      path: '/gitlab/oauth2/callback'
      fullPath: '/integrations/gitlab/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteGitlabOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/heroku/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/heroku/oauth2/callback'
      path: '/heroku/oauth2/callback'
      fullPath: '/integrations/heroku/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteHerokuOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/netlify/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/netlify/oauth2/callback'
      path: '/netlify/oauth2/callback'
      fullPath: '/integrations/netlify/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteNetlifyOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/integrations/vercel/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/integrations/vercel/oauth2/callback'
      path: '/vercel/oauth2/callback'
      fullPath: '/integrations/vercel/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsRouteVercelOauthRedirectImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout'
      path: ''
      fullPath: '/projects/cert-management/$projectId'
      preLoaderRoute: typeof certManagerLayoutImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout'
      path: ''
      fullPath: '/projects/kms/$projectId'
      preLoaderRoute: typeof kmsLayoutImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout'
      path: ''
      fullPath: '/projects/secret-management/$projectId'
      preLoaderRoute: typeof secretManagerLayoutImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout'
      path: ''
      fullPath: '/projects/secret-scanning/$projectId'
      preLoaderRoute: typeof secretScanningLayoutImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout'
      path: ''
      fullPath: '/projects/ssh/$projectId'
      preLoaderRoute: typeof sshLayoutImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/organization/app-connections/$appConnection/oauth/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/organization/app-connections/$appConnection/oauth/callback'
      path: '/$appConnection/oauth/callback'
      fullPath: '/organization/app-connections/$appConnection/oauth/callback'
      preLoaderRoute: typeof organizationAppConnectionsOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/alerting': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/alerting'
      path: '/alerting'
      fullPath: '/projects/cert-management/$projectId/alerting'
      preLoaderRoute: typeof certManagerAlertingPageRouteImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-authorities': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-authorities'
      path: '/certificate-authorities'
      fullPath: '/projects/cert-management/$projectId/certificate-authorities'
      preLoaderRoute: typeof certManagerCertificateAuthoritiesPageRouteImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificates': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificates'
      path: '/certificates'
      fullPath: '/projects/cert-management/$projectId/certificates'
      preLoaderRoute: typeof certManagerCertificatesPageRouteImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/settings': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/settings'
      path: '/settings'
      fullPath: '/projects/cert-management/$projectId/settings'
      preLoaderRoute: typeof certManagerSettingsPageRouteImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/kmip': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/kmip'
      path: '/kmip'
      fullPath: '/projects/kms/$projectId/kmip'
      preLoaderRoute: typeof kmsKmipPageRouteImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/overview': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/overview'
      path: '/overview'
      fullPath: '/projects/kms/$projectId/overview'
      preLoaderRoute: typeof kmsOverviewPageRouteImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/settings': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/settings'
      path: '/settings'
      fullPath: '/projects/kms/$projectId/settings'
      preLoaderRoute: typeof kmsSettingsPageRouteImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/allowlist': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/allowlist'
      path: '/allowlist'
      fullPath: '/projects/secret-management/$projectId/allowlist'
      preLoaderRoute: typeof secretManagerIPAllowlistPageRouteImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/approval': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/approval'
      path: '/approval'
      fullPath: '/projects/secret-management/$projectId/approval'
      preLoaderRoute: typeof secretManagerSecretApprovalsPageRouteImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/overview': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/overview'
      path: '/overview'
      fullPath: '/projects/secret-management/$projectId/overview'
      preLoaderRoute: typeof secretManagerOverviewPageRouteImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secret-rotation': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secret-rotation'
      path: '/secret-rotation'
      fullPath: '/projects/secret-management/$projectId/secret-rotation'
      preLoaderRoute: typeof secretManagerSecretRotationPageRouteImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/settings': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/settings'
      path: '/settings'
      fullPath: '/projects/secret-management/$projectId/settings'
      preLoaderRoute: typeof secretManagerSettingsPageRouteImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/findings': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/findings'
      path: '/findings'
      fullPath: '/projects/secret-scanning/$projectId/findings'
      preLoaderRoute: typeof secretScanningSecretScanningFindingsPageRouteImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/settings': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/settings'
      path: '/settings'
      fullPath: '/projects/secret-scanning/$projectId/settings'
      preLoaderRoute: typeof secretScanningSettingsPageRouteImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/cas': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/cas'
      path: '/cas'
      fullPath: '/projects/ssh/$projectId/cas'
      preLoaderRoute: typeof sshSshCasPageRouteImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/certificates': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/certificates'
      path: '/certificates'
      fullPath: '/projects/ssh/$projectId/certificates'
      preLoaderRoute: typeof sshSshCertsPageRouteImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/overview': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/overview'
      path: '/overview'
      fullPath: '/projects/ssh/$projectId/overview'
      preLoaderRoute: typeof sshSshHostsPageRouteImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/settings': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/settings'
      path: '/settings'
      fullPath: '/projects/ssh/$projectId/settings'
      preLoaderRoute: typeof sshSettingsPageRouteImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/access-management': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/access-management'
      path: '/access-management'
      fullPath: '/projects/cert-management/$projectId/access-management'
      preLoaderRoute: typeof projectAccessControlPageRouteCertManagerImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/audit-logs': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/audit-logs'
      path: '/audit-logs'
      fullPath: '/projects/cert-management/$projectId/audit-logs'
      preLoaderRoute: typeof projectAuditLogsPageRouteCertManagerImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates'
      path: '/certificate-templates'
      fullPath: '/projects/cert-management/$projectId/certificate-templates'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers'
      path: '/subscribers'
      fullPath: '/projects/cert-management/$projectId/subscribers'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/access-management': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/access-management'
      path: '/access-management'
      fullPath: '/projects/kms/$projectId/access-management'
      preLoaderRoute: typeof projectAccessControlPageRouteKmsImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/audit-logs': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/audit-logs'
      path: '/audit-logs'
      fullPath: '/projects/kms/$projectId/audit-logs'
      preLoaderRoute: typeof projectAuditLogsPageRouteKmsImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/access-management': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/access-management'
      path: '/access-management'
      fullPath: '/projects/secret-management/$projectId/access-management'
      preLoaderRoute: typeof projectAccessControlPageRouteSecretManagerImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/audit-logs': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/audit-logs'
      path: '/audit-logs'
      fullPath: '/projects/secret-management/$projectId/audit-logs'
      preLoaderRoute: typeof projectAuditLogsPageRouteSecretManagerImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations'
      path: '/integrations'
      fullPath: '/projects/secret-management/$projectId/integrations'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/access-management': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/access-management'
      path: '/access-management'
      fullPath: '/projects/secret-scanning/$projectId/access-management'
      preLoaderRoute: typeof projectAccessControlPageRouteSecretScanningImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/audit-logs': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/audit-logs'
      path: '/audit-logs'
      fullPath: '/projects/secret-scanning/$projectId/audit-logs'
      preLoaderRoute: typeof projectAuditLogsPageRouteSecretScanningImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources'
      path: '/data-sources'
      fullPath: '/projects/secret-scanning/$projectId/data-sources'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/access-management': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/access-management'
      path: '/access-management'
      fullPath: '/projects/ssh/$projectId/access-management'
      preLoaderRoute: typeof projectAccessControlPageRouteSshImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/audit-logs': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/audit-logs'
      path: '/audit-logs'
      fullPath: '/projects/ssh/$projectId/audit-logs'
      preLoaderRoute: typeof projectAuditLogsPageRouteSshImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates/': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates/'
      path: '/'
      fullPath: '/projects/cert-management/$projectId/certificate-templates/'
      preLoaderRoute: typeof certManagerPkiTemplateListPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/'
      path: '/'
      fullPath: '/projects/cert-management/$projectId/subscribers/'
      preLoaderRoute: typeof certManagerPkiSubscribersPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/'
      path: '/'
      fullPath: '/projects/secret-management/$projectId/integrations/'
      preLoaderRoute: typeof secretManagerIntegrationsListPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/'
      path: '/'
      fullPath: '/projects/secret-scanning/$projectId/data-sources/'
      preLoaderRoute: typeof secretScanningSecretScanningDataSourcesPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/ca/$caName': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/ca/$caName'
      path: '/ca/$caName'
      fullPath: '/projects/cert-management/$projectId/ca/$caName'
      preLoaderRoute: typeof certManagerCertAuthDetailsByIDPageRouteImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/$subscriberName': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/$subscriberName'
      path: '/$subscriberName'
      fullPath: '/projects/cert-management/$projectId/subscribers/$subscriberName'
      preLoaderRoute: typeof certManagerPkiSubscriberDetailsByIDPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/$integrationId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/$integrationId'
      path: '/$integrationId'
      fullPath: '/projects/secret-management/$projectId/integrations/$integrationId'
      preLoaderRoute: typeof secretManagerIntegrationsDetailsByIDPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/select-integration-auth': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/select-integration-auth'
      path: '/select-integration-auth'
      fullPath: '/projects/secret-management/$projectId/integrations/select-integration-auth'
      preLoaderRoute: typeof secretManagerIntegrationsSelectIntegrationAuthPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secrets/$envSlug': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secrets/$envSlug'
      path: '/secrets/$envSlug'
      fullPath: '/projects/secret-management/$projectId/secrets/$envSlug'
      preLoaderRoute: typeof secretManagerSecretDashboardPageRouteImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ca/$caId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ca/$caId'
      path: '/ca/$caId'
      fullPath: '/projects/ssh/$projectId/ca/$caId'
      preLoaderRoute: typeof sshSshCaByIDPageRouteImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ssh-host-groups/$sshHostGroupId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ssh-host-groups/$sshHostGroupId'
      path: '/ssh-host-groups/$sshHostGroupId'
      fullPath: '/projects/ssh/$projectId/ssh-host-groups/$sshHostGroupId'
      preLoaderRoute: typeof sshSshHostGroupDetailsByIDPageRouteImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/groups/$groupId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/projects/cert-management/$projectId/groups/$groupId'
      preLoaderRoute: typeof projectGroupDetailsByIDPageRouteCertManagerImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/identities/$identityId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/identities/$identityId'
      path: '/identities/$identityId'
      fullPath: '/projects/cert-management/$projectId/identities/$identityId'
      preLoaderRoute: typeof projectIdentityDetailsByIDPageRouteCertManagerImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/members/$membershipId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/members/$membershipId'
      path: '/members/$membershipId'
      fullPath: '/projects/cert-management/$projectId/members/$membershipId'
      preLoaderRoute: typeof projectMemberDetailsByIDPageRouteCertManagerImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/pki-collections/$collectionId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/pki-collections/$collectionId'
      path: '/pki-collections/$collectionId'
      fullPath: '/projects/cert-management/$projectId/pki-collections/$collectionId'
      preLoaderRoute: typeof certManagerPkiCollectionDetailsByIDPageRoutesImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/roles/$roleSlug': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/roles/$roleSlug'
      path: '/roles/$roleSlug'
      fullPath: '/projects/cert-management/$projectId/roles/$roleSlug'
      preLoaderRoute: typeof projectRoleDetailsBySlugPageRouteCertManagerImport
      parentRoute: typeof certManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/groups/$groupId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/projects/kms/$projectId/groups/$groupId'
      preLoaderRoute: typeof projectGroupDetailsByIDPageRouteKmsImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/identities/$identityId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/identities/$identityId'
      path: '/identities/$identityId'
      fullPath: '/projects/kms/$projectId/identities/$identityId'
      preLoaderRoute: typeof projectIdentityDetailsByIDPageRouteKmsImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/members/$membershipId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/members/$membershipId'
      path: '/members/$membershipId'
      fullPath: '/projects/kms/$projectId/members/$membershipId'
      preLoaderRoute: typeof projectMemberDetailsByIDPageRouteKmsImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/roles/$roleSlug': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/roles/$roleSlug'
      path: '/roles/$roleSlug'
      fullPath: '/projects/kms/$projectId/roles/$roleSlug'
      preLoaderRoute: typeof projectRoleDetailsBySlugPageRouteKmsImport
      parentRoute: typeof kmsLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/groups/$groupId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/projects/secret-management/$projectId/groups/$groupId'
      preLoaderRoute: typeof projectGroupDetailsByIDPageRouteSecretManagerImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/identities/$identityId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/identities/$identityId'
      path: '/identities/$identityId'
      fullPath: '/projects/secret-management/$projectId/identities/$identityId'
      preLoaderRoute: typeof projectIdentityDetailsByIDPageRouteSecretManagerImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/members/$membershipId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/members/$membershipId'
      path: '/members/$membershipId'
      fullPath: '/projects/secret-management/$projectId/members/$membershipId'
      preLoaderRoute: typeof projectMemberDetailsByIDPageRouteSecretManagerImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/roles/$roleSlug': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/roles/$roleSlug'
      path: '/roles/$roleSlug'
      fullPath: '/projects/secret-management/$projectId/roles/$roleSlug'
      preLoaderRoute: typeof projectRoleDetailsBySlugPageRouteSecretManagerImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/groups/$groupId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/projects/secret-scanning/$projectId/groups/$groupId'
      preLoaderRoute: typeof projectGroupDetailsByIDPageRouteSecretScanningImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/identities/$identityId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/identities/$identityId'
      path: '/identities/$identityId'
      fullPath: '/projects/secret-scanning/$projectId/identities/$identityId'
      preLoaderRoute: typeof projectIdentityDetailsByIDPageRouteSecretScanningImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/members/$membershipId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/members/$membershipId'
      path: '/members/$membershipId'
      fullPath: '/projects/secret-scanning/$projectId/members/$membershipId'
      preLoaderRoute: typeof projectMemberDetailsByIDPageRouteSecretScanningImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/roles/$roleSlug': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/roles/$roleSlug'
      path: '/roles/$roleSlug'
      fullPath: '/projects/secret-scanning/$projectId/roles/$roleSlug'
      preLoaderRoute: typeof projectRoleDetailsBySlugPageRouteSecretScanningImport
      parentRoute: typeof secretScanningLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/groups/$groupId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/projects/ssh/$projectId/groups/$groupId'
      preLoaderRoute: typeof projectGroupDetailsByIDPageRouteSshImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/identities/$identityId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/identities/$identityId'
      path: '/identities/$identityId'
      fullPath: '/projects/ssh/$projectId/identities/$identityId'
      preLoaderRoute: typeof projectIdentityDetailsByIDPageRouteSshImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/members/$membershipId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/members/$membershipId'
      path: '/members/$membershipId'
      fullPath: '/projects/ssh/$projectId/members/$membershipId'
      preLoaderRoute: typeof projectMemberDetailsByIDPageRouteSshImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/roles/$roleSlug': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/roles/$roleSlug'
      path: '/roles/$roleSlug'
      fullPath: '/projects/ssh/$projectId/roles/$roleSlug'
      preLoaderRoute: typeof projectRoleDetailsBySlugPageRouteSshImport
      parentRoute: typeof sshLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/authorize'
      path: '/aws-parameter-store/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/aws-parameter-store/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/create'
      path: '/aws-parameter-store/create'
      fullPath: '/projects/secret-management/$projectId/integrations/aws-parameter-store/create'
      preLoaderRoute: typeof secretManagerIntegrationsAwsParameterStoreConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/authorize'
      path: '/aws-secret-manager/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/aws-secret-manager/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/create'
      path: '/aws-secret-manager/create'
      fullPath: '/projects/secret-management/$projectId/integrations/aws-secret-manager/create'
      preLoaderRoute: typeof secretManagerIntegrationsAwsSecretManagerConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/create'
      path: '/azure-app-configuration/create'
      fullPath: '/projects/secret-management/$projectId/integrations/azure-app-configuration/create'
      preLoaderRoute: typeof secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/authorize'
      path: '/azure-devops/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/azure-devops/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsAzureDevopsAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/create'
      path: '/azure-devops/create'
      fullPath: '/projects/secret-management/$projectId/integrations/azure-devops/create'
      preLoaderRoute: typeof secretManagerIntegrationsAzureDevopsConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/authorize'
      path: '/azure-key-vault/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/azure-key-vault/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/create'
      path: '/azure-key-vault/create'
      fullPath: '/projects/secret-management/$projectId/integrations/azure-key-vault/create'
      preLoaderRoute: typeof secretManagerIntegrationsAzureKeyVaultConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/create'
      path: '/bitbucket/create'
      fullPath: '/projects/secret-management/$projectId/integrations/bitbucket/create'
      preLoaderRoute: typeof secretManagerIntegrationsBitbucketConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/authorize'
      path: '/checkly/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/checkly/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsChecklyAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/create'
      path: '/checkly/create'
      fullPath: '/projects/secret-management/$projectId/integrations/checkly/create'
      preLoaderRoute: typeof secretManagerIntegrationsChecklyConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/authorize'
      path: '/circleci/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/circleci/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsCircleCIAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/create'
      path: '/circleci/create'
      fullPath: '/projects/secret-management/$projectId/integrations/circleci/create'
      preLoaderRoute: typeof secretManagerIntegrationsCircleCIConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/authorize'
      path: '/cloud-66/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/cloud-66/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsCloud66AuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/create'
      path: '/cloud-66/create'
      fullPath: '/projects/secret-management/$projectId/integrations/cloud-66/create'
      preLoaderRoute: typeof secretManagerIntegrationsCloud66ConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/authorize'
      path: '/cloudflare-pages/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/cloudflare-pages/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsCloudflarePagesAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/create'
      path: '/cloudflare-pages/create'
      fullPath: '/projects/secret-management/$projectId/integrations/cloudflare-pages/create'
      preLoaderRoute: typeof secretManagerIntegrationsCloudflarePagesConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/authorize'
      path: '/cloudflare-workers/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/cloudflare-workers/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/create'
      path: '/cloudflare-workers/create'
      fullPath: '/projects/secret-management/$projectId/integrations/cloudflare-workers/create'
      preLoaderRoute: typeof secretManagerIntegrationsCloudflareWorkersConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/authorize'
      path: '/codefresh/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/codefresh/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsCodefreshAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/create'
      path: '/codefresh/create'
      fullPath: '/projects/secret-management/$projectId/integrations/codefresh/create'
      preLoaderRoute: typeof secretManagerIntegrationsCodefreshConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/authorize'
      path: '/databricks/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/databricks/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsDatabricksAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/create'
      path: '/databricks/create'
      fullPath: '/projects/secret-management/$projectId/integrations/databricks/create'
      preLoaderRoute: typeof secretManagerIntegrationsDatabricksConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/authorize'
      path: '/digital-ocean-app-platform/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/create'
      path: '/digital-ocean-app-platform/create'
      fullPath: '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/create'
      preLoaderRoute: typeof secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/authorize'
      path: '/flyio/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/flyio/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsFlyioAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/create'
      path: '/flyio/create'
      fullPath: '/projects/secret-management/$projectId/integrations/flyio/create'
      preLoaderRoute: typeof secretManagerIntegrationsFlyioConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/authorize'
      path: '/gcp-secret-manager/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/gcp-secret-manager/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/create'
      path: '/gcp-secret-manager/create'
      fullPath: '/projects/secret-management/$projectId/integrations/gcp-secret-manager/create'
      preLoaderRoute: typeof secretManagerIntegrationsGcpSecretManagerConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/auth-mode-selection': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/auth-mode-selection'
      path: '/github/auth-mode-selection'
      fullPath: '/projects/secret-management/$projectId/integrations/github/auth-mode-selection'
      preLoaderRoute: typeof secretManagerIntegrationsGithubAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/create'
      path: '/github/create'
      fullPath: '/projects/secret-management/$projectId/integrations/github/create'
      preLoaderRoute: typeof secretManagerIntegrationsGithubConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/authorize'
      path: '/gitlab/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/gitlab/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsGitlabAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/create'
      path: '/gitlab/create'
      fullPath: '/projects/secret-management/$projectId/integrations/gitlab/create'
      preLoaderRoute: typeof secretManagerIntegrationsGitlabConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/authorize'
      path: '/hashicorp-vault/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/hashicorp-vault/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsHashicorpVaultAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/create'
      path: '/hashicorp-vault/create'
      fullPath: '/projects/secret-management/$projectId/integrations/hashicorp-vault/create'
      preLoaderRoute: typeof secretManagerIntegrationsHashicorpVaultConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/authorize'
      path: '/hasura-cloud/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/hasura-cloud/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsHasuraCloudAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/create'
      path: '/hasura-cloud/create'
      fullPath: '/projects/secret-management/$projectId/integrations/hasura-cloud/create'
      preLoaderRoute: typeof secretManagerIntegrationsHasuraCloudConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/create'
      path: '/heroku/create'
      fullPath: '/projects/secret-management/$projectId/integrations/heroku/create'
      preLoaderRoute: typeof secretManagerIntegrationsHerokuConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/authorize'
      path: '/laravel-forge/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/laravel-forge/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsLaravelForgeAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/create'
      path: '/laravel-forge/create'
      fullPath: '/projects/secret-management/$projectId/integrations/laravel-forge/create'
      preLoaderRoute: typeof secretManagerIntegrationsLaravelForgeConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/create'
      path: '/netlify/create'
      fullPath: '/projects/secret-management/$projectId/integrations/netlify/create'
      preLoaderRoute: typeof secretManagerIntegrationsNetlifyConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/authorize'
      path: '/northflank/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/northflank/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsNorthflankAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/create'
      path: '/northflank/create'
      fullPath: '/projects/secret-management/$projectId/integrations/northflank/create'
      preLoaderRoute: typeof secretManagerIntegrationsNorthflankConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/authorize'
      path: '/octopus-deploy/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/octopus-deploy/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsOctopusDeployAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/create'
      path: '/octopus-deploy/create'
      fullPath: '/projects/secret-management/$projectId/integrations/octopus-deploy/create'
      preLoaderRoute: typeof secretManagerIntegrationsOctopusDeployConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/authorize'
      path: '/qovery/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/qovery/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsQoveryAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/create'
      path: '/qovery/create'
      fullPath: '/projects/secret-management/$projectId/integrations/qovery/create'
      preLoaderRoute: typeof secretManagerIntegrationsQoveryConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/authorize'
      path: '/railway/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/railway/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsRailwayAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/create'
      path: '/railway/create'
      fullPath: '/projects/secret-management/$projectId/integrations/railway/create'
      preLoaderRoute: typeof secretManagerIntegrationsRailwayConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/authorize'
      path: '/render/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/render/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsRenderAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/create'
      path: '/render/create'
      fullPath: '/projects/secret-management/$projectId/integrations/render/create'
      preLoaderRoute: typeof secretManagerIntegrationsRenderConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/authorize'
      path: '/rundeck/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/rundeck/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsRundeckAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/create'
      path: '/rundeck/create'
      fullPath: '/projects/secret-management/$projectId/integrations/rundeck/create'
      preLoaderRoute: typeof secretManagerIntegrationsRundeckConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/authorize'
      path: '/supabase/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/supabase/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsSupabaseAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/create'
      path: '/supabase/create'
      fullPath: '/projects/secret-management/$projectId/integrations/supabase/create'
      preLoaderRoute: typeof secretManagerIntegrationsSupabaseConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/authorize'
      path: '/teamcity/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/teamcity/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsTeamcityAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/create'
      path: '/teamcity/create'
      fullPath: '/projects/secret-management/$projectId/integrations/teamcity/create'
      preLoaderRoute: typeof secretManagerIntegrationsTeamcityConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/authorize'
      path: '/terraform-cloud/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/terraform-cloud/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsTerraformCloudAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/create'
      path: '/terraform-cloud/create'
      fullPath: '/projects/secret-management/$projectId/integrations/terraform-cloud/create'
      preLoaderRoute: typeof secretManagerIntegrationsTerraformCloudConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/authorize'
      path: '/travisci/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/travisci/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsTravisCIAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/create'
      path: '/travisci/create'
      fullPath: '/projects/secret-management/$projectId/integrations/travisci/create'
      preLoaderRoute: typeof secretManagerIntegrationsTravisCIConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/create'
      path: '/vercel/create'
      fullPath: '/projects/secret-management/$projectId/integrations/vercel/create'
      preLoaderRoute: typeof secretManagerIntegrationsVercelConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/authorize': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/authorize'
      path: '/windmill/authorize'
      fullPath: '/projects/secret-management/$projectId/integrations/windmill/authorize'
      preLoaderRoute: typeof secretManagerIntegrationsWindmillAuthorizePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/create': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/create'
      path: '/windmill/create'
      fullPath: '/projects/secret-management/$projectId/integrations/windmill/create'
      preLoaderRoute: typeof secretManagerIntegrationsWindmillConfigurePageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/$type/$dataSourceId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/$type/$dataSourceId'
      path: '/$type/$dataSourceId'
      fullPath: '/projects/secret-scanning/$projectId/data-sources/$type/$dataSourceId'
      preLoaderRoute: typeof secretScanningSecretScanningDataSourceByIdPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId'
      path: '/commits/$environment/$folderId'
      fullPath: '/projects/secret-management/$projectId/commits/$environment/$folderId'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdImport
      parentRoute: typeof secretManagerLayoutImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/'
      path: '/'
      fullPath: '/projects/secret-management/$projectId/commits/$environment/$folderId/'
      preLoaderRoute: typeof secretManagerCommitsPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/oauth2/callback'
      path: '/azure-app-configuration/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/azure-app-configuration/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/oauth2/callback'
      path: '/azure-key-vault/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/azure-key-vault/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/oauth2/callback'
      path: '/bitbucket/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/bitbucket/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsBitbucketOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/oauth2/callback'
      path: '/gcp-secret-manager/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/gcp-secret-manager/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/oauth2/callback'
      path: '/github/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/github/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsGithubOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/oauth2/callback'
      path: '/gitlab/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/gitlab/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsGitlabOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/oauth2/callback'
      path: '/heroku/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/heroku/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsHerokuOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/oauth2/callback'
      path: '/netlify/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/netlify/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsNetlifyOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/secret-syncs/$destination/$syncId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/secret-syncs/$destination/$syncId'
      path: '/secret-syncs/$destination/$syncId'
      fullPath: '/projects/secret-management/$projectId/integrations/secret-syncs/$destination/$syncId'
      preLoaderRoute: typeof secretManagerSecretSyncDetailsByIDPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/oauth2/callback': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/oauth2/callback'
      path: '/vercel/oauth2/callback'
      fullPath: '/projects/secret-management/$projectId/integrations/vercel/oauth2/callback'
      preLoaderRoute: typeof secretManagerIntegrationsVercelOauthCallbackPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId'
      path: '/$commitId'
      fullPath: '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/'
      path: '/'
      fullPath: '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId/'
      preLoaderRoute: typeof secretManagerCommitDetailsPageRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdImport
    }
    '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/restore': {
      id: '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/restore'
      path: '/restore'
      fullPath: '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId/restore'
      preLoaderRoute: typeof secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdImport
    }
  }
}

// Create and export the route tree

interface AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteChildren {
  secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectRoute: typeof secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectRoute
  secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectRoute: typeof secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectRoute
  secretManagerIntegrationsRouteBitbucketOauthRedirectRoute: typeof secretManagerIntegrationsRouteBitbucketOauthRedirectRoute
  secretManagerIntegrationsRouteGcpOauthRedirectRoute: typeof secretManagerIntegrationsRouteGcpOauthRedirectRoute
  secretManagerIntegrationsRouteGithubOauthRedirectRoute: typeof secretManagerIntegrationsRouteGithubOauthRedirectRoute
  secretManagerIntegrationsRouteGitlabOauthRedirectRoute: typeof secretManagerIntegrationsRouteGitlabOauthRedirectRoute
  secretManagerIntegrationsRouteHerokuOauthRedirectRoute: typeof secretManagerIntegrationsRouteHerokuOauthRedirectRoute
  secretManagerIntegrationsRouteNetlifyOauthRedirectRoute: typeof secretManagerIntegrationsRouteNetlifyOauthRedirectRoute
  secretManagerIntegrationsRouteVercelOauthRedirectRoute: typeof secretManagerIntegrationsRouteVercelOauthRedirectRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteChildren =
  {
    secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectRoute:
      secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectRoute,
    secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectRoute:
      secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectRoute,
    secretManagerIntegrationsRouteBitbucketOauthRedirectRoute:
      secretManagerIntegrationsRouteBitbucketOauthRedirectRoute,
    secretManagerIntegrationsRouteGcpOauthRedirectRoute:
      secretManagerIntegrationsRouteGcpOauthRedirectRoute,
    secretManagerIntegrationsRouteGithubOauthRedirectRoute:
      secretManagerIntegrationsRouteGithubOauthRedirectRoute,
    secretManagerIntegrationsRouteGitlabOauthRedirectRoute:
      secretManagerIntegrationsRouteGitlabOauthRedirectRoute,
    secretManagerIntegrationsRouteHerokuOauthRedirectRoute:
      secretManagerIntegrationsRouteHerokuOauthRedirectRoute,
    secretManagerIntegrationsRouteNetlifyOauthRedirectRoute:
      secretManagerIntegrationsRouteNetlifyOauthRedirectRoute,
    secretManagerIntegrationsRouteVercelOauthRedirectRoute:
      secretManagerIntegrationsRouteVercelOauthRedirectRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteChildren {
  organizationAppConnectionsAppConnectionsPageRouteRoute: typeof organizationAppConnectionsAppConnectionsPageRouteRoute
  organizationAppConnectionsOauthCallbackPageRouteRoute: typeof organizationAppConnectionsOauthCallbackPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteChildren =
  {
    organizationAppConnectionsAppConnectionsPageRouteRoute:
      organizationAppConnectionsAppConnectionsPageRouteRoute,
    organizationAppConnectionsOauthCallbackPageRouteRoute:
      organizationAppConnectionsOauthCallbackPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteChildren {
  organizationGatewaysGatewayListPageRouteRoute: typeof organizationGatewaysGatewayListPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteChildren =
  {
    organizationGatewaysGatewayListPageRouteRoute:
      organizationGatewaysGatewayListPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteChildren {
  organizationSecretSharingPageRouteRoute: typeof organizationSecretSharingPageRouteRoute
  organizationSecretSharingSettingsPageRouteRoute: typeof organizationSecretSharingSettingsPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteChildren =
  {
    organizationSecretSharingPageRouteRoute:
      organizationSecretSharingPageRouteRoute,
    organizationSecretSharingSettingsPageRouteRoute:
      organizationSecretSharingSettingsPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteChildren {
  organizationSettingsPageRouteRoute: typeof organizationSettingsPageRouteRoute
  organizationSettingsPageOauthCallbackPageRouteRoute: typeof organizationSettingsPageOauthCallbackPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteChildren =
  {
    organizationSettingsPageRouteRoute: organizationSettingsPageRouteRoute,
    organizationSettingsPageOauthCallbackPageRouteRoute:
      organizationSettingsPageOauthCallbackPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteChildren {
  organizationAccessManagementPageRouteRoute: typeof organizationAccessManagementPageRouteRoute
  organizationAdminPageRouteRoute: typeof organizationAdminPageRouteRoute
  organizationAuditLogsPageRouteRoute: typeof organizationAuditLogsPageRouteRoute
  organizationBillingPageRouteRoute: typeof organizationBillingPageRouteRoute
  organizationProjectsPageRouteRoute: typeof organizationProjectsPageRouteRoute
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteWithChildren
  organizationGroupDetailsByIDPageRouteRoute: typeof organizationGroupDetailsByIDPageRouteRoute
  organizationIdentityDetailsByIDPageRouteRoute: typeof organizationIdentityDetailsByIDPageRouteRoute
  organizationUserDetailsByIDPageRouteRoute: typeof organizationUserDetailsByIDPageRouteRoute
  organizationRoleByIDPageRouteRoute: typeof organizationRoleByIDPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteChildren =
  {
    organizationAccessManagementPageRouteRoute:
      organizationAccessManagementPageRouteRoute,
    organizationAdminPageRouteRoute: organizationAdminPageRouteRoute,
    organizationAuditLogsPageRouteRoute: organizationAuditLogsPageRouteRoute,
    organizationBillingPageRouteRoute: organizationBillingPageRouteRoute,
    organizationProjectsPageRouteRoute: organizationProjectsPageRouteRoute,
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRoute:
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteWithChildren,
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRoute:
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteWithChildren,
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRoute:
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteWithChildren,
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRoute:
      AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteWithChildren,
    organizationGroupDetailsByIDPageRouteRoute:
      organizationGroupDetailsByIDPageRouteRoute,
    organizationIdentityDetailsByIDPageRouteRoute:
      organizationIdentityDetailsByIDPageRouteRoute,
    organizationUserDetailsByIDPageRouteRoute:
      organizationUserDetailsByIDPageRouteRoute,
    organizationRoleByIDPageRouteRoute: organizationRoleByIDPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteChildren {
  secretManagerRedirectsRedirectApprovalPageRoute: typeof secretManagerRedirectsRedirectApprovalPageRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteChildren =
  {
    secretManagerRedirectsRedirectApprovalPageRoute:
      secretManagerRedirectsRedirectApprovalPageRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteChildren {
  certManagerPkiTemplateListPageRouteRoute: typeof certManagerPkiTemplateListPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteChildren =
  {
    certManagerPkiTemplateListPageRouteRoute:
      certManagerPkiTemplateListPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteChildren {
  certManagerPkiSubscribersPageRouteRoute: typeof certManagerPkiSubscribersPageRouteRoute
  certManagerPkiSubscriberDetailsByIDPageRouteRoute: typeof certManagerPkiSubscriberDetailsByIDPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteChildren =
  {
    certManagerPkiSubscribersPageRouteRoute:
      certManagerPkiSubscribersPageRouteRoute,
    certManagerPkiSubscriberDetailsByIDPageRouteRoute:
      certManagerPkiSubscriberDetailsByIDPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteChildren,
  )

interface certManagerLayoutRouteChildren {
  certManagerAlertingPageRouteRoute: typeof certManagerAlertingPageRouteRoute
  certManagerCertificateAuthoritiesPageRouteRoute: typeof certManagerCertificateAuthoritiesPageRouteRoute
  certManagerCertificatesPageRouteRoute: typeof certManagerCertificatesPageRouteRoute
  certManagerSettingsPageRouteRoute: typeof certManagerSettingsPageRouteRoute
  projectAccessControlPageRouteCertManagerRoute: typeof projectAccessControlPageRouteCertManagerRoute
  projectAuditLogsPageRouteCertManagerRoute: typeof projectAuditLogsPageRouteCertManagerRoute
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteWithChildren
  certManagerCertAuthDetailsByIDPageRouteRoute: typeof certManagerCertAuthDetailsByIDPageRouteRoute
  projectGroupDetailsByIDPageRouteCertManagerRoute: typeof projectGroupDetailsByIDPageRouteCertManagerRoute
  projectIdentityDetailsByIDPageRouteCertManagerRoute: typeof projectIdentityDetailsByIDPageRouteCertManagerRoute
  projectMemberDetailsByIDPageRouteCertManagerRoute: typeof projectMemberDetailsByIDPageRouteCertManagerRoute
  certManagerPkiCollectionDetailsByIDPageRoutesRoute: typeof certManagerPkiCollectionDetailsByIDPageRoutesRoute
  projectRoleDetailsBySlugPageRouteCertManagerRoute: typeof projectRoleDetailsBySlugPageRouteCertManagerRoute
}

const certManagerLayoutRouteChildren: certManagerLayoutRouteChildren = {
  certManagerAlertingPageRouteRoute: certManagerAlertingPageRouteRoute,
  certManagerCertificateAuthoritiesPageRouteRoute:
    certManagerCertificateAuthoritiesPageRouteRoute,
  certManagerCertificatesPageRouteRoute: certManagerCertificatesPageRouteRoute,
  certManagerSettingsPageRouteRoute: certManagerSettingsPageRouteRoute,
  projectAccessControlPageRouteCertManagerRoute:
    projectAccessControlPageRouteCertManagerRoute,
  projectAuditLogsPageRouteCertManagerRoute:
    projectAuditLogsPageRouteCertManagerRoute,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteWithChildren,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteWithChildren,
  certManagerCertAuthDetailsByIDPageRouteRoute:
    certManagerCertAuthDetailsByIDPageRouteRoute,
  projectGroupDetailsByIDPageRouteCertManagerRoute:
    projectGroupDetailsByIDPageRouteCertManagerRoute,
  projectIdentityDetailsByIDPageRouteCertManagerRoute:
    projectIdentityDetailsByIDPageRouteCertManagerRoute,
  projectMemberDetailsByIDPageRouteCertManagerRoute:
    projectMemberDetailsByIDPageRouteCertManagerRoute,
  certManagerPkiCollectionDetailsByIDPageRoutesRoute:
    certManagerPkiCollectionDetailsByIDPageRoutesRoute,
  projectRoleDetailsBySlugPageRouteCertManagerRoute:
    projectRoleDetailsBySlugPageRouteCertManagerRoute,
}

const certManagerLayoutRouteWithChildren =
  certManagerLayoutRoute._addFileChildren(certManagerLayoutRouteChildren)

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRouteChildren {
  certManagerLayoutRoute: typeof certManagerLayoutRouteWithChildren
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRouteChildren =
  {
    certManagerLayoutRoute: certManagerLayoutRouteWithChildren,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRouteChildren,
  )

interface kmsLayoutRouteChildren {
  kmsKmipPageRouteRoute: typeof kmsKmipPageRouteRoute
  kmsOverviewPageRouteRoute: typeof kmsOverviewPageRouteRoute
  kmsSettingsPageRouteRoute: typeof kmsSettingsPageRouteRoute
  projectAccessControlPageRouteKmsRoute: typeof projectAccessControlPageRouteKmsRoute
  projectAuditLogsPageRouteKmsRoute: typeof projectAuditLogsPageRouteKmsRoute
  projectGroupDetailsByIDPageRouteKmsRoute: typeof projectGroupDetailsByIDPageRouteKmsRoute
  projectIdentityDetailsByIDPageRouteKmsRoute: typeof projectIdentityDetailsByIDPageRouteKmsRoute
  projectMemberDetailsByIDPageRouteKmsRoute: typeof projectMemberDetailsByIDPageRouteKmsRoute
  projectRoleDetailsBySlugPageRouteKmsRoute: typeof projectRoleDetailsBySlugPageRouteKmsRoute
}

const kmsLayoutRouteChildren: kmsLayoutRouteChildren = {
  kmsKmipPageRouteRoute: kmsKmipPageRouteRoute,
  kmsOverviewPageRouteRoute: kmsOverviewPageRouteRoute,
  kmsSettingsPageRouteRoute: kmsSettingsPageRouteRoute,
  projectAccessControlPageRouteKmsRoute: projectAccessControlPageRouteKmsRoute,
  projectAuditLogsPageRouteKmsRoute: projectAuditLogsPageRouteKmsRoute,
  projectGroupDetailsByIDPageRouteKmsRoute:
    projectGroupDetailsByIDPageRouteKmsRoute,
  projectIdentityDetailsByIDPageRouteKmsRoute:
    projectIdentityDetailsByIDPageRouteKmsRoute,
  projectMemberDetailsByIDPageRouteKmsRoute:
    projectMemberDetailsByIDPageRouteKmsRoute,
  projectRoleDetailsBySlugPageRouteKmsRoute:
    projectRoleDetailsBySlugPageRouteKmsRoute,
}

const kmsLayoutRouteWithChildren = kmsLayoutRoute._addFileChildren(
  kmsLayoutRouteChildren,
)

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRouteChildren {
  kmsLayoutRoute: typeof kmsLayoutRouteWithChildren
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRouteChildren =
  {
    kmsLayoutRoute: kmsLayoutRouteWithChildren,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteChildren {
  secretManagerIntegrationsListPageRouteRoute: typeof secretManagerIntegrationsListPageRouteRoute
  secretManagerIntegrationsDetailsByIDPageRouteRoute: typeof secretManagerIntegrationsDetailsByIDPageRouteRoute
  secretManagerIntegrationsSelectIntegrationAuthPageRouteRoute: typeof secretManagerIntegrationsSelectIntegrationAuthPageRouteRoute
  secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteRoute: typeof secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteRoute
  secretManagerIntegrationsAwsParameterStoreConfigurePageRouteRoute: typeof secretManagerIntegrationsAwsParameterStoreConfigurePageRouteRoute
  secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteRoute: typeof secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteRoute
  secretManagerIntegrationsAwsSecretManagerConfigurePageRouteRoute: typeof secretManagerIntegrationsAwsSecretManagerConfigurePageRouteRoute
  secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteRoute: typeof secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteRoute
  secretManagerIntegrationsAzureDevopsAuthorizePageRouteRoute: typeof secretManagerIntegrationsAzureDevopsAuthorizePageRouteRoute
  secretManagerIntegrationsAzureDevopsConfigurePageRouteRoute: typeof secretManagerIntegrationsAzureDevopsConfigurePageRouteRoute
  secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteRoute: typeof secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteRoute
  secretManagerIntegrationsAzureKeyVaultConfigurePageRouteRoute: typeof secretManagerIntegrationsAzureKeyVaultConfigurePageRouteRoute
  secretManagerIntegrationsBitbucketConfigurePageRouteRoute: typeof secretManagerIntegrationsBitbucketConfigurePageRouteRoute
  secretManagerIntegrationsChecklyAuthorizePageRouteRoute: typeof secretManagerIntegrationsChecklyAuthorizePageRouteRoute
  secretManagerIntegrationsChecklyConfigurePageRouteRoute: typeof secretManagerIntegrationsChecklyConfigurePageRouteRoute
  secretManagerIntegrationsCircleCIAuthorizePageRouteRoute: typeof secretManagerIntegrationsCircleCIAuthorizePageRouteRoute
  secretManagerIntegrationsCircleCIConfigurePageRouteRoute: typeof secretManagerIntegrationsCircleCIConfigurePageRouteRoute
  secretManagerIntegrationsCloud66AuthorizePageRouteRoute: typeof secretManagerIntegrationsCloud66AuthorizePageRouteRoute
  secretManagerIntegrationsCloud66ConfigurePageRouteRoute: typeof secretManagerIntegrationsCloud66ConfigurePageRouteRoute
  secretManagerIntegrationsCloudflarePagesAuthorizePageRouteRoute: typeof secretManagerIntegrationsCloudflarePagesAuthorizePageRouteRoute
  secretManagerIntegrationsCloudflarePagesConfigurePageRouteRoute: typeof secretManagerIntegrationsCloudflarePagesConfigurePageRouteRoute
  secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteRoute: typeof secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteRoute
  secretManagerIntegrationsCloudflareWorkersConfigurePageRouteRoute: typeof secretManagerIntegrationsCloudflareWorkersConfigurePageRouteRoute
  secretManagerIntegrationsCodefreshAuthorizePageRouteRoute: typeof secretManagerIntegrationsCodefreshAuthorizePageRouteRoute
  secretManagerIntegrationsCodefreshConfigurePageRouteRoute: typeof secretManagerIntegrationsCodefreshConfigurePageRouteRoute
  secretManagerIntegrationsDatabricksAuthorizePageRouteRoute: typeof secretManagerIntegrationsDatabricksAuthorizePageRouteRoute
  secretManagerIntegrationsDatabricksConfigurePageRouteRoute: typeof secretManagerIntegrationsDatabricksConfigurePageRouteRoute
  secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteRoute: typeof secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteRoute
  secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteRoute: typeof secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteRoute
  secretManagerIntegrationsFlyioAuthorizePageRouteRoute: typeof secretManagerIntegrationsFlyioAuthorizePageRouteRoute
  secretManagerIntegrationsFlyioConfigurePageRouteRoute: typeof secretManagerIntegrationsFlyioConfigurePageRouteRoute
  secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteRoute: typeof secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteRoute
  secretManagerIntegrationsGcpSecretManagerConfigurePageRouteRoute: typeof secretManagerIntegrationsGcpSecretManagerConfigurePageRouteRoute
  secretManagerIntegrationsGithubAuthorizePageRouteRoute: typeof secretManagerIntegrationsGithubAuthorizePageRouteRoute
  secretManagerIntegrationsGithubConfigurePageRouteRoute: typeof secretManagerIntegrationsGithubConfigurePageRouteRoute
  secretManagerIntegrationsGitlabAuthorizePageRouteRoute: typeof secretManagerIntegrationsGitlabAuthorizePageRouteRoute
  secretManagerIntegrationsGitlabConfigurePageRouteRoute: typeof secretManagerIntegrationsGitlabConfigurePageRouteRoute
  secretManagerIntegrationsHashicorpVaultAuthorizePageRouteRoute: typeof secretManagerIntegrationsHashicorpVaultAuthorizePageRouteRoute
  secretManagerIntegrationsHashicorpVaultConfigurePageRouteRoute: typeof secretManagerIntegrationsHashicorpVaultConfigurePageRouteRoute
  secretManagerIntegrationsHasuraCloudAuthorizePageRouteRoute: typeof secretManagerIntegrationsHasuraCloudAuthorizePageRouteRoute
  secretManagerIntegrationsHasuraCloudConfigurePageRouteRoute: typeof secretManagerIntegrationsHasuraCloudConfigurePageRouteRoute
  secretManagerIntegrationsHerokuConfigurePageRouteRoute: typeof secretManagerIntegrationsHerokuConfigurePageRouteRoute
  secretManagerIntegrationsLaravelForgeAuthorizePageRouteRoute: typeof secretManagerIntegrationsLaravelForgeAuthorizePageRouteRoute
  secretManagerIntegrationsLaravelForgeConfigurePageRouteRoute: typeof secretManagerIntegrationsLaravelForgeConfigurePageRouteRoute
  secretManagerIntegrationsNetlifyConfigurePageRouteRoute: typeof secretManagerIntegrationsNetlifyConfigurePageRouteRoute
  secretManagerIntegrationsNorthflankAuthorizePageRouteRoute: typeof secretManagerIntegrationsNorthflankAuthorizePageRouteRoute
  secretManagerIntegrationsNorthflankConfigurePageRouteRoute: typeof secretManagerIntegrationsNorthflankConfigurePageRouteRoute
  secretManagerIntegrationsOctopusDeployAuthorizePageRouteRoute: typeof secretManagerIntegrationsOctopusDeployAuthorizePageRouteRoute
  secretManagerIntegrationsOctopusDeployConfigurePageRouteRoute: typeof secretManagerIntegrationsOctopusDeployConfigurePageRouteRoute
  secretManagerIntegrationsQoveryAuthorizePageRouteRoute: typeof secretManagerIntegrationsQoveryAuthorizePageRouteRoute
  secretManagerIntegrationsQoveryConfigurePageRouteRoute: typeof secretManagerIntegrationsQoveryConfigurePageRouteRoute
  secretManagerIntegrationsRailwayAuthorizePageRouteRoute: typeof secretManagerIntegrationsRailwayAuthorizePageRouteRoute
  secretManagerIntegrationsRailwayConfigurePageRouteRoute: typeof secretManagerIntegrationsRailwayConfigurePageRouteRoute
  secretManagerIntegrationsRenderAuthorizePageRouteRoute: typeof secretManagerIntegrationsRenderAuthorizePageRouteRoute
  secretManagerIntegrationsRenderConfigurePageRouteRoute: typeof secretManagerIntegrationsRenderConfigurePageRouteRoute
  secretManagerIntegrationsRundeckAuthorizePageRouteRoute: typeof secretManagerIntegrationsRundeckAuthorizePageRouteRoute
  secretManagerIntegrationsRundeckConfigurePageRouteRoute: typeof secretManagerIntegrationsRundeckConfigurePageRouteRoute
  secretManagerIntegrationsSupabaseAuthorizePageRouteRoute: typeof secretManagerIntegrationsSupabaseAuthorizePageRouteRoute
  secretManagerIntegrationsSupabaseConfigurePageRouteRoute: typeof secretManagerIntegrationsSupabaseConfigurePageRouteRoute
  secretManagerIntegrationsTeamcityAuthorizePageRouteRoute: typeof secretManagerIntegrationsTeamcityAuthorizePageRouteRoute
  secretManagerIntegrationsTeamcityConfigurePageRouteRoute: typeof secretManagerIntegrationsTeamcityConfigurePageRouteRoute
  secretManagerIntegrationsTerraformCloudAuthorizePageRouteRoute: typeof secretManagerIntegrationsTerraformCloudAuthorizePageRouteRoute
  secretManagerIntegrationsTerraformCloudConfigurePageRouteRoute: typeof secretManagerIntegrationsTerraformCloudConfigurePageRouteRoute
  secretManagerIntegrationsTravisCIAuthorizePageRouteRoute: typeof secretManagerIntegrationsTravisCIAuthorizePageRouteRoute
  secretManagerIntegrationsTravisCIConfigurePageRouteRoute: typeof secretManagerIntegrationsTravisCIConfigurePageRouteRoute
  secretManagerIntegrationsVercelConfigurePageRouteRoute: typeof secretManagerIntegrationsVercelConfigurePageRouteRoute
  secretManagerIntegrationsWindmillAuthorizePageRouteRoute: typeof secretManagerIntegrationsWindmillAuthorizePageRouteRoute
  secretManagerIntegrationsWindmillConfigurePageRouteRoute: typeof secretManagerIntegrationsWindmillConfigurePageRouteRoute
  secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteRoute
  secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteRoute
  secretManagerIntegrationsBitbucketOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsBitbucketOauthCallbackPageRouteRoute
  secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteRoute
  secretManagerIntegrationsGithubOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsGithubOauthCallbackPageRouteRoute
  secretManagerIntegrationsGitlabOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsGitlabOauthCallbackPageRouteRoute
  secretManagerIntegrationsHerokuOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsHerokuOauthCallbackPageRouteRoute
  secretManagerIntegrationsNetlifyOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsNetlifyOauthCallbackPageRouteRoute
  secretManagerSecretSyncDetailsByIDPageRouteRoute: typeof secretManagerSecretSyncDetailsByIDPageRouteRoute
  secretManagerIntegrationsVercelOauthCallbackPageRouteRoute: typeof secretManagerIntegrationsVercelOauthCallbackPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteChildren =
  {
    secretManagerIntegrationsListPageRouteRoute:
      secretManagerIntegrationsListPageRouteRoute,
    secretManagerIntegrationsDetailsByIDPageRouteRoute:
      secretManagerIntegrationsDetailsByIDPageRouteRoute,
    secretManagerIntegrationsSelectIntegrationAuthPageRouteRoute:
      secretManagerIntegrationsSelectIntegrationAuthPageRouteRoute,
    secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteRoute:
      secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteRoute,
    secretManagerIntegrationsAwsParameterStoreConfigurePageRouteRoute:
      secretManagerIntegrationsAwsParameterStoreConfigurePageRouteRoute,
    secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteRoute:
      secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteRoute,
    secretManagerIntegrationsAwsSecretManagerConfigurePageRouteRoute:
      secretManagerIntegrationsAwsSecretManagerConfigurePageRouteRoute,
    secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteRoute:
      secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteRoute,
    secretManagerIntegrationsAzureDevopsAuthorizePageRouteRoute:
      secretManagerIntegrationsAzureDevopsAuthorizePageRouteRoute,
    secretManagerIntegrationsAzureDevopsConfigurePageRouteRoute:
      secretManagerIntegrationsAzureDevopsConfigurePageRouteRoute,
    secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteRoute:
      secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteRoute,
    secretManagerIntegrationsAzureKeyVaultConfigurePageRouteRoute:
      secretManagerIntegrationsAzureKeyVaultConfigurePageRouteRoute,
    secretManagerIntegrationsBitbucketConfigurePageRouteRoute:
      secretManagerIntegrationsBitbucketConfigurePageRouteRoute,
    secretManagerIntegrationsChecklyAuthorizePageRouteRoute:
      secretManagerIntegrationsChecklyAuthorizePageRouteRoute,
    secretManagerIntegrationsChecklyConfigurePageRouteRoute:
      secretManagerIntegrationsChecklyConfigurePageRouteRoute,
    secretManagerIntegrationsCircleCIAuthorizePageRouteRoute:
      secretManagerIntegrationsCircleCIAuthorizePageRouteRoute,
    secretManagerIntegrationsCircleCIConfigurePageRouteRoute:
      secretManagerIntegrationsCircleCIConfigurePageRouteRoute,
    secretManagerIntegrationsCloud66AuthorizePageRouteRoute:
      secretManagerIntegrationsCloud66AuthorizePageRouteRoute,
    secretManagerIntegrationsCloud66ConfigurePageRouteRoute:
      secretManagerIntegrationsCloud66ConfigurePageRouteRoute,
    secretManagerIntegrationsCloudflarePagesAuthorizePageRouteRoute:
      secretManagerIntegrationsCloudflarePagesAuthorizePageRouteRoute,
    secretManagerIntegrationsCloudflarePagesConfigurePageRouteRoute:
      secretManagerIntegrationsCloudflarePagesConfigurePageRouteRoute,
    secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteRoute:
      secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteRoute,
    secretManagerIntegrationsCloudflareWorkersConfigurePageRouteRoute:
      secretManagerIntegrationsCloudflareWorkersConfigurePageRouteRoute,
    secretManagerIntegrationsCodefreshAuthorizePageRouteRoute:
      secretManagerIntegrationsCodefreshAuthorizePageRouteRoute,
    secretManagerIntegrationsCodefreshConfigurePageRouteRoute:
      secretManagerIntegrationsCodefreshConfigurePageRouteRoute,
    secretManagerIntegrationsDatabricksAuthorizePageRouteRoute:
      secretManagerIntegrationsDatabricksAuthorizePageRouteRoute,
    secretManagerIntegrationsDatabricksConfigurePageRouteRoute:
      secretManagerIntegrationsDatabricksConfigurePageRouteRoute,
    secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteRoute:
      secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteRoute,
    secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteRoute:
      secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteRoute,
    secretManagerIntegrationsFlyioAuthorizePageRouteRoute:
      secretManagerIntegrationsFlyioAuthorizePageRouteRoute,
    secretManagerIntegrationsFlyioConfigurePageRouteRoute:
      secretManagerIntegrationsFlyioConfigurePageRouteRoute,
    secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteRoute:
      secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteRoute,
    secretManagerIntegrationsGcpSecretManagerConfigurePageRouteRoute:
      secretManagerIntegrationsGcpSecretManagerConfigurePageRouteRoute,
    secretManagerIntegrationsGithubAuthorizePageRouteRoute:
      secretManagerIntegrationsGithubAuthorizePageRouteRoute,
    secretManagerIntegrationsGithubConfigurePageRouteRoute:
      secretManagerIntegrationsGithubConfigurePageRouteRoute,
    secretManagerIntegrationsGitlabAuthorizePageRouteRoute:
      secretManagerIntegrationsGitlabAuthorizePageRouteRoute,
    secretManagerIntegrationsGitlabConfigurePageRouteRoute:
      secretManagerIntegrationsGitlabConfigurePageRouteRoute,
    secretManagerIntegrationsHashicorpVaultAuthorizePageRouteRoute:
      secretManagerIntegrationsHashicorpVaultAuthorizePageRouteRoute,
    secretManagerIntegrationsHashicorpVaultConfigurePageRouteRoute:
      secretManagerIntegrationsHashicorpVaultConfigurePageRouteRoute,
    secretManagerIntegrationsHasuraCloudAuthorizePageRouteRoute:
      secretManagerIntegrationsHasuraCloudAuthorizePageRouteRoute,
    secretManagerIntegrationsHasuraCloudConfigurePageRouteRoute:
      secretManagerIntegrationsHasuraCloudConfigurePageRouteRoute,
    secretManagerIntegrationsHerokuConfigurePageRouteRoute:
      secretManagerIntegrationsHerokuConfigurePageRouteRoute,
    secretManagerIntegrationsLaravelForgeAuthorizePageRouteRoute:
      secretManagerIntegrationsLaravelForgeAuthorizePageRouteRoute,
    secretManagerIntegrationsLaravelForgeConfigurePageRouteRoute:
      secretManagerIntegrationsLaravelForgeConfigurePageRouteRoute,
    secretManagerIntegrationsNetlifyConfigurePageRouteRoute:
      secretManagerIntegrationsNetlifyConfigurePageRouteRoute,
    secretManagerIntegrationsNorthflankAuthorizePageRouteRoute:
      secretManagerIntegrationsNorthflankAuthorizePageRouteRoute,
    secretManagerIntegrationsNorthflankConfigurePageRouteRoute:
      secretManagerIntegrationsNorthflankConfigurePageRouteRoute,
    secretManagerIntegrationsOctopusDeployAuthorizePageRouteRoute:
      secretManagerIntegrationsOctopusDeployAuthorizePageRouteRoute,
    secretManagerIntegrationsOctopusDeployConfigurePageRouteRoute:
      secretManagerIntegrationsOctopusDeployConfigurePageRouteRoute,
    secretManagerIntegrationsQoveryAuthorizePageRouteRoute:
      secretManagerIntegrationsQoveryAuthorizePageRouteRoute,
    secretManagerIntegrationsQoveryConfigurePageRouteRoute:
      secretManagerIntegrationsQoveryConfigurePageRouteRoute,
    secretManagerIntegrationsRailwayAuthorizePageRouteRoute:
      secretManagerIntegrationsRailwayAuthorizePageRouteRoute,
    secretManagerIntegrationsRailwayConfigurePageRouteRoute:
      secretManagerIntegrationsRailwayConfigurePageRouteRoute,
    secretManagerIntegrationsRenderAuthorizePageRouteRoute:
      secretManagerIntegrationsRenderAuthorizePageRouteRoute,
    secretManagerIntegrationsRenderConfigurePageRouteRoute:
      secretManagerIntegrationsRenderConfigurePageRouteRoute,
    secretManagerIntegrationsRundeckAuthorizePageRouteRoute:
      secretManagerIntegrationsRundeckAuthorizePageRouteRoute,
    secretManagerIntegrationsRundeckConfigurePageRouteRoute:
      secretManagerIntegrationsRundeckConfigurePageRouteRoute,
    secretManagerIntegrationsSupabaseAuthorizePageRouteRoute:
      secretManagerIntegrationsSupabaseAuthorizePageRouteRoute,
    secretManagerIntegrationsSupabaseConfigurePageRouteRoute:
      secretManagerIntegrationsSupabaseConfigurePageRouteRoute,
    secretManagerIntegrationsTeamcityAuthorizePageRouteRoute:
      secretManagerIntegrationsTeamcityAuthorizePageRouteRoute,
    secretManagerIntegrationsTeamcityConfigurePageRouteRoute:
      secretManagerIntegrationsTeamcityConfigurePageRouteRoute,
    secretManagerIntegrationsTerraformCloudAuthorizePageRouteRoute:
      secretManagerIntegrationsTerraformCloudAuthorizePageRouteRoute,
    secretManagerIntegrationsTerraformCloudConfigurePageRouteRoute:
      secretManagerIntegrationsTerraformCloudConfigurePageRouteRoute,
    secretManagerIntegrationsTravisCIAuthorizePageRouteRoute:
      secretManagerIntegrationsTravisCIAuthorizePageRouteRoute,
    secretManagerIntegrationsTravisCIConfigurePageRouteRoute:
      secretManagerIntegrationsTravisCIConfigurePageRouteRoute,
    secretManagerIntegrationsVercelConfigurePageRouteRoute:
      secretManagerIntegrationsVercelConfigurePageRouteRoute,
    secretManagerIntegrationsWindmillAuthorizePageRouteRoute:
      secretManagerIntegrationsWindmillAuthorizePageRouteRoute,
    secretManagerIntegrationsWindmillConfigurePageRouteRoute:
      secretManagerIntegrationsWindmillConfigurePageRouteRoute,
    secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteRoute:
      secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteRoute,
    secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteRoute:
      secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteRoute,
    secretManagerIntegrationsBitbucketOauthCallbackPageRouteRoute:
      secretManagerIntegrationsBitbucketOauthCallbackPageRouteRoute,
    secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteRoute:
      secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteRoute,
    secretManagerIntegrationsGithubOauthCallbackPageRouteRoute:
      secretManagerIntegrationsGithubOauthCallbackPageRouteRoute,
    secretManagerIntegrationsGitlabOauthCallbackPageRouteRoute:
      secretManagerIntegrationsGitlabOauthCallbackPageRouteRoute,
    secretManagerIntegrationsHerokuOauthCallbackPageRouteRoute:
      secretManagerIntegrationsHerokuOauthCallbackPageRouteRoute,
    secretManagerIntegrationsNetlifyOauthCallbackPageRouteRoute:
      secretManagerIntegrationsNetlifyOauthCallbackPageRouteRoute,
    secretManagerSecretSyncDetailsByIDPageRouteRoute:
      secretManagerSecretSyncDetailsByIDPageRouteRoute,
    secretManagerIntegrationsVercelOauthCallbackPageRouteRoute:
      secretManagerIntegrationsVercelOauthCallbackPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteChildren {
  secretManagerCommitDetailsPageRouteRoute: typeof secretManagerCommitDetailsPageRouteRoute
  secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteRoute: typeof secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteChildren =
  {
    secretManagerCommitDetailsPageRouteRoute:
      secretManagerCommitDetailsPageRouteRoute,
    secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteRoute:
      secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteChildren {
  secretManagerCommitsPageRouteRoute: typeof secretManagerCommitsPageRouteRoute
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteWithChildren
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteChildren =
  {
    secretManagerCommitsPageRouteRoute: secretManagerCommitsPageRouteRoute,
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRoute:
      AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteWithChildren,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteChildren,
  )

interface secretManagerLayoutRouteChildren {
  secretManagerIPAllowlistPageRouteRoute: typeof secretManagerIPAllowlistPageRouteRoute
  secretManagerSecretApprovalsPageRouteRoute: typeof secretManagerSecretApprovalsPageRouteRoute
  secretManagerOverviewPageRouteRoute: typeof secretManagerOverviewPageRouteRoute
  secretManagerSecretRotationPageRouteRoute: typeof secretManagerSecretRotationPageRouteRoute
  secretManagerSettingsPageRouteRoute: typeof secretManagerSettingsPageRouteRoute
  projectAccessControlPageRouteSecretManagerRoute: typeof projectAccessControlPageRouteSecretManagerRoute
  projectAuditLogsPageRouteSecretManagerRoute: typeof projectAuditLogsPageRouteSecretManagerRoute
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteWithChildren
  secretManagerSecretDashboardPageRouteRoute: typeof secretManagerSecretDashboardPageRouteRoute
  projectGroupDetailsByIDPageRouteSecretManagerRoute: typeof projectGroupDetailsByIDPageRouteSecretManagerRoute
  projectIdentityDetailsByIDPageRouteSecretManagerRoute: typeof projectIdentityDetailsByIDPageRouteSecretManagerRoute
  projectMemberDetailsByIDPageRouteSecretManagerRoute: typeof projectMemberDetailsByIDPageRouteSecretManagerRoute
  projectRoleDetailsBySlugPageRouteSecretManagerRoute: typeof projectRoleDetailsBySlugPageRouteSecretManagerRoute
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteWithChildren
}

const secretManagerLayoutRouteChildren: secretManagerLayoutRouteChildren = {
  secretManagerIPAllowlistPageRouteRoute:
    secretManagerIPAllowlistPageRouteRoute,
  secretManagerSecretApprovalsPageRouteRoute:
    secretManagerSecretApprovalsPageRouteRoute,
  secretManagerOverviewPageRouteRoute: secretManagerOverviewPageRouteRoute,
  secretManagerSecretRotationPageRouteRoute:
    secretManagerSecretRotationPageRouteRoute,
  secretManagerSettingsPageRouteRoute: secretManagerSettingsPageRouteRoute,
  projectAccessControlPageRouteSecretManagerRoute:
    projectAccessControlPageRouteSecretManagerRoute,
  projectAuditLogsPageRouteSecretManagerRoute:
    projectAuditLogsPageRouteSecretManagerRoute,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteWithChildren,
  secretManagerSecretDashboardPageRouteRoute:
    secretManagerSecretDashboardPageRouteRoute,
  projectGroupDetailsByIDPageRouteSecretManagerRoute:
    projectGroupDetailsByIDPageRouteSecretManagerRoute,
  projectIdentityDetailsByIDPageRouteSecretManagerRoute:
    projectIdentityDetailsByIDPageRouteSecretManagerRoute,
  projectMemberDetailsByIDPageRouteSecretManagerRoute:
    projectMemberDetailsByIDPageRouteSecretManagerRoute,
  projectRoleDetailsBySlugPageRouteSecretManagerRoute:
    projectRoleDetailsBySlugPageRouteSecretManagerRoute,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteWithChildren,
}

const secretManagerLayoutRouteWithChildren =
  secretManagerLayoutRoute._addFileChildren(secretManagerLayoutRouteChildren)

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRouteChildren {
  secretManagerLayoutRoute: typeof secretManagerLayoutRouteWithChildren
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRouteChildren =
  {
    secretManagerLayoutRoute: secretManagerLayoutRouteWithChildren,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRouteChildren,
  )

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteChildren {
  secretScanningSecretScanningDataSourcesPageRouteRoute: typeof secretScanningSecretScanningDataSourcesPageRouteRoute
  secretScanningSecretScanningDataSourceByIdPageRouteRoute: typeof secretScanningSecretScanningDataSourceByIdPageRouteRoute
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteChildren =
  {
    secretScanningSecretScanningDataSourcesPageRouteRoute:
      secretScanningSecretScanningDataSourcesPageRouteRoute,
    secretScanningSecretScanningDataSourceByIdPageRouteRoute:
      secretScanningSecretScanningDataSourceByIdPageRouteRoute,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteChildren,
  )

interface secretScanningLayoutRouteChildren {
  secretScanningSecretScanningFindingsPageRouteRoute: typeof secretScanningSecretScanningFindingsPageRouteRoute
  secretScanningSettingsPageRouteRoute: typeof secretScanningSettingsPageRouteRoute
  projectAccessControlPageRouteSecretScanningRoute: typeof projectAccessControlPageRouteSecretScanningRoute
  projectAuditLogsPageRouteSecretScanningRoute: typeof projectAuditLogsPageRouteSecretScanningRoute
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteWithChildren
  projectGroupDetailsByIDPageRouteSecretScanningRoute: typeof projectGroupDetailsByIDPageRouteSecretScanningRoute
  projectIdentityDetailsByIDPageRouteSecretScanningRoute: typeof projectIdentityDetailsByIDPageRouteSecretScanningRoute
  projectMemberDetailsByIDPageRouteSecretScanningRoute: typeof projectMemberDetailsByIDPageRouteSecretScanningRoute
  projectRoleDetailsBySlugPageRouteSecretScanningRoute: typeof projectRoleDetailsBySlugPageRouteSecretScanningRoute
}

const secretScanningLayoutRouteChildren: secretScanningLayoutRouteChildren = {
  secretScanningSecretScanningFindingsPageRouteRoute:
    secretScanningSecretScanningFindingsPageRouteRoute,
  secretScanningSettingsPageRouteRoute: secretScanningSettingsPageRouteRoute,
  projectAccessControlPageRouteSecretScanningRoute:
    projectAccessControlPageRouteSecretScanningRoute,
  projectAuditLogsPageRouteSecretScanningRoute:
    projectAuditLogsPageRouteSecretScanningRoute,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteWithChildren,
  projectGroupDetailsByIDPageRouteSecretScanningRoute:
    projectGroupDetailsByIDPageRouteSecretScanningRoute,
  projectIdentityDetailsByIDPageRouteSecretScanningRoute:
    projectIdentityDetailsByIDPageRouteSecretScanningRoute,
  projectMemberDetailsByIDPageRouteSecretScanningRoute:
    projectMemberDetailsByIDPageRouteSecretScanningRoute,
  projectRoleDetailsBySlugPageRouteSecretScanningRoute:
    projectRoleDetailsBySlugPageRouteSecretScanningRoute,
}

const secretScanningLayoutRouteWithChildren =
  secretScanningLayoutRoute._addFileChildren(secretScanningLayoutRouteChildren)

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRouteChildren {
  secretScanningLayoutRoute: typeof secretScanningLayoutRouteWithChildren
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRouteChildren =
  {
    secretScanningLayoutRoute: secretScanningLayoutRouteWithChildren,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRouteChildren,
  )

interface sshLayoutRouteChildren {
  sshSshCasPageRouteRoute: typeof sshSshCasPageRouteRoute
  sshSshCertsPageRouteRoute: typeof sshSshCertsPageRouteRoute
  sshSshHostsPageRouteRoute: typeof sshSshHostsPageRouteRoute
  sshSettingsPageRouteRoute: typeof sshSettingsPageRouteRoute
  projectAccessControlPageRouteSshRoute: typeof projectAccessControlPageRouteSshRoute
  projectAuditLogsPageRouteSshRoute: typeof projectAuditLogsPageRouteSshRoute
  sshSshCaByIDPageRouteRoute: typeof sshSshCaByIDPageRouteRoute
  sshSshHostGroupDetailsByIDPageRouteRoute: typeof sshSshHostGroupDetailsByIDPageRouteRoute
  projectGroupDetailsByIDPageRouteSshRoute: typeof projectGroupDetailsByIDPageRouteSshRoute
  projectIdentityDetailsByIDPageRouteSshRoute: typeof projectIdentityDetailsByIDPageRouteSshRoute
  projectMemberDetailsByIDPageRouteSshRoute: typeof projectMemberDetailsByIDPageRouteSshRoute
  projectRoleDetailsBySlugPageRouteSshRoute: typeof projectRoleDetailsBySlugPageRouteSshRoute
}

const sshLayoutRouteChildren: sshLayoutRouteChildren = {
  sshSshCasPageRouteRoute: sshSshCasPageRouteRoute,
  sshSshCertsPageRouteRoute: sshSshCertsPageRouteRoute,
  sshSshHostsPageRouteRoute: sshSshHostsPageRouteRoute,
  sshSettingsPageRouteRoute: sshSettingsPageRouteRoute,
  projectAccessControlPageRouteSshRoute: projectAccessControlPageRouteSshRoute,
  projectAuditLogsPageRouteSshRoute: projectAuditLogsPageRouteSshRoute,
  sshSshCaByIDPageRouteRoute: sshSshCaByIDPageRouteRoute,
  sshSshHostGroupDetailsByIDPageRouteRoute:
    sshSshHostGroupDetailsByIDPageRouteRoute,
  projectGroupDetailsByIDPageRouteSshRoute:
    projectGroupDetailsByIDPageRouteSshRoute,
  projectIdentityDetailsByIDPageRouteSshRoute:
    projectIdentityDetailsByIDPageRouteSshRoute,
  projectMemberDetailsByIDPageRouteSshRoute:
    projectMemberDetailsByIDPageRouteSshRoute,
  projectRoleDetailsBySlugPageRouteSshRoute:
    projectRoleDetailsBySlugPageRouteSshRoute,
}

const sshLayoutRouteWithChildren = sshLayoutRoute._addFileChildren(
  sshLayoutRouteChildren,
)

interface AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRouteChildren {
  sshLayoutRoute: typeof sshLayoutRouteWithChildren
}

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRouteChildren: AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRouteChildren =
  {
    sshLayoutRoute: sshLayoutRouteWithChildren,
  }

const AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRouteWithChildren =
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRouteChildren,
  )

interface organizationLayoutRouteChildren {
  AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRouteWithChildren
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRoute: typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRouteWithChildren
}

const organizationLayoutRouteChildren: organizationLayoutRouteChildren = {
  AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRoute:
    AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteWithChildren,
  AuthenticateInjectOrgDetailsOrgLayoutOrganizationRoute:
    AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteWithChildren,
  AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRoute:
    AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteWithChildren,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRouteWithChildren,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRouteWithChildren,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRouteWithChildren,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRouteWithChildren,
  AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRoute:
    AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRouteWithChildren,
}

const organizationLayoutRouteWithChildren =
  organizationLayoutRoute._addFileChildren(organizationLayoutRouteChildren)

interface adminLayoutRouteChildren {
  adminGeneralPageRouteRoute: typeof adminGeneralPageRouteRoute
  adminAuthenticationPageRouteRoute: typeof adminAuthenticationPageRouteRoute
  adminCachingPageRouteRoute: typeof adminCachingPageRouteRoute
  adminEncryptionPageRouteRoute: typeof adminEncryptionPageRouteRoute
  adminEnvironmentPageRouteRoute: typeof adminEnvironmentPageRouteRoute
  adminIntegrationsPageRouteRoute: typeof adminIntegrationsPageRouteRoute
  adminMachineIdentitiesResourcesPageRouteRoute: typeof adminMachineIdentitiesResourcesPageRouteRoute
  adminOrganizationResourcesPageRouteRoute: typeof adminOrganizationResourcesPageRouteRoute
  adminUserIdentitiesResourcesPageRouteRoute: typeof adminUserIdentitiesResourcesPageRouteRoute
}

const adminLayoutRouteChildren: adminLayoutRouteChildren = {
  adminGeneralPageRouteRoute: adminGeneralPageRouteRoute,
  adminAuthenticationPageRouteRoute: adminAuthenticationPageRouteRoute,
  adminCachingPageRouteRoute: adminCachingPageRouteRoute,
  adminEncryptionPageRouteRoute: adminEncryptionPageRouteRoute,
  adminEnvironmentPageRouteRoute: adminEnvironmentPageRouteRoute,
  adminIntegrationsPageRouteRoute: adminIntegrationsPageRouteRoute,
  adminMachineIdentitiesResourcesPageRouteRoute:
    adminMachineIdentitiesResourcesPageRouteRoute,
  adminOrganizationResourcesPageRouteRoute:
    adminOrganizationResourcesPageRouteRoute,
  adminUserIdentitiesResourcesPageRouteRoute:
    adminUserIdentitiesResourcesPageRouteRoute,
}

const adminLayoutRouteWithChildren = adminLayoutRoute._addFileChildren(
  adminLayoutRouteChildren,
)

interface AuthenticateInjectOrgDetailsAdminRouteChildren {
  adminLayoutRoute: typeof adminLayoutRouteWithChildren
}

const AuthenticateInjectOrgDetailsAdminRouteChildren: AuthenticateInjectOrgDetailsAdminRouteChildren =
  {
    adminLayoutRoute: adminLayoutRouteWithChildren,
  }

const AuthenticateInjectOrgDetailsAdminRouteWithChildren =
  AuthenticateInjectOrgDetailsAdminRoute._addFileChildren(
    AuthenticateInjectOrgDetailsAdminRouteChildren,
  )

interface middlewaresInjectOrgDetailsRouteChildren {
  organizationLayoutRoute: typeof organizationLayoutRouteWithChildren
  AuthenticateInjectOrgDetailsAdminRoute: typeof AuthenticateInjectOrgDetailsAdminRouteWithChildren
}

const middlewaresInjectOrgDetailsRouteChildren: middlewaresInjectOrgDetailsRouteChildren =
  {
    organizationLayoutRoute: organizationLayoutRouteWithChildren,
    AuthenticateInjectOrgDetailsAdminRoute:
      AuthenticateInjectOrgDetailsAdminRouteWithChildren,
  }

const middlewaresInjectOrgDetailsRouteWithChildren =
  middlewaresInjectOrgDetailsRoute._addFileChildren(
    middlewaresInjectOrgDetailsRouteChildren,
  )

interface userLayoutRouteChildren {
  userPersonalSettingsPageRouteRoute: typeof userPersonalSettingsPageRouteRoute
}

const userLayoutRouteChildren: userLayoutRouteChildren = {
  userPersonalSettingsPageRouteRoute: userPersonalSettingsPageRouteRoute,
}

const userLayoutRouteWithChildren = userLayoutRoute._addFileChildren(
  userLayoutRouteChildren,
)

interface AuthenticatePersonalSettingsRouteChildren {
  userLayoutRoute: typeof userLayoutRouteWithChildren
}

const AuthenticatePersonalSettingsRouteChildren: AuthenticatePersonalSettingsRouteChildren =
  {
    userLayoutRoute: userLayoutRouteWithChildren,
  }

const AuthenticatePersonalSettingsRouteWithChildren =
  AuthenticatePersonalSettingsRoute._addFileChildren(
    AuthenticatePersonalSettingsRouteChildren,
  )

interface middlewaresAuthenticateRouteChildren {
  authPasswordSetupPageRouteRoute: typeof authPasswordSetupPageRouteRoute
  middlewaresInjectOrgDetailsRoute: typeof middlewaresInjectOrgDetailsRouteWithChildren
  AuthenticatePersonalSettingsRoute: typeof AuthenticatePersonalSettingsRouteWithChildren
  organizationNoOrgPageRouteRoute: typeof organizationNoOrgPageRouteRoute
}

const middlewaresAuthenticateRouteChildren: middlewaresAuthenticateRouteChildren =
  {
    authPasswordSetupPageRouteRoute: authPasswordSetupPageRouteRoute,
    middlewaresInjectOrgDetailsRoute:
      middlewaresInjectOrgDetailsRouteWithChildren,
    AuthenticatePersonalSettingsRoute:
      AuthenticatePersonalSettingsRouteWithChildren,
    organizationNoOrgPageRouteRoute: organizationNoOrgPageRouteRoute,
  }

const middlewaresAuthenticateRouteWithChildren =
  middlewaresAuthenticateRoute._addFileChildren(
    middlewaresAuthenticateRouteChildren,
  )

interface RestrictLoginSignupLoginRouteChildren {
  authLoginPageRouteRoute: typeof authLoginPageRouteRoute
  authAdminLoginPageRouteRoute: typeof authAdminLoginPageRouteRoute
  authLoginLdapPageRouteRoute: typeof authLoginLdapPageRouteRoute
  authSelectOrgPageRouteRoute: typeof authSelectOrgPageRouteRoute
  authLoginSsoPageRouteRoute: typeof authLoginSsoPageRouteRoute
  authProviderErrorPageRouteRoute: typeof authProviderErrorPageRouteRoute
  authProviderSuccessPageRouteRoute: typeof authProviderSuccessPageRouteRoute
}

const RestrictLoginSignupLoginRouteChildren: RestrictLoginSignupLoginRouteChildren =
  {
    authLoginPageRouteRoute: authLoginPageRouteRoute,
    authAdminLoginPageRouteRoute: authAdminLoginPageRouteRoute,
    authLoginLdapPageRouteRoute: authLoginLdapPageRouteRoute,
    authSelectOrgPageRouteRoute: authSelectOrgPageRouteRoute,
    authLoginSsoPageRouteRoute: authLoginSsoPageRouteRoute,
    authProviderErrorPageRouteRoute: authProviderErrorPageRouteRoute,
    authProviderSuccessPageRouteRoute: authProviderSuccessPageRouteRoute,
  }

const RestrictLoginSignupLoginRouteWithChildren =
  RestrictLoginSignupLoginRoute._addFileChildren(
    RestrictLoginSignupLoginRouteChildren,
  )

interface RestrictLoginSignupSignupRouteChildren {
  authSignUpPageRouteRoute: typeof authSignUpPageRouteRoute
  authSignUpSsoPageRouteRoute: typeof authSignUpSsoPageRouteRoute
}

const RestrictLoginSignupSignupRouteChildren: RestrictLoginSignupSignupRouteChildren =
  {
    authSignUpPageRouteRoute: authSignUpPageRouteRoute,
    authSignUpSsoPageRouteRoute: authSignUpSsoPageRouteRoute,
  }

const RestrictLoginSignupSignupRouteWithChildren =
  RestrictLoginSignupSignupRoute._addFileChildren(
    RestrictLoginSignupSignupRouteChildren,
  )

interface middlewaresRestrictLoginSignupRouteChildren {
  authEmailNotVerifiedPageRouteRoute: typeof authEmailNotVerifiedPageRouteRoute
  authPasswordResetPageRouteRoute: typeof authPasswordResetPageRouteRoute
  authRequestNewInvitePageRouteRoute: typeof authRequestNewInvitePageRouteRoute
  authSignUpInvitePageRouteRoute: typeof authSignUpInvitePageRouteRoute
  authVerifyEmailPageRouteRoute: typeof authVerifyEmailPageRouteRoute
  RestrictLoginSignupLoginRoute: typeof RestrictLoginSignupLoginRouteWithChildren
  RestrictLoginSignupSignupRoute: typeof RestrictLoginSignupSignupRouteWithChildren
  adminSignUpPageRouteRoute: typeof adminSignUpPageRouteRoute
}

const middlewaresRestrictLoginSignupRouteChildren: middlewaresRestrictLoginSignupRouteChildren =
  {
    authEmailNotVerifiedPageRouteRoute: authEmailNotVerifiedPageRouteRoute,
    authPasswordResetPageRouteRoute: authPasswordResetPageRouteRoute,
    authRequestNewInvitePageRouteRoute: authRequestNewInvitePageRouteRoute,
    authSignUpInvitePageRouteRoute: authSignUpInvitePageRouteRoute,
    authVerifyEmailPageRouteRoute: authVerifyEmailPageRouteRoute,
    RestrictLoginSignupLoginRoute: RestrictLoginSignupLoginRouteWithChildren,
    RestrictLoginSignupSignupRoute: RestrictLoginSignupSignupRouteWithChildren,
    adminSignUpPageRouteRoute: adminSignUpPageRouteRoute,
  }

const middlewaresRestrictLoginSignupRouteWithChildren =
  middlewaresRestrictLoginSignupRoute._addFileChildren(
    middlewaresRestrictLoginSignupRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof indexRoute
  '/cli-redirect': typeof authCliRedirectPageRouteRoute
  '/share-secret': typeof publicShareSecretPageRouteRoute
  '': typeof organizationLayoutRouteWithChildren
  '/password-setup': typeof authPasswordSetupPageRouteRoute
  '/email-not-verified': typeof authEmailNotVerifiedPageRouteRoute
  '/password-reset': typeof authPasswordResetPageRouteRoute
  '/requestnewinvite': typeof authRequestNewInvitePageRouteRoute
  '/signupinvite': typeof authSignUpInvitePageRouteRoute
  '/verify-email': typeof authVerifyEmailPageRouteRoute
  '/personal-settings': typeof userLayoutRouteWithChildren
  '/login': typeof RestrictLoginSignupLoginRouteWithChildren
  '/signup': typeof RestrictLoginSignupSignupRouteWithChildren
  '/login/': typeof authLoginPageRouteRoute
  '/signup/': typeof authSignUpPageRouteRoute
  '/organization/none': typeof organizationNoOrgPageRouteRoute
  '/admin/signup': typeof adminSignUpPageRouteRoute
  '/login/admin': typeof authAdminLoginPageRouteRoute
  '/login/ldap': typeof authLoginLdapPageRouteRoute
  '/login/select-organization': typeof authSelectOrgPageRouteRoute
  '/login/sso': typeof authLoginSsoPageRouteRoute
  '/signup/sso': typeof authSignUpSsoPageRouteRoute
  '/secret-request/secret/$secretRequestId': typeof publicViewSecretRequestByIDPageRouteRoute
  '/shared/secret/$secretId': typeof publicViewSharedSecretByIDPageRouteRoute
  '/admin': typeof adminLayoutRouteWithChildren
  '/personal-settings/': typeof userPersonalSettingsPageRouteRoute
  '/login/provider/error': typeof authProviderErrorPageRouteRoute
  '/login/provider/success': typeof authProviderSuccessPageRouteRoute
  '/integrations': typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteWithChildren
  '/organization': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteWithChildren
  '/admin/': typeof adminGeneralPageRouteRoute
  '/organization/access-management': typeof organizationAccessManagementPageRouteRoute
  '/organization/admin': typeof organizationAdminPageRouteRoute
  '/organization/audit-logs': typeof organizationAuditLogsPageRouteRoute
  '/organization/billing': typeof organizationBillingPageRouteRoute
  '/organization/projects': typeof organizationProjectsPageRouteRoute
  '/admin/authentication': typeof adminAuthenticationPageRouteRoute
  '/admin/caching': typeof adminCachingPageRouteRoute
  '/admin/encryption': typeof adminEncryptionPageRouteRoute
  '/admin/environment': typeof adminEnvironmentPageRouteRoute
  '/admin/integrations': typeof adminIntegrationsPageRouteRoute
  '/organization/app-connections': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteWithChildren
  '/organization/gateways': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteWithChildren
  '/organization/secret-sharing': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteWithChildren
  '/organization/settings': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteWithChildren
  '/secret-manager/$projectId': typeof AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteWithChildren
  '/organization/app-connections/': typeof organizationAppConnectionsAppConnectionsPageRouteRoute
  '/organization/gateways/': typeof organizationGatewaysGatewayListPageRouteRoute
  '/organization/secret-sharing/': typeof organizationSecretSharingPageRouteRoute
  '/organization/settings/': typeof organizationSettingsPageRouteRoute
  '/organization/groups/$groupId': typeof organizationGroupDetailsByIDPageRouteRoute
  '/organization/identities/$identityId': typeof organizationIdentityDetailsByIDPageRouteRoute
  '/organization/members/$membershipId': typeof organizationUserDetailsByIDPageRouteRoute
  '/organization/roles/$roleId': typeof organizationRoleByIDPageRouteRoute
  '/organization/secret-sharing/settings': typeof organizationSecretSharingSettingsPageRouteRoute
  '/admin/resources/machine-identities': typeof adminMachineIdentitiesResourcesPageRouteRoute
  '/admin/resources/organizations': typeof adminOrganizationResourcesPageRouteRoute
  '/admin/resources/user-identities': typeof adminUserIdentitiesResourcesPageRouteRoute
  '/projects/cert-management/$projectId': typeof certManagerLayoutRouteWithChildren
  '/projects/kms/$projectId': typeof kmsLayoutRouteWithChildren
  '/projects/secret-management/$projectId': typeof secretManagerLayoutRouteWithChildren
  '/projects/secret-scanning/$projectId': typeof secretScanningLayoutRouteWithChildren
  '/projects/ssh/$projectId': typeof sshLayoutRouteWithChildren
  '/secret-manager/$projectId/approval': typeof secretManagerRedirectsRedirectApprovalPageRoute
  '/organization/settings/oauth/callback': typeof organizationSettingsPageOauthCallbackPageRouteRoute
  '/integrations/azure-app-configuration/oauth2/callback': typeof secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectRoute
  '/integrations/azure-key-vault/oauth2/callback': typeof secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectRoute
  '/integrations/bitbucket/oauth2/callback': typeof secretManagerIntegrationsRouteBitbucketOauthRedirectRoute
  '/integrations/gcp-secret-manager/oauth2/callback': typeof secretManagerIntegrationsRouteGcpOauthRedirectRoute
  '/integrations/github/oauth2/callback': typeof secretManagerIntegrationsRouteGithubOauthRedirectRoute
  '/integrations/gitlab/oauth2/callback': typeof secretManagerIntegrationsRouteGitlabOauthRedirectRoute
  '/integrations/heroku/oauth2/callback': typeof secretManagerIntegrationsRouteHerokuOauthRedirectRoute
  '/integrations/netlify/oauth2/callback': typeof secretManagerIntegrationsRouteNetlifyOauthRedirectRoute
  '/integrations/vercel/oauth2/callback': typeof secretManagerIntegrationsRouteVercelOauthRedirectRoute
  '/organization/app-connections/$appConnection/oauth/callback': typeof organizationAppConnectionsOauthCallbackPageRouteRoute
  '/projects/cert-management/$projectId/alerting': typeof certManagerAlertingPageRouteRoute
  '/projects/cert-management/$projectId/certificate-authorities': typeof certManagerCertificateAuthoritiesPageRouteRoute
  '/projects/cert-management/$projectId/certificates': typeof certManagerCertificatesPageRouteRoute
  '/projects/cert-management/$projectId/settings': typeof certManagerSettingsPageRouteRoute
  '/projects/kms/$projectId/kmip': typeof kmsKmipPageRouteRoute
  '/projects/kms/$projectId/overview': typeof kmsOverviewPageRouteRoute
  '/projects/kms/$projectId/settings': typeof kmsSettingsPageRouteRoute
  '/projects/secret-management/$projectId/allowlist': typeof secretManagerIPAllowlistPageRouteRoute
  '/projects/secret-management/$projectId/approval': typeof secretManagerSecretApprovalsPageRouteRoute
  '/projects/secret-management/$projectId/overview': typeof secretManagerOverviewPageRouteRoute
  '/projects/secret-management/$projectId/secret-rotation': typeof secretManagerSecretRotationPageRouteRoute
  '/projects/secret-management/$projectId/settings': typeof secretManagerSettingsPageRouteRoute
  '/projects/secret-scanning/$projectId/findings': typeof secretScanningSecretScanningFindingsPageRouteRoute
  '/projects/secret-scanning/$projectId/settings': typeof secretScanningSettingsPageRouteRoute
  '/projects/ssh/$projectId/cas': typeof sshSshCasPageRouteRoute
  '/projects/ssh/$projectId/certificates': typeof sshSshCertsPageRouteRoute
  '/projects/ssh/$projectId/overview': typeof sshSshHostsPageRouteRoute
  '/projects/ssh/$projectId/settings': typeof sshSettingsPageRouteRoute
  '/projects/cert-management/$projectId/access-management': typeof projectAccessControlPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/audit-logs': typeof projectAuditLogsPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/certificate-templates': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteWithChildren
  '/projects/cert-management/$projectId/subscribers': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteWithChildren
  '/projects/kms/$projectId/access-management': typeof projectAccessControlPageRouteKmsRoute
  '/projects/kms/$projectId/audit-logs': typeof projectAuditLogsPageRouteKmsRoute
  '/projects/secret-management/$projectId/access-management': typeof projectAccessControlPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/audit-logs': typeof projectAuditLogsPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/integrations': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteWithChildren
  '/projects/secret-scanning/$projectId/access-management': typeof projectAccessControlPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/audit-logs': typeof projectAuditLogsPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/data-sources': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteWithChildren
  '/projects/ssh/$projectId/access-management': typeof projectAccessControlPageRouteSshRoute
  '/projects/ssh/$projectId/audit-logs': typeof projectAuditLogsPageRouteSshRoute
  '/projects/cert-management/$projectId/certificate-templates/': typeof certManagerPkiTemplateListPageRouteRoute
  '/projects/cert-management/$projectId/subscribers/': typeof certManagerPkiSubscribersPageRouteRoute
  '/projects/secret-management/$projectId/integrations/': typeof secretManagerIntegrationsListPageRouteRoute
  '/projects/secret-scanning/$projectId/data-sources/': typeof secretScanningSecretScanningDataSourcesPageRouteRoute
  '/projects/cert-management/$projectId/ca/$caName': typeof certManagerCertAuthDetailsByIDPageRouteRoute
  '/projects/cert-management/$projectId/subscribers/$subscriberName': typeof certManagerPkiSubscriberDetailsByIDPageRouteRoute
  '/projects/secret-management/$projectId/integrations/$integrationId': typeof secretManagerIntegrationsDetailsByIDPageRouteRoute
  '/projects/secret-management/$projectId/integrations/select-integration-auth': typeof secretManagerIntegrationsSelectIntegrationAuthPageRouteRoute
  '/projects/secret-management/$projectId/secrets/$envSlug': typeof secretManagerSecretDashboardPageRouteRoute
  '/projects/ssh/$projectId/ca/$caId': typeof sshSshCaByIDPageRouteRoute
  '/projects/ssh/$projectId/ssh-host-groups/$sshHostGroupId': typeof sshSshHostGroupDetailsByIDPageRouteRoute
  '/projects/cert-management/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/pki-collections/$collectionId': typeof certManagerPkiCollectionDetailsByIDPageRoutesRoute
  '/projects/cert-management/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteCertManagerRoute
  '/projects/kms/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteKmsRoute
  '/projects/kms/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteKmsRoute
  '/projects/kms/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteKmsRoute
  '/projects/kms/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteKmsRoute
  '/projects/secret-management/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSecretManagerRoute
  '/projects/secret-scanning/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSecretScanningRoute
  '/projects/ssh/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSshRoute
  '/projects/ssh/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSshRoute
  '/projects/ssh/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSshRoute
  '/projects/ssh/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSshRoute
  '/projects/secret-management/$projectId/integrations/aws-parameter-store/authorize': typeof secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/aws-parameter-store/create': typeof secretManagerIntegrationsAwsParameterStoreConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/aws-secret-manager/authorize': typeof secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/aws-secret-manager/create': typeof secretManagerIntegrationsAwsSecretManagerConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-app-configuration/create': typeof secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-devops/authorize': typeof secretManagerIntegrationsAzureDevopsAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-devops/create': typeof secretManagerIntegrationsAzureDevopsConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-key-vault/authorize': typeof secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-key-vault/create': typeof secretManagerIntegrationsAzureKeyVaultConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/bitbucket/create': typeof secretManagerIntegrationsBitbucketConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/checkly/authorize': typeof secretManagerIntegrationsChecklyAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/checkly/create': typeof secretManagerIntegrationsChecklyConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/circleci/authorize': typeof secretManagerIntegrationsCircleCIAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/circleci/create': typeof secretManagerIntegrationsCircleCIConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloud-66/authorize': typeof secretManagerIntegrationsCloud66AuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloud-66/create': typeof secretManagerIntegrationsCloud66ConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloudflare-pages/authorize': typeof secretManagerIntegrationsCloudflarePagesAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloudflare-pages/create': typeof secretManagerIntegrationsCloudflarePagesConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloudflare-workers/authorize': typeof secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloudflare-workers/create': typeof secretManagerIntegrationsCloudflareWorkersConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/codefresh/authorize': typeof secretManagerIntegrationsCodefreshAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/codefresh/create': typeof secretManagerIntegrationsCodefreshConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/databricks/authorize': typeof secretManagerIntegrationsDatabricksAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/databricks/create': typeof secretManagerIntegrationsDatabricksConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/authorize': typeof secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/create': typeof secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/flyio/authorize': typeof secretManagerIntegrationsFlyioAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/flyio/create': typeof secretManagerIntegrationsFlyioConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/gcp-secret-manager/authorize': typeof secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/gcp-secret-manager/create': typeof secretManagerIntegrationsGcpSecretManagerConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/github/auth-mode-selection': typeof secretManagerIntegrationsGithubAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/github/create': typeof secretManagerIntegrationsGithubConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/gitlab/authorize': typeof secretManagerIntegrationsGitlabAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/gitlab/create': typeof secretManagerIntegrationsGitlabConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/hashicorp-vault/authorize': typeof secretManagerIntegrationsHashicorpVaultAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/hashicorp-vault/create': typeof secretManagerIntegrationsHashicorpVaultConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/hasura-cloud/authorize': typeof secretManagerIntegrationsHasuraCloudAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/hasura-cloud/create': typeof secretManagerIntegrationsHasuraCloudConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/heroku/create': typeof secretManagerIntegrationsHerokuConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/laravel-forge/authorize': typeof secretManagerIntegrationsLaravelForgeAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/laravel-forge/create': typeof secretManagerIntegrationsLaravelForgeConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/netlify/create': typeof secretManagerIntegrationsNetlifyConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/northflank/authorize': typeof secretManagerIntegrationsNorthflankAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/northflank/create': typeof secretManagerIntegrationsNorthflankConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/octopus-deploy/authorize': typeof secretManagerIntegrationsOctopusDeployAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/octopus-deploy/create': typeof secretManagerIntegrationsOctopusDeployConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/qovery/authorize': typeof secretManagerIntegrationsQoveryAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/qovery/create': typeof secretManagerIntegrationsQoveryConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/railway/authorize': typeof secretManagerIntegrationsRailwayAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/railway/create': typeof secretManagerIntegrationsRailwayConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/render/authorize': typeof secretManagerIntegrationsRenderAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/render/create': typeof secretManagerIntegrationsRenderConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/rundeck/authorize': typeof secretManagerIntegrationsRundeckAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/rundeck/create': typeof secretManagerIntegrationsRundeckConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/supabase/authorize': typeof secretManagerIntegrationsSupabaseAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/supabase/create': typeof secretManagerIntegrationsSupabaseConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/teamcity/authorize': typeof secretManagerIntegrationsTeamcityAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/teamcity/create': typeof secretManagerIntegrationsTeamcityConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/terraform-cloud/authorize': typeof secretManagerIntegrationsTerraformCloudAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/terraform-cloud/create': typeof secretManagerIntegrationsTerraformCloudConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/travisci/authorize': typeof secretManagerIntegrationsTravisCIAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/travisci/create': typeof secretManagerIntegrationsTravisCIConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/vercel/create': typeof secretManagerIntegrationsVercelConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/windmill/authorize': typeof secretManagerIntegrationsWindmillAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/windmill/create': typeof secretManagerIntegrationsWindmillConfigurePageRouteRoute
  '/projects/secret-scanning/$projectId/data-sources/$type/$dataSourceId': typeof secretScanningSecretScanningDataSourceByIdPageRouteRoute
  '/projects/secret-management/$projectId/commits/$environment/$folderId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteWithChildren
  '/projects/secret-management/$projectId/commits/$environment/$folderId/': typeof secretManagerCommitsPageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-app-configuration/oauth2/callback': typeof secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-key-vault/oauth2/callback': typeof secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/bitbucket/oauth2/callback': typeof secretManagerIntegrationsBitbucketOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/gcp-secret-manager/oauth2/callback': typeof secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/github/oauth2/callback': typeof secretManagerIntegrationsGithubOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/gitlab/oauth2/callback': typeof secretManagerIntegrationsGitlabOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/heroku/oauth2/callback': typeof secretManagerIntegrationsHerokuOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/netlify/oauth2/callback': typeof secretManagerIntegrationsNetlifyOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/secret-syncs/$destination/$syncId': typeof secretManagerSecretSyncDetailsByIDPageRouteRoute
  '/projects/secret-management/$projectId/integrations/vercel/oauth2/callback': typeof secretManagerIntegrationsVercelOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteWithChildren
  '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId/': typeof secretManagerCommitDetailsPageRouteRoute
  '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId/restore': typeof secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof indexRoute
  '/cli-redirect': typeof authCliRedirectPageRouteRoute
  '/share-secret': typeof publicShareSecretPageRouteRoute
  '': typeof organizationLayoutRouteWithChildren
  '/password-setup': typeof authPasswordSetupPageRouteRoute
  '/email-not-verified': typeof authEmailNotVerifiedPageRouteRoute
  '/password-reset': typeof authPasswordResetPageRouteRoute
  '/requestnewinvite': typeof authRequestNewInvitePageRouteRoute
  '/signupinvite': typeof authSignUpInvitePageRouteRoute
  '/verify-email': typeof authVerifyEmailPageRouteRoute
  '/personal-settings': typeof userPersonalSettingsPageRouteRoute
  '/login': typeof authLoginPageRouteRoute
  '/signup': typeof authSignUpPageRouteRoute
  '/organization/none': typeof organizationNoOrgPageRouteRoute
  '/admin/signup': typeof adminSignUpPageRouteRoute
  '/login/admin': typeof authAdminLoginPageRouteRoute
  '/login/ldap': typeof authLoginLdapPageRouteRoute
  '/login/select-organization': typeof authSelectOrgPageRouteRoute
  '/login/sso': typeof authLoginSsoPageRouteRoute
  '/signup/sso': typeof authSignUpSsoPageRouteRoute
  '/secret-request/secret/$secretRequestId': typeof publicViewSecretRequestByIDPageRouteRoute
  '/shared/secret/$secretId': typeof publicViewSharedSecretByIDPageRouteRoute
  '/admin': typeof adminGeneralPageRouteRoute
  '/login/provider/error': typeof authProviderErrorPageRouteRoute
  '/login/provider/success': typeof authProviderSuccessPageRouteRoute
  '/integrations': typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteWithChildren
  '/organization': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteWithChildren
  '/organization/access-management': typeof organizationAccessManagementPageRouteRoute
  '/organization/admin': typeof organizationAdminPageRouteRoute
  '/organization/audit-logs': typeof organizationAuditLogsPageRouteRoute
  '/organization/billing': typeof organizationBillingPageRouteRoute
  '/organization/projects': typeof organizationProjectsPageRouteRoute
  '/admin/authentication': typeof adminAuthenticationPageRouteRoute
  '/admin/caching': typeof adminCachingPageRouteRoute
  '/admin/encryption': typeof adminEncryptionPageRouteRoute
  '/admin/environment': typeof adminEnvironmentPageRouteRoute
  '/admin/integrations': typeof adminIntegrationsPageRouteRoute
  '/secret-manager/$projectId': typeof AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteWithChildren
  '/organization/app-connections': typeof organizationAppConnectionsAppConnectionsPageRouteRoute
  '/organization/gateways': typeof organizationGatewaysGatewayListPageRouteRoute
  '/organization/secret-sharing': typeof organizationSecretSharingPageRouteRoute
  '/organization/settings': typeof organizationSettingsPageRouteRoute
  '/organization/groups/$groupId': typeof organizationGroupDetailsByIDPageRouteRoute
  '/organization/identities/$identityId': typeof organizationIdentityDetailsByIDPageRouteRoute
  '/organization/members/$membershipId': typeof organizationUserDetailsByIDPageRouteRoute
  '/organization/roles/$roleId': typeof organizationRoleByIDPageRouteRoute
  '/organization/secret-sharing/settings': typeof organizationSecretSharingSettingsPageRouteRoute
  '/admin/resources/machine-identities': typeof adminMachineIdentitiesResourcesPageRouteRoute
  '/admin/resources/organizations': typeof adminOrganizationResourcesPageRouteRoute
  '/admin/resources/user-identities': typeof adminUserIdentitiesResourcesPageRouteRoute
  '/projects/cert-management/$projectId': typeof certManagerLayoutRouteWithChildren
  '/projects/kms/$projectId': typeof kmsLayoutRouteWithChildren
  '/projects/secret-management/$projectId': typeof secretManagerLayoutRouteWithChildren
  '/projects/secret-scanning/$projectId': typeof secretScanningLayoutRouteWithChildren
  '/projects/ssh/$projectId': typeof sshLayoutRouteWithChildren
  '/secret-manager/$projectId/approval': typeof secretManagerRedirectsRedirectApprovalPageRoute
  '/organization/settings/oauth/callback': typeof organizationSettingsPageOauthCallbackPageRouteRoute
  '/integrations/azure-app-configuration/oauth2/callback': typeof secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectRoute
  '/integrations/azure-key-vault/oauth2/callback': typeof secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectRoute
  '/integrations/bitbucket/oauth2/callback': typeof secretManagerIntegrationsRouteBitbucketOauthRedirectRoute
  '/integrations/gcp-secret-manager/oauth2/callback': typeof secretManagerIntegrationsRouteGcpOauthRedirectRoute
  '/integrations/github/oauth2/callback': typeof secretManagerIntegrationsRouteGithubOauthRedirectRoute
  '/integrations/gitlab/oauth2/callback': typeof secretManagerIntegrationsRouteGitlabOauthRedirectRoute
  '/integrations/heroku/oauth2/callback': typeof secretManagerIntegrationsRouteHerokuOauthRedirectRoute
  '/integrations/netlify/oauth2/callback': typeof secretManagerIntegrationsRouteNetlifyOauthRedirectRoute
  '/integrations/vercel/oauth2/callback': typeof secretManagerIntegrationsRouteVercelOauthRedirectRoute
  '/organization/app-connections/$appConnection/oauth/callback': typeof organizationAppConnectionsOauthCallbackPageRouteRoute
  '/projects/cert-management/$projectId/alerting': typeof certManagerAlertingPageRouteRoute
  '/projects/cert-management/$projectId/certificate-authorities': typeof certManagerCertificateAuthoritiesPageRouteRoute
  '/projects/cert-management/$projectId/certificates': typeof certManagerCertificatesPageRouteRoute
  '/projects/cert-management/$projectId/settings': typeof certManagerSettingsPageRouteRoute
  '/projects/kms/$projectId/kmip': typeof kmsKmipPageRouteRoute
  '/projects/kms/$projectId/overview': typeof kmsOverviewPageRouteRoute
  '/projects/kms/$projectId/settings': typeof kmsSettingsPageRouteRoute
  '/projects/secret-management/$projectId/allowlist': typeof secretManagerIPAllowlistPageRouteRoute
  '/projects/secret-management/$projectId/approval': typeof secretManagerSecretApprovalsPageRouteRoute
  '/projects/secret-management/$projectId/overview': typeof secretManagerOverviewPageRouteRoute
  '/projects/secret-management/$projectId/secret-rotation': typeof secretManagerSecretRotationPageRouteRoute
  '/projects/secret-management/$projectId/settings': typeof secretManagerSettingsPageRouteRoute
  '/projects/secret-scanning/$projectId/findings': typeof secretScanningSecretScanningFindingsPageRouteRoute
  '/projects/secret-scanning/$projectId/settings': typeof secretScanningSettingsPageRouteRoute
  '/projects/ssh/$projectId/cas': typeof sshSshCasPageRouteRoute
  '/projects/ssh/$projectId/certificates': typeof sshSshCertsPageRouteRoute
  '/projects/ssh/$projectId/overview': typeof sshSshHostsPageRouteRoute
  '/projects/ssh/$projectId/settings': typeof sshSettingsPageRouteRoute
  '/projects/cert-management/$projectId/access-management': typeof projectAccessControlPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/audit-logs': typeof projectAuditLogsPageRouteCertManagerRoute
  '/projects/kms/$projectId/access-management': typeof projectAccessControlPageRouteKmsRoute
  '/projects/kms/$projectId/audit-logs': typeof projectAuditLogsPageRouteKmsRoute
  '/projects/secret-management/$projectId/access-management': typeof projectAccessControlPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/audit-logs': typeof projectAuditLogsPageRouteSecretManagerRoute
  '/projects/secret-scanning/$projectId/access-management': typeof projectAccessControlPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/audit-logs': typeof projectAuditLogsPageRouteSecretScanningRoute
  '/projects/ssh/$projectId/access-management': typeof projectAccessControlPageRouteSshRoute
  '/projects/ssh/$projectId/audit-logs': typeof projectAuditLogsPageRouteSshRoute
  '/projects/cert-management/$projectId/certificate-templates': typeof certManagerPkiTemplateListPageRouteRoute
  '/projects/cert-management/$projectId/subscribers': typeof certManagerPkiSubscribersPageRouteRoute
  '/projects/secret-management/$projectId/integrations': typeof secretManagerIntegrationsListPageRouteRoute
  '/projects/secret-scanning/$projectId/data-sources': typeof secretScanningSecretScanningDataSourcesPageRouteRoute
  '/projects/cert-management/$projectId/ca/$caName': typeof certManagerCertAuthDetailsByIDPageRouteRoute
  '/projects/cert-management/$projectId/subscribers/$subscriberName': typeof certManagerPkiSubscriberDetailsByIDPageRouteRoute
  '/projects/secret-management/$projectId/integrations/$integrationId': typeof secretManagerIntegrationsDetailsByIDPageRouteRoute
  '/projects/secret-management/$projectId/integrations/select-integration-auth': typeof secretManagerIntegrationsSelectIntegrationAuthPageRouteRoute
  '/projects/secret-management/$projectId/secrets/$envSlug': typeof secretManagerSecretDashboardPageRouteRoute
  '/projects/ssh/$projectId/ca/$caId': typeof sshSshCaByIDPageRouteRoute
  '/projects/ssh/$projectId/ssh-host-groups/$sshHostGroupId': typeof sshSshHostGroupDetailsByIDPageRouteRoute
  '/projects/cert-management/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteCertManagerRoute
  '/projects/cert-management/$projectId/pki-collections/$collectionId': typeof certManagerPkiCollectionDetailsByIDPageRoutesRoute
  '/projects/cert-management/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteCertManagerRoute
  '/projects/kms/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteKmsRoute
  '/projects/kms/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteKmsRoute
  '/projects/kms/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteKmsRoute
  '/projects/kms/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteKmsRoute
  '/projects/secret-management/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSecretManagerRoute
  '/projects/secret-management/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSecretManagerRoute
  '/projects/secret-scanning/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSecretScanningRoute
  '/projects/secret-scanning/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSecretScanningRoute
  '/projects/ssh/$projectId/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSshRoute
  '/projects/ssh/$projectId/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSshRoute
  '/projects/ssh/$projectId/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSshRoute
  '/projects/ssh/$projectId/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSshRoute
  '/projects/secret-management/$projectId/integrations/aws-parameter-store/authorize': typeof secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/aws-parameter-store/create': typeof secretManagerIntegrationsAwsParameterStoreConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/aws-secret-manager/authorize': typeof secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/aws-secret-manager/create': typeof secretManagerIntegrationsAwsSecretManagerConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-app-configuration/create': typeof secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-devops/authorize': typeof secretManagerIntegrationsAzureDevopsAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-devops/create': typeof secretManagerIntegrationsAzureDevopsConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-key-vault/authorize': typeof secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-key-vault/create': typeof secretManagerIntegrationsAzureKeyVaultConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/bitbucket/create': typeof secretManagerIntegrationsBitbucketConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/checkly/authorize': typeof secretManagerIntegrationsChecklyAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/checkly/create': typeof secretManagerIntegrationsChecklyConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/circleci/authorize': typeof secretManagerIntegrationsCircleCIAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/circleci/create': typeof secretManagerIntegrationsCircleCIConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloud-66/authorize': typeof secretManagerIntegrationsCloud66AuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloud-66/create': typeof secretManagerIntegrationsCloud66ConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloudflare-pages/authorize': typeof secretManagerIntegrationsCloudflarePagesAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloudflare-pages/create': typeof secretManagerIntegrationsCloudflarePagesConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloudflare-workers/authorize': typeof secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/cloudflare-workers/create': typeof secretManagerIntegrationsCloudflareWorkersConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/codefresh/authorize': typeof secretManagerIntegrationsCodefreshAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/codefresh/create': typeof secretManagerIntegrationsCodefreshConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/databricks/authorize': typeof secretManagerIntegrationsDatabricksAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/databricks/create': typeof secretManagerIntegrationsDatabricksConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/authorize': typeof secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/create': typeof secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/flyio/authorize': typeof secretManagerIntegrationsFlyioAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/flyio/create': typeof secretManagerIntegrationsFlyioConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/gcp-secret-manager/authorize': typeof secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/gcp-secret-manager/create': typeof secretManagerIntegrationsGcpSecretManagerConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/github/auth-mode-selection': typeof secretManagerIntegrationsGithubAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/github/create': typeof secretManagerIntegrationsGithubConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/gitlab/authorize': typeof secretManagerIntegrationsGitlabAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/gitlab/create': typeof secretManagerIntegrationsGitlabConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/hashicorp-vault/authorize': typeof secretManagerIntegrationsHashicorpVaultAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/hashicorp-vault/create': typeof secretManagerIntegrationsHashicorpVaultConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/hasura-cloud/authorize': typeof secretManagerIntegrationsHasuraCloudAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/hasura-cloud/create': typeof secretManagerIntegrationsHasuraCloudConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/heroku/create': typeof secretManagerIntegrationsHerokuConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/laravel-forge/authorize': typeof secretManagerIntegrationsLaravelForgeAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/laravel-forge/create': typeof secretManagerIntegrationsLaravelForgeConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/netlify/create': typeof secretManagerIntegrationsNetlifyConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/northflank/authorize': typeof secretManagerIntegrationsNorthflankAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/northflank/create': typeof secretManagerIntegrationsNorthflankConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/octopus-deploy/authorize': typeof secretManagerIntegrationsOctopusDeployAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/octopus-deploy/create': typeof secretManagerIntegrationsOctopusDeployConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/qovery/authorize': typeof secretManagerIntegrationsQoveryAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/qovery/create': typeof secretManagerIntegrationsQoveryConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/railway/authorize': typeof secretManagerIntegrationsRailwayAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/railway/create': typeof secretManagerIntegrationsRailwayConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/render/authorize': typeof secretManagerIntegrationsRenderAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/render/create': typeof secretManagerIntegrationsRenderConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/rundeck/authorize': typeof secretManagerIntegrationsRundeckAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/rundeck/create': typeof secretManagerIntegrationsRundeckConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/supabase/authorize': typeof secretManagerIntegrationsSupabaseAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/supabase/create': typeof secretManagerIntegrationsSupabaseConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/teamcity/authorize': typeof secretManagerIntegrationsTeamcityAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/teamcity/create': typeof secretManagerIntegrationsTeamcityConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/terraform-cloud/authorize': typeof secretManagerIntegrationsTerraformCloudAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/terraform-cloud/create': typeof secretManagerIntegrationsTerraformCloudConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/travisci/authorize': typeof secretManagerIntegrationsTravisCIAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/travisci/create': typeof secretManagerIntegrationsTravisCIConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/vercel/create': typeof secretManagerIntegrationsVercelConfigurePageRouteRoute
  '/projects/secret-management/$projectId/integrations/windmill/authorize': typeof secretManagerIntegrationsWindmillAuthorizePageRouteRoute
  '/projects/secret-management/$projectId/integrations/windmill/create': typeof secretManagerIntegrationsWindmillConfigurePageRouteRoute
  '/projects/secret-scanning/$projectId/data-sources/$type/$dataSourceId': typeof secretScanningSecretScanningDataSourceByIdPageRouteRoute
  '/projects/secret-management/$projectId/commits/$environment/$folderId': typeof secretManagerCommitsPageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-app-configuration/oauth2/callback': typeof secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/azure-key-vault/oauth2/callback': typeof secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/bitbucket/oauth2/callback': typeof secretManagerIntegrationsBitbucketOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/gcp-secret-manager/oauth2/callback': typeof secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/github/oauth2/callback': typeof secretManagerIntegrationsGithubOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/gitlab/oauth2/callback': typeof secretManagerIntegrationsGitlabOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/heroku/oauth2/callback': typeof secretManagerIntegrationsHerokuOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/netlify/oauth2/callback': typeof secretManagerIntegrationsNetlifyOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/integrations/secret-syncs/$destination/$syncId': typeof secretManagerSecretSyncDetailsByIDPageRouteRoute
  '/projects/secret-management/$projectId/integrations/vercel/oauth2/callback': typeof secretManagerIntegrationsVercelOauthCallbackPageRouteRoute
  '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId': typeof secretManagerCommitDetailsPageRouteRoute
  '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId/restore': typeof secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof indexRoute
  '/cli-redirect': typeof authCliRedirectPageRouteRoute
  '/share-secret': typeof publicShareSecretPageRouteRoute
  '/_authenticate': typeof middlewaresAuthenticateRouteWithChildren
  '/_restrict-login-signup': typeof middlewaresRestrictLoginSignupRouteWithChildren
  '/_authenticate/password-setup': typeof authPasswordSetupPageRouteRoute
  '/_restrict-login-signup/email-not-verified': typeof authEmailNotVerifiedPageRouteRoute
  '/_restrict-login-signup/password-reset': typeof authPasswordResetPageRouteRoute
  '/_restrict-login-signup/requestnewinvite': typeof authRequestNewInvitePageRouteRoute
  '/_restrict-login-signup/signupinvite': typeof authSignUpInvitePageRouteRoute
  '/_restrict-login-signup/verify-email': typeof authVerifyEmailPageRouteRoute
  '/_authenticate/_inject-org-details': typeof middlewaresInjectOrgDetailsRouteWithChildren
  '/_authenticate/personal-settings': typeof AuthenticatePersonalSettingsRouteWithChildren
  '/_restrict-login-signup/login': typeof RestrictLoginSignupLoginRouteWithChildren
  '/_restrict-login-signup/signup': typeof RestrictLoginSignupSignupRouteWithChildren
  '/_restrict-login-signup/login/': typeof authLoginPageRouteRoute
  '/_restrict-login-signup/signup/': typeof authSignUpPageRouteRoute
  '/_authenticate/organization/none': typeof organizationNoOrgPageRouteRoute
  '/_restrict-login-signup/admin/signup': typeof adminSignUpPageRouteRoute
  '/_restrict-login-signup/login/admin': typeof authAdminLoginPageRouteRoute
  '/_restrict-login-signup/login/ldap': typeof authLoginLdapPageRouteRoute
  '/_restrict-login-signup/login/select-organization': typeof authSelectOrgPageRouteRoute
  '/_restrict-login-signup/login/sso': typeof authLoginSsoPageRouteRoute
  '/_restrict-login-signup/signup/sso': typeof authSignUpSsoPageRouteRoute
  '/secret-request/secret/$secretRequestId': typeof publicViewSecretRequestByIDPageRouteRoute
  '/shared/secret/$secretId': typeof publicViewSharedSecretByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout': typeof organizationLayoutRouteWithChildren
  '/_authenticate/_inject-org-details/admin': typeof AuthenticateInjectOrgDetailsAdminRouteWithChildren
  '/_authenticate/personal-settings/_layout': typeof userLayoutRouteWithChildren
  '/_authenticate/personal-settings/_layout/': typeof userPersonalSettingsPageRouteRoute
  '/_restrict-login-signup/login/provider/error': typeof authProviderErrorPageRouteRoute
  '/_restrict-login-signup/login/provider/success': typeof authProviderSuccessPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations': typeof AuthenticateInjectOrgDetailsOrgLayoutIntegrationsRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/organization': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationRouteWithChildren
  '/_authenticate/_inject-org-details/admin/_admin-layout': typeof adminLayoutRouteWithChildren
  '/_authenticate/_inject-org-details/admin/_admin-layout/': typeof adminGeneralPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/access-management': typeof organizationAccessManagementPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/admin': typeof organizationAdminPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/audit-logs': typeof organizationAuditLogsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/billing': typeof organizationBillingPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/projects': typeof organizationProjectsPageRouteRoute
  '/_authenticate/_inject-org-details/admin/_admin-layout/authentication': typeof adminAuthenticationPageRouteRoute
  '/_authenticate/_inject-org-details/admin/_admin-layout/caching': typeof adminCachingPageRouteRoute
  '/_authenticate/_inject-org-details/admin/_admin-layout/encryption': typeof adminEncryptionPageRouteRoute
  '/_authenticate/_inject-org-details/admin/_admin-layout/environment': typeof adminEnvironmentPageRouteRoute
  '/_authenticate/_inject-org-details/admin/_admin-layout/integrations': typeof adminIntegrationsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/app-connections': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationAppConnectionsRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/organization/gateways': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationGatewaysRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSecretSharingRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/organization/settings': typeof AuthenticateInjectOrgDetailsOrgLayoutOrganizationSettingsRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId': typeof AuthenticateInjectOrgDetailsOrgLayoutSecretManagerProjectIdRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/organization/app-connections/': typeof organizationAppConnectionsAppConnectionsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/gateways/': typeof organizationGatewaysGatewayListPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/': typeof organizationSecretSharingPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/settings/': typeof organizationSettingsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/groups/$groupId': typeof organizationGroupDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/identities/$identityId': typeof organizationIdentityDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/members/$membershipId': typeof organizationUserDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/roles/$roleId': typeof organizationRoleByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/settings': typeof organizationSecretSharingSettingsPageRouteRoute
  '/_authenticate/_inject-org-details/admin/_admin-layout/resources/machine-identities': typeof adminMachineIdentitiesResourcesPageRouteRoute
  '/_authenticate/_inject-org-details/admin/_admin-layout/resources/organizations': typeof adminOrganizationResourcesPageRouteRoute
  '/_authenticate/_inject-org-details/admin/_admin-layout/resources/user-identities': typeof adminUserIdentitiesResourcesPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsKmsProjectIdRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSshProjectIdRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId/approval': typeof secretManagerRedirectsRedirectApprovalPageRoute
  '/_authenticate/_inject-org-details/_org-layout/organization/settings/oauth/callback': typeof organizationSettingsPageOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/azure-app-configuration/oauth2/callback': typeof secretManagerIntegrationsRouteAzureAppConfigurationsOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/azure-key-vault/oauth2/callback': typeof secretManagerIntegrationsRouteAzureKeyVaultOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/bitbucket/oauth2/callback': typeof secretManagerIntegrationsRouteBitbucketOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/gcp-secret-manager/oauth2/callback': typeof secretManagerIntegrationsRouteGcpOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/github/oauth2/callback': typeof secretManagerIntegrationsRouteGithubOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/gitlab/oauth2/callback': typeof secretManagerIntegrationsRouteGitlabOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/heroku/oauth2/callback': typeof secretManagerIntegrationsRouteHerokuOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/netlify/oauth2/callback': typeof secretManagerIntegrationsRouteNetlifyOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/integrations/vercel/oauth2/callback': typeof secretManagerIntegrationsRouteVercelOauthRedirectRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout': typeof certManagerLayoutRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout': typeof kmsLayoutRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout': typeof secretManagerLayoutRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout': typeof secretScanningLayoutRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout': typeof sshLayoutRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/organization/app-connections/$appConnection/oauth/callback': typeof organizationAppConnectionsOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/alerting': typeof certManagerAlertingPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-authorities': typeof certManagerCertificateAuthoritiesPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificates': typeof certManagerCertificatesPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/settings': typeof certManagerSettingsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/kmip': typeof kmsKmipPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/overview': typeof kmsOverviewPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/settings': typeof kmsSettingsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/allowlist': typeof secretManagerIPAllowlistPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/approval': typeof secretManagerSecretApprovalsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/overview': typeof secretManagerOverviewPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secret-rotation': typeof secretManagerSecretRotationPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/settings': typeof secretManagerSettingsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/findings': typeof secretScanningSecretScanningFindingsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/settings': typeof secretScanningSettingsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/cas': typeof sshSshCasPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/certificates': typeof sshSshCertsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/overview': typeof sshSshHostsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/settings': typeof sshSettingsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/access-management': typeof projectAccessControlPageRouteCertManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/audit-logs': typeof projectAuditLogsPageRouteCertManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutCertificateTemplatesRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsCertManagementProjectIdCertManagerLayoutSubscribersRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/access-management': typeof projectAccessControlPageRouteKmsRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/audit-logs': typeof projectAuditLogsPageRouteKmsRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/access-management': typeof projectAccessControlPageRouteSecretManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/audit-logs': typeof projectAuditLogsPageRouteSecretManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutIntegrationsRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/access-management': typeof projectAccessControlPageRouteSecretScanningRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/audit-logs': typeof projectAuditLogsPageRouteSecretScanningRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretScanningProjectIdSecretScanningLayoutDataSourcesRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/access-management': typeof projectAccessControlPageRouteSshRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/audit-logs': typeof projectAuditLogsPageRouteSshRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates/': typeof certManagerPkiTemplateListPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/': typeof certManagerPkiSubscribersPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/': typeof secretManagerIntegrationsListPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/': typeof secretScanningSecretScanningDataSourcesPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/ca/$caName': typeof certManagerCertAuthDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/$subscriberName': typeof certManagerPkiSubscriberDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/$integrationId': typeof secretManagerIntegrationsDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/select-integration-auth': typeof secretManagerIntegrationsSelectIntegrationAuthPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secrets/$envSlug': typeof secretManagerSecretDashboardPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ca/$caId': typeof sshSshCaByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ssh-host-groups/$sshHostGroupId': typeof sshSshHostGroupDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/groups/$groupId': typeof projectGroupDetailsByIDPageRouteCertManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteCertManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/members/$membershipId': typeof projectMemberDetailsByIDPageRouteCertManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/pki-collections/$collectionId': typeof certManagerPkiCollectionDetailsByIDPageRoutesRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteCertManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/groups/$groupId': typeof projectGroupDetailsByIDPageRouteKmsRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteKmsRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/members/$membershipId': typeof projectMemberDetailsByIDPageRouteKmsRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteKmsRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSecretManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSecretManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSecretManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSecretManagerRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSecretScanningRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSecretScanningRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSecretScanningRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSecretScanningRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/groups/$groupId': typeof projectGroupDetailsByIDPageRouteSshRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/identities/$identityId': typeof projectIdentityDetailsByIDPageRouteSshRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/members/$membershipId': typeof projectMemberDetailsByIDPageRouteSshRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/roles/$roleSlug': typeof projectRoleDetailsBySlugPageRouteSshRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/authorize': typeof secretManagerIntegrationsAwsParameterStoreAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/create': typeof secretManagerIntegrationsAwsParameterStoreConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/authorize': typeof secretManagerIntegrationsAwsSecretManagerAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/create': typeof secretManagerIntegrationsAwsSecretManagerConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/create': typeof secretManagerIntegrationsAzureAppConfigurationConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/authorize': typeof secretManagerIntegrationsAzureDevopsAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/create': typeof secretManagerIntegrationsAzureDevopsConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/authorize': typeof secretManagerIntegrationsAzureKeyVaultAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/create': typeof secretManagerIntegrationsAzureKeyVaultConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/create': typeof secretManagerIntegrationsBitbucketConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/authorize': typeof secretManagerIntegrationsChecklyAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/create': typeof secretManagerIntegrationsChecklyConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/authorize': typeof secretManagerIntegrationsCircleCIAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/create': typeof secretManagerIntegrationsCircleCIConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/authorize': typeof secretManagerIntegrationsCloud66AuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/create': typeof secretManagerIntegrationsCloud66ConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/authorize': typeof secretManagerIntegrationsCloudflarePagesAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/create': typeof secretManagerIntegrationsCloudflarePagesConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/authorize': typeof secretManagerIntegrationsCloudflareWorkersAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/create': typeof secretManagerIntegrationsCloudflareWorkersConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/authorize': typeof secretManagerIntegrationsCodefreshAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/create': typeof secretManagerIntegrationsCodefreshConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/authorize': typeof secretManagerIntegrationsDatabricksAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/create': typeof secretManagerIntegrationsDatabricksConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/authorize': typeof secretManagerIntegrationsDigitalOceanAppPlatformAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/create': typeof secretManagerIntegrationsDigitalOceanAppPlatformConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/authorize': typeof secretManagerIntegrationsFlyioAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/create': typeof secretManagerIntegrationsFlyioConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/authorize': typeof secretManagerIntegrationsGcpSecretManagerAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/create': typeof secretManagerIntegrationsGcpSecretManagerConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/auth-mode-selection': typeof secretManagerIntegrationsGithubAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/create': typeof secretManagerIntegrationsGithubConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/authorize': typeof secretManagerIntegrationsGitlabAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/create': typeof secretManagerIntegrationsGitlabConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/authorize': typeof secretManagerIntegrationsHashicorpVaultAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/create': typeof secretManagerIntegrationsHashicorpVaultConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/authorize': typeof secretManagerIntegrationsHasuraCloudAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/create': typeof secretManagerIntegrationsHasuraCloudConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/create': typeof secretManagerIntegrationsHerokuConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/authorize': typeof secretManagerIntegrationsLaravelForgeAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/create': typeof secretManagerIntegrationsLaravelForgeConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/create': typeof secretManagerIntegrationsNetlifyConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/authorize': typeof secretManagerIntegrationsNorthflankAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/create': typeof secretManagerIntegrationsNorthflankConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/authorize': typeof secretManagerIntegrationsOctopusDeployAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/create': typeof secretManagerIntegrationsOctopusDeployConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/authorize': typeof secretManagerIntegrationsQoveryAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/create': typeof secretManagerIntegrationsQoveryConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/authorize': typeof secretManagerIntegrationsRailwayAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/create': typeof secretManagerIntegrationsRailwayConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/authorize': typeof secretManagerIntegrationsRenderAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/create': typeof secretManagerIntegrationsRenderConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/authorize': typeof secretManagerIntegrationsRundeckAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/create': typeof secretManagerIntegrationsRundeckConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/authorize': typeof secretManagerIntegrationsSupabaseAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/create': typeof secretManagerIntegrationsSupabaseConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/authorize': typeof secretManagerIntegrationsTeamcityAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/create': typeof secretManagerIntegrationsTeamcityConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/authorize': typeof secretManagerIntegrationsTerraformCloudAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/create': typeof secretManagerIntegrationsTerraformCloudConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/authorize': typeof secretManagerIntegrationsTravisCIAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/create': typeof secretManagerIntegrationsTravisCIConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/create': typeof secretManagerIntegrationsVercelConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/authorize': typeof secretManagerIntegrationsWindmillAuthorizePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/create': typeof secretManagerIntegrationsWindmillConfigurePageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/$type/$dataSourceId': typeof secretScanningSecretScanningDataSourceByIdPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/': typeof secretManagerCommitsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/oauth2/callback': typeof secretManagerIntegrationsAzureAppConfigurationOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/oauth2/callback': typeof secretManagerIntegrationsAzureKeyVaultOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/oauth2/callback': typeof secretManagerIntegrationsBitbucketOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/oauth2/callback': typeof secretManagerIntegrationsGcpSecretManagerOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/oauth2/callback': typeof secretManagerIntegrationsGithubOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/oauth2/callback': typeof secretManagerIntegrationsGitlabOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/oauth2/callback': typeof secretManagerIntegrationsHerokuOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/oauth2/callback': typeof secretManagerIntegrationsNetlifyOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/secret-syncs/$destination/$syncId': typeof secretManagerSecretSyncDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/oauth2/callback': typeof secretManagerIntegrationsVercelOauthCallbackPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId': typeof AuthenticateInjectOrgDetailsOrgLayoutProjectsSecretManagementProjectIdSecretManagerLayoutCommitsEnvironmentFolderIdCommitIdRouteWithChildren
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/': typeof secretManagerCommitDetailsPageRouteRoute
  '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/restore': typeof secretManagerCommitDetailsPageComponentsRollbackPreviewTabRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cli-redirect'
    | '/share-secret'
    | ''
    | '/password-setup'
    | '/email-not-verified'
    | '/password-reset'
    | '/requestnewinvite'
    | '/signupinvite'
    | '/verify-email'
    | '/personal-settings'
    | '/login'
    | '/signup'
    | '/login/'
    | '/signup/'
    | '/organization/none'
    | '/admin/signup'
    | '/login/admin'
    | '/login/ldap'
    | '/login/select-organization'
    | '/login/sso'
    | '/signup/sso'
    | '/secret-request/secret/$secretRequestId'
    | '/shared/secret/$secretId'
    | '/admin'
    | '/personal-settings/'
    | '/login/provider/error'
    | '/login/provider/success'
    | '/integrations'
    | '/organization'
    | '/admin/'
    | '/organization/access-management'
    | '/organization/admin'
    | '/organization/audit-logs'
    | '/organization/billing'
    | '/organization/projects'
    | '/admin/authentication'
    | '/admin/caching'
    | '/admin/encryption'
    | '/admin/environment'
    | '/admin/integrations'
    | '/organization/app-connections'
    | '/organization/gateways'
    | '/organization/secret-sharing'
    | '/organization/settings'
    | '/secret-manager/$projectId'
    | '/organization/app-connections/'
    | '/organization/gateways/'
    | '/organization/secret-sharing/'
    | '/organization/settings/'
    | '/organization/groups/$groupId'
    | '/organization/identities/$identityId'
    | '/organization/members/$membershipId'
    | '/organization/roles/$roleId'
    | '/organization/secret-sharing/settings'
    | '/admin/resources/machine-identities'
    | '/admin/resources/organizations'
    | '/admin/resources/user-identities'
    | '/projects/cert-management/$projectId'
    | '/projects/kms/$projectId'
    | '/projects/secret-management/$projectId'
    | '/projects/secret-scanning/$projectId'
    | '/projects/ssh/$projectId'
    | '/secret-manager/$projectId/approval'
    | '/organization/settings/oauth/callback'
    | '/integrations/azure-app-configuration/oauth2/callback'
    | '/integrations/azure-key-vault/oauth2/callback'
    | '/integrations/bitbucket/oauth2/callback'
    | '/integrations/gcp-secret-manager/oauth2/callback'
    | '/integrations/github/oauth2/callback'
    | '/integrations/gitlab/oauth2/callback'
    | '/integrations/heroku/oauth2/callback'
    | '/integrations/netlify/oauth2/callback'
    | '/integrations/vercel/oauth2/callback'
    | '/organization/app-connections/$appConnection/oauth/callback'
    | '/projects/cert-management/$projectId/alerting'
    | '/projects/cert-management/$projectId/certificate-authorities'
    | '/projects/cert-management/$projectId/certificates'
    | '/projects/cert-management/$projectId/settings'
    | '/projects/kms/$projectId/kmip'
    | '/projects/kms/$projectId/overview'
    | '/projects/kms/$projectId/settings'
    | '/projects/secret-management/$projectId/allowlist'
    | '/projects/secret-management/$projectId/approval'
    | '/projects/secret-management/$projectId/overview'
    | '/projects/secret-management/$projectId/secret-rotation'
    | '/projects/secret-management/$projectId/settings'
    | '/projects/secret-scanning/$projectId/findings'
    | '/projects/secret-scanning/$projectId/settings'
    | '/projects/ssh/$projectId/cas'
    | '/projects/ssh/$projectId/certificates'
    | '/projects/ssh/$projectId/overview'
    | '/projects/ssh/$projectId/settings'
    | '/projects/cert-management/$projectId/access-management'
    | '/projects/cert-management/$projectId/audit-logs'
    | '/projects/cert-management/$projectId/certificate-templates'
    | '/projects/cert-management/$projectId/subscribers'
    | '/projects/kms/$projectId/access-management'
    | '/projects/kms/$projectId/audit-logs'
    | '/projects/secret-management/$projectId/access-management'
    | '/projects/secret-management/$projectId/audit-logs'
    | '/projects/secret-management/$projectId/integrations'
    | '/projects/secret-scanning/$projectId/access-management'
    | '/projects/secret-scanning/$projectId/audit-logs'
    | '/projects/secret-scanning/$projectId/data-sources'
    | '/projects/ssh/$projectId/access-management'
    | '/projects/ssh/$projectId/audit-logs'
    | '/projects/cert-management/$projectId/certificate-templates/'
    | '/projects/cert-management/$projectId/subscribers/'
    | '/projects/secret-management/$projectId/integrations/'
    | '/projects/secret-scanning/$projectId/data-sources/'
    | '/projects/cert-management/$projectId/ca/$caName'
    | '/projects/cert-management/$projectId/subscribers/$subscriberName'
    | '/projects/secret-management/$projectId/integrations/$integrationId'
    | '/projects/secret-management/$projectId/integrations/select-integration-auth'
    | '/projects/secret-management/$projectId/secrets/$envSlug'
    | '/projects/ssh/$projectId/ca/$caId'
    | '/projects/ssh/$projectId/ssh-host-groups/$sshHostGroupId'
    | '/projects/cert-management/$projectId/groups/$groupId'
    | '/projects/cert-management/$projectId/identities/$identityId'
    | '/projects/cert-management/$projectId/members/$membershipId'
    | '/projects/cert-management/$projectId/pki-collections/$collectionId'
    | '/projects/cert-management/$projectId/roles/$roleSlug'
    | '/projects/kms/$projectId/groups/$groupId'
    | '/projects/kms/$projectId/identities/$identityId'
    | '/projects/kms/$projectId/members/$membershipId'
    | '/projects/kms/$projectId/roles/$roleSlug'
    | '/projects/secret-management/$projectId/groups/$groupId'
    | '/projects/secret-management/$projectId/identities/$identityId'
    | '/projects/secret-management/$projectId/members/$membershipId'
    | '/projects/secret-management/$projectId/roles/$roleSlug'
    | '/projects/secret-scanning/$projectId/groups/$groupId'
    | '/projects/secret-scanning/$projectId/identities/$identityId'
    | '/projects/secret-scanning/$projectId/members/$membershipId'
    | '/projects/secret-scanning/$projectId/roles/$roleSlug'
    | '/projects/ssh/$projectId/groups/$groupId'
    | '/projects/ssh/$projectId/identities/$identityId'
    | '/projects/ssh/$projectId/members/$membershipId'
    | '/projects/ssh/$projectId/roles/$roleSlug'
    | '/projects/secret-management/$projectId/integrations/aws-parameter-store/authorize'
    | '/projects/secret-management/$projectId/integrations/aws-parameter-store/create'
    | '/projects/secret-management/$projectId/integrations/aws-secret-manager/authorize'
    | '/projects/secret-management/$projectId/integrations/aws-secret-manager/create'
    | '/projects/secret-management/$projectId/integrations/azure-app-configuration/create'
    | '/projects/secret-management/$projectId/integrations/azure-devops/authorize'
    | '/projects/secret-management/$projectId/integrations/azure-devops/create'
    | '/projects/secret-management/$projectId/integrations/azure-key-vault/authorize'
    | '/projects/secret-management/$projectId/integrations/azure-key-vault/create'
    | '/projects/secret-management/$projectId/integrations/bitbucket/create'
    | '/projects/secret-management/$projectId/integrations/checkly/authorize'
    | '/projects/secret-management/$projectId/integrations/checkly/create'
    | '/projects/secret-management/$projectId/integrations/circleci/authorize'
    | '/projects/secret-management/$projectId/integrations/circleci/create'
    | '/projects/secret-management/$projectId/integrations/cloud-66/authorize'
    | '/projects/secret-management/$projectId/integrations/cloud-66/create'
    | '/projects/secret-management/$projectId/integrations/cloudflare-pages/authorize'
    | '/projects/secret-management/$projectId/integrations/cloudflare-pages/create'
    | '/projects/secret-management/$projectId/integrations/cloudflare-workers/authorize'
    | '/projects/secret-management/$projectId/integrations/cloudflare-workers/create'
    | '/projects/secret-management/$projectId/integrations/codefresh/authorize'
    | '/projects/secret-management/$projectId/integrations/codefresh/create'
    | '/projects/secret-management/$projectId/integrations/databricks/authorize'
    | '/projects/secret-management/$projectId/integrations/databricks/create'
    | '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/authorize'
    | '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/create'
    | '/projects/secret-management/$projectId/integrations/flyio/authorize'
    | '/projects/secret-management/$projectId/integrations/flyio/create'
    | '/projects/secret-management/$projectId/integrations/gcp-secret-manager/authorize'
    | '/projects/secret-management/$projectId/integrations/gcp-secret-manager/create'
    | '/projects/secret-management/$projectId/integrations/github/auth-mode-selection'
    | '/projects/secret-management/$projectId/integrations/github/create'
    | '/projects/secret-management/$projectId/integrations/gitlab/authorize'
    | '/projects/secret-management/$projectId/integrations/gitlab/create'
    | '/projects/secret-management/$projectId/integrations/hashicorp-vault/authorize'
    | '/projects/secret-management/$projectId/integrations/hashicorp-vault/create'
    | '/projects/secret-management/$projectId/integrations/hasura-cloud/authorize'
    | '/projects/secret-management/$projectId/integrations/hasura-cloud/create'
    | '/projects/secret-management/$projectId/integrations/heroku/create'
    | '/projects/secret-management/$projectId/integrations/laravel-forge/authorize'
    | '/projects/secret-management/$projectId/integrations/laravel-forge/create'
    | '/projects/secret-management/$projectId/integrations/netlify/create'
    | '/projects/secret-management/$projectId/integrations/northflank/authorize'
    | '/projects/secret-management/$projectId/integrations/northflank/create'
    | '/projects/secret-management/$projectId/integrations/octopus-deploy/authorize'
    | '/projects/secret-management/$projectId/integrations/octopus-deploy/create'
    | '/projects/secret-management/$projectId/integrations/qovery/authorize'
    | '/projects/secret-management/$projectId/integrations/qovery/create'
    | '/projects/secret-management/$projectId/integrations/railway/authorize'
    | '/projects/secret-management/$projectId/integrations/railway/create'
    | '/projects/secret-management/$projectId/integrations/render/authorize'
    | '/projects/secret-management/$projectId/integrations/render/create'
    | '/projects/secret-management/$projectId/integrations/rundeck/authorize'
    | '/projects/secret-management/$projectId/integrations/rundeck/create'
    | '/projects/secret-management/$projectId/integrations/supabase/authorize'
    | '/projects/secret-management/$projectId/integrations/supabase/create'
    | '/projects/secret-management/$projectId/integrations/teamcity/authorize'
    | '/projects/secret-management/$projectId/integrations/teamcity/create'
    | '/projects/secret-management/$projectId/integrations/terraform-cloud/authorize'
    | '/projects/secret-management/$projectId/integrations/terraform-cloud/create'
    | '/projects/secret-management/$projectId/integrations/travisci/authorize'
    | '/projects/secret-management/$projectId/integrations/travisci/create'
    | '/projects/secret-management/$projectId/integrations/vercel/create'
    | '/projects/secret-management/$projectId/integrations/windmill/authorize'
    | '/projects/secret-management/$projectId/integrations/windmill/create'
    | '/projects/secret-scanning/$projectId/data-sources/$type/$dataSourceId'
    | '/projects/secret-management/$projectId/commits/$environment/$folderId'
    | '/projects/secret-management/$projectId/commits/$environment/$folderId/'
    | '/projects/secret-management/$projectId/integrations/azure-app-configuration/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/azure-key-vault/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/bitbucket/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/gcp-secret-manager/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/github/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/gitlab/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/heroku/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/netlify/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/secret-syncs/$destination/$syncId'
    | '/projects/secret-management/$projectId/integrations/vercel/oauth2/callback'
    | '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId'
    | '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId/'
    | '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId/restore'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cli-redirect'
    | '/share-secret'
    | ''
    | '/password-setup'
    | '/email-not-verified'
    | '/password-reset'
    | '/requestnewinvite'
    | '/signupinvite'
    | '/verify-email'
    | '/personal-settings'
    | '/login'
    | '/signup'
    | '/organization/none'
    | '/admin/signup'
    | '/login/admin'
    | '/login/ldap'
    | '/login/select-organization'
    | '/login/sso'
    | '/signup/sso'
    | '/secret-request/secret/$secretRequestId'
    | '/shared/secret/$secretId'
    | '/admin'
    | '/login/provider/error'
    | '/login/provider/success'
    | '/integrations'
    | '/organization'
    | '/organization/access-management'
    | '/organization/admin'
    | '/organization/audit-logs'
    | '/organization/billing'
    | '/organization/projects'
    | '/admin/authentication'
    | '/admin/caching'
    | '/admin/encryption'
    | '/admin/environment'
    | '/admin/integrations'
    | '/secret-manager/$projectId'
    | '/organization/app-connections'
    | '/organization/gateways'
    | '/organization/secret-sharing'
    | '/organization/settings'
    | '/organization/groups/$groupId'
    | '/organization/identities/$identityId'
    | '/organization/members/$membershipId'
    | '/organization/roles/$roleId'
    | '/organization/secret-sharing/settings'
    | '/admin/resources/machine-identities'
    | '/admin/resources/organizations'
    | '/admin/resources/user-identities'
    | '/projects/cert-management/$projectId'
    | '/projects/kms/$projectId'
    | '/projects/secret-management/$projectId'
    | '/projects/secret-scanning/$projectId'
    | '/projects/ssh/$projectId'
    | '/secret-manager/$projectId/approval'
    | '/organization/settings/oauth/callback'
    | '/integrations/azure-app-configuration/oauth2/callback'
    | '/integrations/azure-key-vault/oauth2/callback'
    | '/integrations/bitbucket/oauth2/callback'
    | '/integrations/gcp-secret-manager/oauth2/callback'
    | '/integrations/github/oauth2/callback'
    | '/integrations/gitlab/oauth2/callback'
    | '/integrations/heroku/oauth2/callback'
    | '/integrations/netlify/oauth2/callback'
    | '/integrations/vercel/oauth2/callback'
    | '/organization/app-connections/$appConnection/oauth/callback'
    | '/projects/cert-management/$projectId/alerting'
    | '/projects/cert-management/$projectId/certificate-authorities'
    | '/projects/cert-management/$projectId/certificates'
    | '/projects/cert-management/$projectId/settings'
    | '/projects/kms/$projectId/kmip'
    | '/projects/kms/$projectId/overview'
    | '/projects/kms/$projectId/settings'
    | '/projects/secret-management/$projectId/allowlist'
    | '/projects/secret-management/$projectId/approval'
    | '/projects/secret-management/$projectId/overview'
    | '/projects/secret-management/$projectId/secret-rotation'
    | '/projects/secret-management/$projectId/settings'
    | '/projects/secret-scanning/$projectId/findings'
    | '/projects/secret-scanning/$projectId/settings'
    | '/projects/ssh/$projectId/cas'
    | '/projects/ssh/$projectId/certificates'
    | '/projects/ssh/$projectId/overview'
    | '/projects/ssh/$projectId/settings'
    | '/projects/cert-management/$projectId/access-management'
    | '/projects/cert-management/$projectId/audit-logs'
    | '/projects/kms/$projectId/access-management'
    | '/projects/kms/$projectId/audit-logs'
    | '/projects/secret-management/$projectId/access-management'
    | '/projects/secret-management/$projectId/audit-logs'
    | '/projects/secret-scanning/$projectId/access-management'
    | '/projects/secret-scanning/$projectId/audit-logs'
    | '/projects/ssh/$projectId/access-management'
    | '/projects/ssh/$projectId/audit-logs'
    | '/projects/cert-management/$projectId/certificate-templates'
    | '/projects/cert-management/$projectId/subscribers'
    | '/projects/secret-management/$projectId/integrations'
    | '/projects/secret-scanning/$projectId/data-sources'
    | '/projects/cert-management/$projectId/ca/$caName'
    | '/projects/cert-management/$projectId/subscribers/$subscriberName'
    | '/projects/secret-management/$projectId/integrations/$integrationId'
    | '/projects/secret-management/$projectId/integrations/select-integration-auth'
    | '/projects/secret-management/$projectId/secrets/$envSlug'
    | '/projects/ssh/$projectId/ca/$caId'
    | '/projects/ssh/$projectId/ssh-host-groups/$sshHostGroupId'
    | '/projects/cert-management/$projectId/groups/$groupId'
    | '/projects/cert-management/$projectId/identities/$identityId'
    | '/projects/cert-management/$projectId/members/$membershipId'
    | '/projects/cert-management/$projectId/pki-collections/$collectionId'
    | '/projects/cert-management/$projectId/roles/$roleSlug'
    | '/projects/kms/$projectId/groups/$groupId'
    | '/projects/kms/$projectId/identities/$identityId'
    | '/projects/kms/$projectId/members/$membershipId'
    | '/projects/kms/$projectId/roles/$roleSlug'
    | '/projects/secret-management/$projectId/groups/$groupId'
    | '/projects/secret-management/$projectId/identities/$identityId'
    | '/projects/secret-management/$projectId/members/$membershipId'
    | '/projects/secret-management/$projectId/roles/$roleSlug'
    | '/projects/secret-scanning/$projectId/groups/$groupId'
    | '/projects/secret-scanning/$projectId/identities/$identityId'
    | '/projects/secret-scanning/$projectId/members/$membershipId'
    | '/projects/secret-scanning/$projectId/roles/$roleSlug'
    | '/projects/ssh/$projectId/groups/$groupId'
    | '/projects/ssh/$projectId/identities/$identityId'
    | '/projects/ssh/$projectId/members/$membershipId'
    | '/projects/ssh/$projectId/roles/$roleSlug'
    | '/projects/secret-management/$projectId/integrations/aws-parameter-store/authorize'
    | '/projects/secret-management/$projectId/integrations/aws-parameter-store/create'
    | '/projects/secret-management/$projectId/integrations/aws-secret-manager/authorize'
    | '/projects/secret-management/$projectId/integrations/aws-secret-manager/create'
    | '/projects/secret-management/$projectId/integrations/azure-app-configuration/create'
    | '/projects/secret-management/$projectId/integrations/azure-devops/authorize'
    | '/projects/secret-management/$projectId/integrations/azure-devops/create'
    | '/projects/secret-management/$projectId/integrations/azure-key-vault/authorize'
    | '/projects/secret-management/$projectId/integrations/azure-key-vault/create'
    | '/projects/secret-management/$projectId/integrations/bitbucket/create'
    | '/projects/secret-management/$projectId/integrations/checkly/authorize'
    | '/projects/secret-management/$projectId/integrations/checkly/create'
    | '/projects/secret-management/$projectId/integrations/circleci/authorize'
    | '/projects/secret-management/$projectId/integrations/circleci/create'
    | '/projects/secret-management/$projectId/integrations/cloud-66/authorize'
    | '/projects/secret-management/$projectId/integrations/cloud-66/create'
    | '/projects/secret-management/$projectId/integrations/cloudflare-pages/authorize'
    | '/projects/secret-management/$projectId/integrations/cloudflare-pages/create'
    | '/projects/secret-management/$projectId/integrations/cloudflare-workers/authorize'
    | '/projects/secret-management/$projectId/integrations/cloudflare-workers/create'
    | '/projects/secret-management/$projectId/integrations/codefresh/authorize'
    | '/projects/secret-management/$projectId/integrations/codefresh/create'
    | '/projects/secret-management/$projectId/integrations/databricks/authorize'
    | '/projects/secret-management/$projectId/integrations/databricks/create'
    | '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/authorize'
    | '/projects/secret-management/$projectId/integrations/digital-ocean-app-platform/create'
    | '/projects/secret-management/$projectId/integrations/flyio/authorize'
    | '/projects/secret-management/$projectId/integrations/flyio/create'
    | '/projects/secret-management/$projectId/integrations/gcp-secret-manager/authorize'
    | '/projects/secret-management/$projectId/integrations/gcp-secret-manager/create'
    | '/projects/secret-management/$projectId/integrations/github/auth-mode-selection'
    | '/projects/secret-management/$projectId/integrations/github/create'
    | '/projects/secret-management/$projectId/integrations/gitlab/authorize'
    | '/projects/secret-management/$projectId/integrations/gitlab/create'
    | '/projects/secret-management/$projectId/integrations/hashicorp-vault/authorize'
    | '/projects/secret-management/$projectId/integrations/hashicorp-vault/create'
    | '/projects/secret-management/$projectId/integrations/hasura-cloud/authorize'
    | '/projects/secret-management/$projectId/integrations/hasura-cloud/create'
    | '/projects/secret-management/$projectId/integrations/heroku/create'
    | '/projects/secret-management/$projectId/integrations/laravel-forge/authorize'
    | '/projects/secret-management/$projectId/integrations/laravel-forge/create'
    | '/projects/secret-management/$projectId/integrations/netlify/create'
    | '/projects/secret-management/$projectId/integrations/northflank/authorize'
    | '/projects/secret-management/$projectId/integrations/northflank/create'
    | '/projects/secret-management/$projectId/integrations/octopus-deploy/authorize'
    | '/projects/secret-management/$projectId/integrations/octopus-deploy/create'
    | '/projects/secret-management/$projectId/integrations/qovery/authorize'
    | '/projects/secret-management/$projectId/integrations/qovery/create'
    | '/projects/secret-management/$projectId/integrations/railway/authorize'
    | '/projects/secret-management/$projectId/integrations/railway/create'
    | '/projects/secret-management/$projectId/integrations/render/authorize'
    | '/projects/secret-management/$projectId/integrations/render/create'
    | '/projects/secret-management/$projectId/integrations/rundeck/authorize'
    | '/projects/secret-management/$projectId/integrations/rundeck/create'
    | '/projects/secret-management/$projectId/integrations/supabase/authorize'
    | '/projects/secret-management/$projectId/integrations/supabase/create'
    | '/projects/secret-management/$projectId/integrations/teamcity/authorize'
    | '/projects/secret-management/$projectId/integrations/teamcity/create'
    | '/projects/secret-management/$projectId/integrations/terraform-cloud/authorize'
    | '/projects/secret-management/$projectId/integrations/terraform-cloud/create'
    | '/projects/secret-management/$projectId/integrations/travisci/authorize'
    | '/projects/secret-management/$projectId/integrations/travisci/create'
    | '/projects/secret-management/$projectId/integrations/vercel/create'
    | '/projects/secret-management/$projectId/integrations/windmill/authorize'
    | '/projects/secret-management/$projectId/integrations/windmill/create'
    | '/projects/secret-scanning/$projectId/data-sources/$type/$dataSourceId'
    | '/projects/secret-management/$projectId/commits/$environment/$folderId'
    | '/projects/secret-management/$projectId/integrations/azure-app-configuration/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/azure-key-vault/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/bitbucket/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/gcp-secret-manager/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/github/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/gitlab/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/heroku/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/netlify/oauth2/callback'
    | '/projects/secret-management/$projectId/integrations/secret-syncs/$destination/$syncId'
    | '/projects/secret-management/$projectId/integrations/vercel/oauth2/callback'
    | '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId'
    | '/projects/secret-management/$projectId/commits/$environment/$folderId/$commitId/restore'
  id:
    | '__root__'
    | '/'
    | '/cli-redirect'
    | '/share-secret'
    | '/_authenticate'
    | '/_restrict-login-signup'
    | '/_authenticate/password-setup'
    | '/_restrict-login-signup/email-not-verified'
    | '/_restrict-login-signup/password-reset'
    | '/_restrict-login-signup/requestnewinvite'
    | '/_restrict-login-signup/signupinvite'
    | '/_restrict-login-signup/verify-email'
    | '/_authenticate/_inject-org-details'
    | '/_authenticate/personal-settings'
    | '/_restrict-login-signup/login'
    | '/_restrict-login-signup/signup'
    | '/_restrict-login-signup/login/'
    | '/_restrict-login-signup/signup/'
    | '/_authenticate/organization/none'
    | '/_restrict-login-signup/admin/signup'
    | '/_restrict-login-signup/login/admin'
    | '/_restrict-login-signup/login/ldap'
    | '/_restrict-login-signup/login/select-organization'
    | '/_restrict-login-signup/login/sso'
    | '/_restrict-login-signup/signup/sso'
    | '/secret-request/secret/$secretRequestId'
    | '/shared/secret/$secretId'
    | '/_authenticate/_inject-org-details/_org-layout'
    | '/_authenticate/_inject-org-details/admin'
    | '/_authenticate/personal-settings/_layout'
    | '/_authenticate/personal-settings/_layout/'
    | '/_restrict-login-signup/login/provider/error'
    | '/_restrict-login-signup/login/provider/success'
    | '/_authenticate/_inject-org-details/_org-layout/integrations'
    | '/_authenticate/_inject-org-details/_org-layout/organization'
    | '/_authenticate/_inject-org-details/admin/_admin-layout'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/'
    | '/_authenticate/_inject-org-details/_org-layout/organization/access-management'
    | '/_authenticate/_inject-org-details/_org-layout/organization/admin'
    | '/_authenticate/_inject-org-details/_org-layout/organization/audit-logs'
    | '/_authenticate/_inject-org-details/_org-layout/organization/billing'
    | '/_authenticate/_inject-org-details/_org-layout/organization/projects'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/authentication'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/caching'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/encryption'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/environment'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/integrations'
    | '/_authenticate/_inject-org-details/_org-layout/organization/app-connections'
    | '/_authenticate/_inject-org-details/_org-layout/organization/gateways'
    | '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing'
    | '/_authenticate/_inject-org-details/_org-layout/organization/settings'
    | '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId'
    | '/_authenticate/_inject-org-details/_org-layout/organization/app-connections/'
    | '/_authenticate/_inject-org-details/_org-layout/organization/gateways/'
    | '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/'
    | '/_authenticate/_inject-org-details/_org-layout/organization/settings/'
    | '/_authenticate/_inject-org-details/_org-layout/organization/groups/$groupId'
    | '/_authenticate/_inject-org-details/_org-layout/organization/identities/$identityId'
    | '/_authenticate/_inject-org-details/_org-layout/organization/members/$membershipId'
    | '/_authenticate/_inject-org-details/_org-layout/organization/roles/$roleId'
    | '/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/settings'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/resources/machine-identities'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/resources/organizations'
    | '/_authenticate/_inject-org-details/admin/_admin-layout/resources/user-identities'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId'
    | '/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId/approval'
    | '/_authenticate/_inject-org-details/_org-layout/organization/settings/oauth/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/azure-app-configuration/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/azure-key-vault/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/bitbucket/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/gcp-secret-manager/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/github/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/gitlab/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/heroku/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/netlify/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/integrations/vercel/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout'
    | '/_authenticate/_inject-org-details/_org-layout/organization/app-connections/$appConnection/oauth/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/alerting'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-authorities'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificates'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/settings'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/kmip'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/overview'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/settings'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/allowlist'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/approval'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/overview'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secret-rotation'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/settings'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/findings'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/settings'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/cas'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/certificates'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/overview'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/settings'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/access-management'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/audit-logs'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/access-management'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/audit-logs'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/access-management'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/audit-logs'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/access-management'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/audit-logs'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/access-management'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/audit-logs'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates/'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/ca/$caName'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/$subscriberName'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/$integrationId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/select-integration-auth'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secrets/$envSlug'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ca/$caId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ssh-host-groups/$sshHostGroupId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/groups/$groupId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/identities/$identityId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/members/$membershipId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/pki-collections/$collectionId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/roles/$roleSlug'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/groups/$groupId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/identities/$identityId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/members/$membershipId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/roles/$roleSlug'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/groups/$groupId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/identities/$identityId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/members/$membershipId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/roles/$roleSlug'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/groups/$groupId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/identities/$identityId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/members/$membershipId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/roles/$roleSlug'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/groups/$groupId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/identities/$identityId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/members/$membershipId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/roles/$roleSlug'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/auth-mode-selection'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/authorize'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/create'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/$type/$dataSourceId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/secret-syncs/$destination/$syncId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/oauth2/callback'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/'
    | '/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/restore'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  indexRoute: typeof indexRoute
  authCliRedirectPageRouteRoute: typeof authCliRedirectPageRouteRoute
  publicShareSecretPageRouteRoute: typeof publicShareSecretPageRouteRoute
  middlewaresAuthenticateRoute: typeof middlewaresAuthenticateRouteWithChildren
  middlewaresRestrictLoginSignupRoute: typeof middlewaresRestrictLoginSignupRouteWithChildren
  publicViewSecretRequestByIDPageRouteRoute: typeof publicViewSecretRequestByIDPageRouteRoute
  publicViewSharedSecretByIDPageRouteRoute: typeof publicViewSharedSecretByIDPageRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  indexRoute: indexRoute,
  authCliRedirectPageRouteRoute: authCliRedirectPageRouteRoute,
  publicShareSecretPageRouteRoute: publicShareSecretPageRouteRoute,
  middlewaresAuthenticateRoute: middlewaresAuthenticateRouteWithChildren,
  middlewaresRestrictLoginSignupRoute:
    middlewaresRestrictLoginSignupRouteWithChildren,
  publicViewSecretRequestByIDPageRouteRoute:
    publicViewSecretRequestByIDPageRouteRoute,
  publicViewSharedSecretByIDPageRouteRoute:
    publicViewSharedSecretByIDPageRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "root.tsx",
      "children": [
        "/",
        "/cli-redirect",
        "/share-secret",
        "/_authenticate",
        "/_restrict-login-signup",
        "/secret-request/secret/$secretRequestId",
        "/shared/secret/$secretId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cli-redirect": {
      "filePath": "auth/CliRedirectPage/route.tsx"
    },
    "/share-secret": {
      "filePath": "public/ShareSecretPage/route.tsx"
    },
    "/_authenticate": {
      "filePath": "middlewares/authenticate.tsx",
      "children": [
        "/_authenticate/password-setup",
        "/_authenticate/_inject-org-details",
        "/_authenticate/personal-settings",
        "/_authenticate/organization/none"
      ]
    },
    "/_restrict-login-signup": {
      "filePath": "middlewares/restrict-login-signup.tsx",
      "children": [
        "/_restrict-login-signup/email-not-verified",
        "/_restrict-login-signup/password-reset",
        "/_restrict-login-signup/requestnewinvite",
        "/_restrict-login-signup/signupinvite",
        "/_restrict-login-signup/verify-email",
        "/_restrict-login-signup/login",
        "/_restrict-login-signup/signup",
        "/_restrict-login-signup/admin/signup"
      ]
    },
    "/_authenticate/password-setup": {
      "filePath": "auth/PasswordSetupPage/route.tsx",
      "parent": "/_authenticate"
    },
    "/_restrict-login-signup/email-not-verified": {
      "filePath": "auth/EmailNotVerifiedPage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/password-reset": {
      "filePath": "auth/PasswordResetPage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/requestnewinvite": {
      "filePath": "auth/RequestNewInvitePage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/signupinvite": {
      "filePath": "auth/SignUpInvitePage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/verify-email": {
      "filePath": "auth/VerifyEmailPage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_authenticate/_inject-org-details": {
      "filePath": "middlewares/inject-org-details.tsx",
      "parent": "/_authenticate",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout",
        "/_authenticate/_inject-org-details/admin"
      ]
    },
    "/_authenticate/personal-settings": {
      "filePath": "",
      "parent": "/_authenticate",
      "children": [
        "/_authenticate/personal-settings/_layout"
      ]
    },
    "/_restrict-login-signup/login": {
      "filePath": "",
      "parent": "/_restrict-login-signup",
      "children": [
        "/_restrict-login-signup/login/",
        "/_restrict-login-signup/login/admin",
        "/_restrict-login-signup/login/ldap",
        "/_restrict-login-signup/login/select-organization",
        "/_restrict-login-signup/login/sso",
        "/_restrict-login-signup/login/provider/error",
        "/_restrict-login-signup/login/provider/success"
      ]
    },
    "/_restrict-login-signup/signup": {
      "filePath": "",
      "parent": "/_restrict-login-signup",
      "children": [
        "/_restrict-login-signup/signup/",
        "/_restrict-login-signup/signup/sso"
      ]
    },
    "/_restrict-login-signup/login/": {
      "filePath": "auth/LoginPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/signup/": {
      "filePath": "auth/SignUpPage/route.tsx",
      "parent": "/_restrict-login-signup/signup"
    },
    "/_authenticate/organization/none": {
      "filePath": "organization/NoOrgPage/route.tsx",
      "parent": "/_authenticate"
    },
    "/_restrict-login-signup/admin/signup": {
      "filePath": "admin/SignUpPage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/login/admin": {
      "filePath": "auth/AdminLoginPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/login/ldap": {
      "filePath": "auth/LoginLdapPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/login/select-organization": {
      "filePath": "auth/SelectOrgPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/login/sso": {
      "filePath": "auth/LoginSsoPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/signup/sso": {
      "filePath": "auth/SignUpSsoPage/route.tsx",
      "parent": "/_restrict-login-signup/signup"
    },
    "/secret-request/secret/$secretRequestId": {
      "filePath": "public/ViewSecretRequestByIDPage/route.tsx"
    },
    "/shared/secret/$secretId": {
      "filePath": "public/ViewSharedSecretByIDPage/route.tsx"
    },
    "/_authenticate/_inject-org-details/_org-layout": {
      "filePath": "organization/layout.tsx",
      "parent": "/_authenticate/_inject-org-details",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/integrations",
        "/_authenticate/_inject-org-details/_org-layout/organization",
        "/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId"
      ]
    },
    "/_authenticate/_inject-org-details/admin": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details",
      "children": [
        "/_authenticate/_inject-org-details/admin/_admin-layout"
      ]
    },
    "/_authenticate/personal-settings/_layout": {
      "filePath": "user/layout.tsx",
      "parent": "/_authenticate/personal-settings",
      "children": [
        "/_authenticate/personal-settings/_layout/"
      ]
    },
    "/_authenticate/personal-settings/_layout/": {
      "filePath": "user/PersonalSettingsPage/route.tsx",
      "parent": "/_authenticate/personal-settings/_layout"
    },
    "/_restrict-login-signup/login/provider/error": {
      "filePath": "auth/ProviderErrorPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/login/provider/success": {
      "filePath": "auth/ProviderSuccessPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/integrations/azure-app-configuration/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/integrations/azure-key-vault/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/integrations/bitbucket/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/integrations/gcp-secret-manager/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/integrations/github/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/integrations/gitlab/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/integrations/heroku/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/integrations/netlify/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/integrations/vercel/oauth2/callback"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/organization": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/organization/access-management",
        "/_authenticate/_inject-org-details/_org-layout/organization/admin",
        "/_authenticate/_inject-org-details/_org-layout/organization/audit-logs",
        "/_authenticate/_inject-org-details/_org-layout/organization/billing",
        "/_authenticate/_inject-org-details/_org-layout/organization/projects",
        "/_authenticate/_inject-org-details/_org-layout/organization/app-connections",
        "/_authenticate/_inject-org-details/_org-layout/organization/gateways",
        "/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing",
        "/_authenticate/_inject-org-details/_org-layout/organization/settings",
        "/_authenticate/_inject-org-details/_org-layout/organization/groups/$groupId",
        "/_authenticate/_inject-org-details/_org-layout/organization/identities/$identityId",
        "/_authenticate/_inject-org-details/_org-layout/organization/members/$membershipId",
        "/_authenticate/_inject-org-details/_org-layout/organization/roles/$roleId"
      ]
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout": {
      "filePath": "admin/layout.tsx",
      "parent": "/_authenticate/_inject-org-details/admin",
      "children": [
        "/_authenticate/_inject-org-details/admin/_admin-layout/",
        "/_authenticate/_inject-org-details/admin/_admin-layout/authentication",
        "/_authenticate/_inject-org-details/admin/_admin-layout/caching",
        "/_authenticate/_inject-org-details/admin/_admin-layout/encryption",
        "/_authenticate/_inject-org-details/admin/_admin-layout/environment",
        "/_authenticate/_inject-org-details/admin/_admin-layout/integrations",
        "/_authenticate/_inject-org-details/admin/_admin-layout/resources/machine-identities",
        "/_authenticate/_inject-org-details/admin/_admin-layout/resources/organizations",
        "/_authenticate/_inject-org-details/admin/_admin-layout/resources/user-identities"
      ]
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/": {
      "filePath": "admin/GeneralPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/access-management": {
      "filePath": "organization/AccessManagementPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/admin": {
      "filePath": "organization/AdminPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/audit-logs": {
      "filePath": "organization/AuditLogsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/billing": {
      "filePath": "organization/BillingPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/projects": {
      "filePath": "organization/ProjectsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/authentication": {
      "filePath": "admin/AuthenticationPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/caching": {
      "filePath": "admin/CachingPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/encryption": {
      "filePath": "admin/EncryptionPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/environment": {
      "filePath": "admin/EnvironmentPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/integrations": {
      "filePath": "admin/IntegrationsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/app-connections": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/organization/app-connections/",
        "/_authenticate/_inject-org-details/_org-layout/organization/app-connections/$appConnection/oauth/callback"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/gateways": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/organization/gateways/"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/",
        "/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/settings"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/settings": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/organization/settings/",
        "/_authenticate/_inject-org-details/_org-layout/organization/settings/oauth/callback"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId/approval"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/app-connections/": {
      "filePath": "organization/AppConnections/AppConnectionsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization/app-connections"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/gateways/": {
      "filePath": "organization/Gateways/GatewayListPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization/gateways"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/": {
      "filePath": "organization/SecretSharingPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/settings/": {
      "filePath": "organization/SettingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization/settings"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/groups/$groupId": {
      "filePath": "organization/GroupDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/identities/$identityId": {
      "filePath": "organization/IdentityDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/members/$membershipId": {
      "filePath": "organization/UserDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/roles/$roleId": {
      "filePath": "organization/RoleByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing/settings": {
      "filePath": "organization/SecretSharingSettingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization/secret-sharing"
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/resources/machine-identities": {
      "filePath": "admin/MachineIdentitiesResourcesPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/resources/organizations": {
      "filePath": "admin/OrganizationResourcesPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/admin/_admin-layout/resources/user-identities": {
      "filePath": "admin/UserIdentitiesResourcesPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/admin/_admin-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId/approval": {
      "filePath": "secret-manager/redirects/redirect-approval-page.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/secret-manager/$projectId"
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/settings/oauth/callback": {
      "filePath": "organization/SettingsPage/OauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization/settings"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/azure-app-configuration/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-azure-app-configurations-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/azure-key-vault/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-azure-key-vault-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/bitbucket/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-bitbucket-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/gcp-secret-manager/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-gcp-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/github/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-github-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/gitlab/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-gitlab-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/heroku/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-heroku-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/netlify/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-netlify-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/integrations/vercel/oauth2/callback": {
      "filePath": "secret-manager/integrations/route-vercel-oauth-redirect.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout": {
      "filePath": "cert-manager/layout.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/alerting",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-authorities",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificates",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/settings",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/access-management",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/audit-logs",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/ca/$caName",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/groups/$groupId",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/identities/$identityId",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/members/$membershipId",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/pki-collections/$collectionId",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/roles/$roleSlug"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout": {
      "filePath": "kms/layout.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/kmip",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/overview",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/settings",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/access-management",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/audit-logs",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/groups/$groupId",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/identities/$identityId",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/members/$membershipId",
        "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/roles/$roleSlug"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout": {
      "filePath": "secret-manager/layout.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/allowlist",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/approval",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/overview",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secret-rotation",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/settings",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/access-management",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/audit-logs",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secrets/$envSlug",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/groups/$groupId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/identities/$identityId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/members/$membershipId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/roles/$roleSlug",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout": {
      "filePath": "secret-scanning/layout.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/findings",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/settings",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/access-management",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/audit-logs",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/groups/$groupId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/identities/$identityId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/members/$membershipId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/roles/$roleSlug"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout": {
      "filePath": "ssh/layout.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/cas",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/certificates",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/overview",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/settings",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/access-management",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/audit-logs",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ca/$caId",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ssh-host-groups/$sshHostGroupId",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/groups/$groupId",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/identities/$identityId",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/members/$membershipId",
        "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/roles/$roleSlug"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/organization/app-connections/$appConnection/oauth/callback": {
      "filePath": "organization/AppConnections/OauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/organization/app-connections"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/alerting": {
      "filePath": "cert-manager/AlertingPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-authorities": {
      "filePath": "cert-manager/CertificateAuthoritiesPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificates": {
      "filePath": "cert-manager/CertificatesPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/settings": {
      "filePath": "cert-manager/SettingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/kmip": {
      "filePath": "kms/KmipPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/overview": {
      "filePath": "kms/OverviewPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/settings": {
      "filePath": "kms/SettingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/allowlist": {
      "filePath": "secret-manager/IPAllowlistPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/approval": {
      "filePath": "secret-manager/SecretApprovalsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/overview": {
      "filePath": "secret-manager/OverviewPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secret-rotation": {
      "filePath": "secret-manager/SecretRotationPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/settings": {
      "filePath": "secret-manager/SettingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/findings": {
      "filePath": "secret-scanning/SecretScanningFindingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/settings": {
      "filePath": "secret-scanning/SettingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/cas": {
      "filePath": "ssh/SshCasPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/certificates": {
      "filePath": "ssh/SshCertsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/overview": {
      "filePath": "ssh/SshHostsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/settings": {
      "filePath": "ssh/SettingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/access-management": {
      "filePath": "project/AccessControlPage/route-cert-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/audit-logs": {
      "filePath": "project/AuditLogsPage/route-cert-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates/"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/",
        "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/$subscriberName"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/access-management": {
      "filePath": "project/AccessControlPage/route-kms.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/audit-logs": {
      "filePath": "project/AuditLogsPage/route-kms.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/access-management": {
      "filePath": "project/AccessControlPage/route-secret-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/audit-logs": {
      "filePath": "project/AuditLogsPage/route-secret-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/$integrationId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/select-integration-auth",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/auth-mode-selection",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/authorize",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/create",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/oauth2/callback",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/secret-syncs/$destination/$syncId",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/oauth2/callback"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/access-management": {
      "filePath": "project/AccessControlPage/route-secret-scanning.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/audit-logs": {
      "filePath": "project/AuditLogsPage/route-secret-scanning.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/$type/$dataSourceId"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/access-management": {
      "filePath": "project/AccessControlPage/route-ssh.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/audit-logs": {
      "filePath": "project/AuditLogsPage/route-ssh.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates/": {
      "filePath": "cert-manager/PkiTemplateListPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/certificate-templates"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/": {
      "filePath": "cert-manager/PkiSubscribersPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/": {
      "filePath": "secret-manager/IntegrationsListPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/": {
      "filePath": "secret-scanning/SecretScanningDataSourcesPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/ca/$caName": {
      "filePath": "cert-manager/CertAuthDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers/$subscriberName": {
      "filePath": "cert-manager/PkiSubscriberDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/subscribers"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/$integrationId": {
      "filePath": "secret-manager/IntegrationsDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/select-integration-auth": {
      "filePath": "secret-manager/integrations/SelectIntegrationAuthPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/secrets/$envSlug": {
      "filePath": "secret-manager/SecretDashboardPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ca/$caId": {
      "filePath": "ssh/SshCaByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/ssh-host-groups/$sshHostGroupId": {
      "filePath": "ssh/SshHostGroupDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/groups/$groupId": {
      "filePath": "project/GroupDetailsByIDPage/route-cert-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/identities/$identityId": {
      "filePath": "project/IdentityDetailsByIDPage/route-cert-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/members/$membershipId": {
      "filePath": "project/MemberDetailsByIDPage/route-cert-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/pki-collections/$collectionId": {
      "filePath": "cert-manager/PkiCollectionDetailsByIDPage/routes.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout/roles/$roleSlug": {
      "filePath": "project/RoleDetailsBySlugPage/route-cert-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/cert-management/$projectId/_cert-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/groups/$groupId": {
      "filePath": "project/GroupDetailsByIDPage/route-kms.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/identities/$identityId": {
      "filePath": "project/IdentityDetailsByIDPage/route-kms.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/members/$membershipId": {
      "filePath": "project/MemberDetailsByIDPage/route-kms.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout/roles/$roleSlug": {
      "filePath": "project/RoleDetailsBySlugPage/route-kms.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/kms/$projectId/_kms-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/groups/$groupId": {
      "filePath": "project/GroupDetailsByIDPage/route-secret-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/identities/$identityId": {
      "filePath": "project/IdentityDetailsByIDPage/route-secret-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/members/$membershipId": {
      "filePath": "project/MemberDetailsByIDPage/route-secret-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/roles/$roleSlug": {
      "filePath": "project/RoleDetailsBySlugPage/route-secret-manager.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/groups/$groupId": {
      "filePath": "project/GroupDetailsByIDPage/route-secret-scanning.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/identities/$identityId": {
      "filePath": "project/IdentityDetailsByIDPage/route-secret-scanning.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/members/$membershipId": {
      "filePath": "project/MemberDetailsByIDPage/route-secret-scanning.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/roles/$roleSlug": {
      "filePath": "project/RoleDetailsBySlugPage/route-secret-scanning.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/groups/$groupId": {
      "filePath": "project/GroupDetailsByIDPage/route-ssh.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/identities/$identityId": {
      "filePath": "project/IdentityDetailsByIDPage/route-ssh.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/members/$membershipId": {
      "filePath": "project/MemberDetailsByIDPage/route-ssh.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout/roles/$roleSlug": {
      "filePath": "project/RoleDetailsBySlugPage/route-ssh.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/ssh/$projectId/_ssh-layout"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/authorize": {
      "filePath": "secret-manager/integrations/AwsParameterStoreAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-parameter-store/create": {
      "filePath": "secret-manager/integrations/AwsParameterStoreConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/authorize": {
      "filePath": "secret-manager/integrations/AwsSecretManagerAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/aws-secret-manager/create": {
      "filePath": "secret-manager/integrations/AwsSecretManagerConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/create": {
      "filePath": "secret-manager/integrations/AzureAppConfigurationConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/authorize": {
      "filePath": "secret-manager/integrations/AzureDevopsAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-devops/create": {
      "filePath": "secret-manager/integrations/AzureDevopsConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/authorize": {
      "filePath": "secret-manager/integrations/AzureKeyVaultAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/create": {
      "filePath": "secret-manager/integrations/AzureKeyVaultConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/create": {
      "filePath": "secret-manager/integrations/BitbucketConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/authorize": {
      "filePath": "secret-manager/integrations/ChecklyAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/checkly/create": {
      "filePath": "secret-manager/integrations/ChecklyConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/authorize": {
      "filePath": "secret-manager/integrations/CircleCIAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/circleci/create": {
      "filePath": "secret-manager/integrations/CircleCIConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/authorize": {
      "filePath": "secret-manager/integrations/Cloud66AuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloud-66/create": {
      "filePath": "secret-manager/integrations/Cloud66ConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/authorize": {
      "filePath": "secret-manager/integrations/CloudflarePagesAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-pages/create": {
      "filePath": "secret-manager/integrations/CloudflarePagesConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/authorize": {
      "filePath": "secret-manager/integrations/CloudflareWorkersAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/cloudflare-workers/create": {
      "filePath": "secret-manager/integrations/CloudflareWorkersConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/authorize": {
      "filePath": "secret-manager/integrations/CodefreshAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/codefresh/create": {
      "filePath": "secret-manager/integrations/CodefreshConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/authorize": {
      "filePath": "secret-manager/integrations/DatabricksAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/databricks/create": {
      "filePath": "secret-manager/integrations/DatabricksConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/authorize": {
      "filePath": "secret-manager/integrations/DigitalOceanAppPlatformAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/digital-ocean-app-platform/create": {
      "filePath": "secret-manager/integrations/DigitalOceanAppPlatformConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/authorize": {
      "filePath": "secret-manager/integrations/FlyioAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/flyio/create": {
      "filePath": "secret-manager/integrations/FlyioConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/authorize": {
      "filePath": "secret-manager/integrations/GcpSecretManagerAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/create": {
      "filePath": "secret-manager/integrations/GcpSecretManagerConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/auth-mode-selection": {
      "filePath": "secret-manager/integrations/GithubAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/create": {
      "filePath": "secret-manager/integrations/GithubConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/authorize": {
      "filePath": "secret-manager/integrations/GitlabAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/create": {
      "filePath": "secret-manager/integrations/GitlabConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/authorize": {
      "filePath": "secret-manager/integrations/HashicorpVaultAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hashicorp-vault/create": {
      "filePath": "secret-manager/integrations/HashicorpVaultConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/authorize": {
      "filePath": "secret-manager/integrations/HasuraCloudAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/hasura-cloud/create": {
      "filePath": "secret-manager/integrations/HasuraCloudConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/create": {
      "filePath": "secret-manager/integrations/HerokuConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/authorize": {
      "filePath": "secret-manager/integrations/LaravelForgeAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/laravel-forge/create": {
      "filePath": "secret-manager/integrations/LaravelForgeConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/create": {
      "filePath": "secret-manager/integrations/NetlifyConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/authorize": {
      "filePath": "secret-manager/integrations/NorthflankAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/northflank/create": {
      "filePath": "secret-manager/integrations/NorthflankConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/authorize": {
      "filePath": "secret-manager/integrations/OctopusDeployAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/octopus-deploy/create": {
      "filePath": "secret-manager/integrations/OctopusDeployConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/authorize": {
      "filePath": "secret-manager/integrations/QoveryAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/qovery/create": {
      "filePath": "secret-manager/integrations/QoveryConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/authorize": {
      "filePath": "secret-manager/integrations/RailwayAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/railway/create": {
      "filePath": "secret-manager/integrations/RailwayConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/authorize": {
      "filePath": "secret-manager/integrations/RenderAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/render/create": {
      "filePath": "secret-manager/integrations/RenderConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/authorize": {
      "filePath": "secret-manager/integrations/RundeckAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/rundeck/create": {
      "filePath": "secret-manager/integrations/RundeckConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/authorize": {
      "filePath": "secret-manager/integrations/SupabaseAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/supabase/create": {
      "filePath": "secret-manager/integrations/SupabaseConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/authorize": {
      "filePath": "secret-manager/integrations/TeamcityAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/teamcity/create": {
      "filePath": "secret-manager/integrations/TeamcityConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/authorize": {
      "filePath": "secret-manager/integrations/TerraformCloudAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/terraform-cloud/create": {
      "filePath": "secret-manager/integrations/TerraformCloudConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/authorize": {
      "filePath": "secret-manager/integrations/TravisCIAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/travisci/create": {
      "filePath": "secret-manager/integrations/TravisCIConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/create": {
      "filePath": "secret-manager/integrations/VercelConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/authorize": {
      "filePath": "secret-manager/integrations/WindmillAuthorizePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/windmill/create": {
      "filePath": "secret-manager/integrations/WindmillConfigurePage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources/$type/$dataSourceId": {
      "filePath": "secret-scanning/SecretScanningDataSourceByIdPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-scanning/$projectId/_secret-scanning-layout/data-sources"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/": {
      "filePath": "secret-manager/CommitsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-app-configuration/oauth2/callback": {
      "filePath": "secret-manager/integrations/AzureAppConfigurationOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/azure-key-vault/oauth2/callback": {
      "filePath": "secret-manager/integrations/AzureKeyVaultOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/bitbucket/oauth2/callback": {
      "filePath": "secret-manager/integrations/BitbucketOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gcp-secret-manager/oauth2/callback": {
      "filePath": "secret-manager/integrations/GcpSecretManagerOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/github/oauth2/callback": {
      "filePath": "secret-manager/integrations/GithubOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/gitlab/oauth2/callback": {
      "filePath": "secret-manager/integrations/GitlabOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/heroku/oauth2/callback": {
      "filePath": "secret-manager/integrations/HerokuOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/netlify/oauth2/callback": {
      "filePath": "secret-manager/integrations/NetlifyOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/secret-syncs/$destination/$syncId": {
      "filePath": "secret-manager/SecretSyncDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations/vercel/oauth2/callback": {
      "filePath": "secret-manager/integrations/VercelOauthCallbackPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/integrations"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId",
      "children": [
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/",
        "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/restore"
      ]
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/": {
      "filePath": "secret-manager/CommitDetailsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId"
    },
    "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId/restore": {
      "filePath": "secret-manager/CommitDetailsPage/components/RollbackPreviewTab/route.tsx",
      "parent": "/_authenticate/_inject-org-details/_org-layout/projects/secret-management/$projectId/_secret-manager-layout/commits/$environment/$folderId/$commitId"
    }
  }
}
ROUTE_MANIFEST_END */
