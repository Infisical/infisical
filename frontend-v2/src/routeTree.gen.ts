/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/root'
import { Route as middlewaresRestrictLoginSignupImport } from './pages/middlewares/restrict-login-signup'
import { Route as middlewaresAuthenticateImport } from './pages/middlewares/authenticate'
import { Route as indexImport } from './pages/index'
import { Route as middlewaresInjectOrgDetailsImport } from './pages/middlewares/inject-org-details'
import { Route as authVerifyEmailPageRouteImport } from './pages/auth/VerifyEmailPage/route'
import { Route as authSignUpInvitePageRouteImport } from './pages/auth/SignUpInvitePage/route'
import { Route as authRequestNewInvitePageRouteImport } from './pages/auth/RequestNewInvitePage/route'
import { Route as authPasswordResetPageRouteImport } from './pages/auth/PasswordResetPage/route'
import { Route as authEmailNotVerifiedPageRouteImport } from './pages/auth/EmailNotVerifiedPage/route'
import { Route as userLayoutImport } from './pages/user/layout'
import { Route as authSignUpSsoPageRouteImport } from './pages/auth/SignUpSsoPage/route'
import { Route as authLoginSsoPageRouteImport } from './pages/auth/LoginSsoPage/route'
import { Route as authSelectOrgPageRouteImport } from './pages/auth/SelectOrgPage/route'
import { Route as authLoginLdapPageRouteImport } from './pages/auth/LoginLdapPage/route'
import { Route as authSignUpPageRouteImport } from './pages/auth/SignUpPage/route'
import { Route as authLoginPageRouteImport } from './pages/auth/LoginPage/route'
import { Route as organizationLayoutImport } from './pages/organization/layout'
import { Route as authProviderSuccessPageRouteImport } from './pages/auth/ProviderSuccessPage/route'
import { Route as authProviderErrorPageRouteImport } from './pages/auth/ProviderErrorPage/route'
import { Route as userPersonalSettingsPageRouteImport } from './pages/user/PersonalSettingsPage/route'
import { Route as organizationSettingsPageRouteImport } from './pages/organization/SettingsPage/route'
import { Route as organizationSecretSharingPageRouteImport } from './pages/organization/SecretSharingPage/route'
import { Route as organizationSecretScanningPageRouteImport } from './pages/organization/SecretScanningPage/route'
import { Route as organizationNoOrgPageRouteImport } from './pages/organization/NoOrgPage/route'
import { Route as organizationBillingPageRouteImport } from './pages/organization/BillingPage/route'
import { Route as organizationAuditLogsPageRouteImport } from './pages/organization/AuditLogsPage/route'
import { Route as organizationAdminPageRouteImport } from './pages/organization/AdminPage/route'
import { Route as organizationAccessManagementPageRouteImport } from './pages/organization/AccessManagementPage/route'
import { Route as organizationSecretManagerOverviewPageRouteImport } from './pages/organization/SecretManagerOverviewPage/route'
import { Route as organizationRoleByIDPageRouteImport } from './pages/organization/RoleByIDPage/route'
import { Route as organizationUserDetailsByIDPageRouteImport } from './pages/organization/UserDetailsByIDPage/route'
import { Route as organizationKmsOverviewPageRouteImport } from './pages/organization/KmsOverviewPage/route'
import { Route as organizationIdentityDetailsByIDPageRouteImport } from './pages/organization/IdentityDetailsByIDPage/route'
import { Route as organizationGroupDetailsByIDPageRouteImport } from './pages/organization/GroupDetailsByIDPage/route'
import { Route as organizationCertManagerOverviewPageRouteImport } from './pages/organization/CertManagerOverviewPage/route'

// Create Virtual Routes

const RestrictLoginSignupSignupImport = createFileRoute(
  '/_restrict-login-signup/signup',
)()
const RestrictLoginSignupLoginImport = createFileRoute(
  '/_restrict-login-signup/login',
)()
const AuthenticatePersonalSettingsImport = createFileRoute(
  '/_authenticate/personal-settings',
)()
const AuthenticateInjectOrgDetailsOrganizationImport = createFileRoute(
  '/_authenticate/_inject-org-details/organization',
)()

// Create/Update Routes

const middlewaresRestrictLoginSignupRoute =
  middlewaresRestrictLoginSignupImport.update({
    id: '/_restrict-login-signup',
    getParentRoute: () => rootRoute,
  } as any)

const middlewaresAuthenticateRoute = middlewaresAuthenticateImport.update({
  id: '/_authenticate',
  getParentRoute: () => rootRoute,
} as any)

const indexRoute = indexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RestrictLoginSignupSignupRoute = RestrictLoginSignupSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const RestrictLoginSignupLoginRoute = RestrictLoginSignupLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const AuthenticatePersonalSettingsRoute =
  AuthenticatePersonalSettingsImport.update({
    id: '/personal-settings',
    path: '/personal-settings',
    getParentRoute: () => middlewaresAuthenticateRoute,
  } as any)

const middlewaresInjectOrgDetailsRoute =
  middlewaresInjectOrgDetailsImport.update({
    id: '/_inject-org-details',
    getParentRoute: () => middlewaresAuthenticateRoute,
  } as any)

const authVerifyEmailPageRouteRoute = authVerifyEmailPageRouteImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const authSignUpInvitePageRouteRoute = authSignUpInvitePageRouteImport.update({
  id: '/signupinvite',
  path: '/signupinvite',
  getParentRoute: () => middlewaresRestrictLoginSignupRoute,
} as any)

const authRequestNewInvitePageRouteRoute =
  authRequestNewInvitePageRouteImport.update({
    id: '/requestnewinvite',
    path: '/requestnewinvite',
    getParentRoute: () => middlewaresRestrictLoginSignupRoute,
  } as any)

const authPasswordResetPageRouteRoute = authPasswordResetPageRouteImport.update(
  {
    id: '/password-reset',
    path: '/password-reset',
    getParentRoute: () => middlewaresRestrictLoginSignupRoute,
  } as any,
)

const authEmailNotVerifiedPageRouteRoute =
  authEmailNotVerifiedPageRouteImport.update({
    id: '/email-not-verified',
    path: '/email-not-verified',
    getParentRoute: () => middlewaresRestrictLoginSignupRoute,
  } as any)

const userLayoutRoute = userLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthenticatePersonalSettingsRoute,
} as any)

const AuthenticateInjectOrgDetailsOrganizationRoute =
  AuthenticateInjectOrgDetailsOrganizationImport.update({
    id: '/organization',
    path: '/organization',
    getParentRoute: () => middlewaresInjectOrgDetailsRoute,
  } as any)

const authSignUpSsoPageRouteRoute = authSignUpSsoPageRouteImport.update({
  id: '/sso',
  path: '/sso',
  getParentRoute: () => RestrictLoginSignupSignupRoute,
} as any)

const authLoginSsoPageRouteRoute = authLoginSsoPageRouteImport.update({
  id: '/sso',
  path: '/sso',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const authSelectOrgPageRouteRoute = authSelectOrgPageRouteImport.update({
  id: '/select-organization',
  path: '/select-organization',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const authLoginLdapPageRouteRoute = authLoginLdapPageRouteImport.update({
  id: '/ldap',
  path: '/ldap',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const authSignUpPageRouteRoute = authSignUpPageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RestrictLoginSignupSignupRoute,
} as any)

const authLoginPageRouteRoute = authLoginPageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RestrictLoginSignupLoginRoute,
} as any)

const organizationLayoutRoute = organizationLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthenticateInjectOrgDetailsOrganizationRoute,
} as any)

const authProviderSuccessPageRouteRoute =
  authProviderSuccessPageRouteImport.update({
    id: '/provider/success',
    path: '/provider/success',
    getParentRoute: () => RestrictLoginSignupLoginRoute,
  } as any)

const authProviderErrorPageRouteRoute = authProviderErrorPageRouteImport.update(
  {
    id: '/provider/error',
    path: '/provider/error',
    getParentRoute: () => RestrictLoginSignupLoginRoute,
  } as any,
)

const userPersonalSettingsPageRouteRoute =
  userPersonalSettingsPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => userLayoutRoute,
  } as any)

const organizationSettingsPageRouteRoute =
  organizationSettingsPageRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationSecretSharingPageRouteRoute =
  organizationSecretSharingPageRouteImport.update({
    id: '/secret-sharing',
    path: '/secret-sharing',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationSecretScanningPageRouteRoute =
  organizationSecretScanningPageRouteImport.update({
    id: '/secret-scanning',
    path: '/secret-scanning',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationNoOrgPageRouteRoute = organizationNoOrgPageRouteImport.update(
  {
    id: '/none',
    path: '/none',
    getParentRoute: () => organizationLayoutRoute,
  } as any,
)

const organizationBillingPageRouteRoute =
  organizationBillingPageRouteImport.update({
    id: '/billing',
    path: '/billing',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationAuditLogsPageRouteRoute =
  organizationAuditLogsPageRouteImport.update({
    id: '/audit-logs',
    path: '/audit-logs',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationAdminPageRouteRoute = organizationAdminPageRouteImport.update(
  {
    id: '/admin',
    path: '/admin',
    getParentRoute: () => organizationLayoutRoute,
  } as any,
)

const organizationAccessManagementPageRouteRoute =
  organizationAccessManagementPageRouteImport.update({
    id: '/access-management',
    path: '/access-management',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationSecretManagerOverviewPageRouteRoute =
  organizationSecretManagerOverviewPageRouteImport.update({
    id: '/secret-manager/overview',
    path: '/secret-manager/overview',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationRoleByIDPageRouteRoute =
  organizationRoleByIDPageRouteImport.update({
    id: '/roles/$roleId',
    path: '/roles/$roleId',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationUserDetailsByIDPageRouteRoute =
  organizationUserDetailsByIDPageRouteImport.update({
    id: '/members/$membershipId',
    path: '/members/$membershipId',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationKmsOverviewPageRouteRoute =
  organizationKmsOverviewPageRouteImport.update({
    id: '/kms/overview',
    path: '/kms/overview',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationIdentityDetailsByIDPageRouteRoute =
  organizationIdentityDetailsByIDPageRouteImport.update({
    id: '/identities/$identityId',
    path: '/identities/$identityId',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationGroupDetailsByIDPageRouteRoute =
  organizationGroupDetailsByIDPageRouteImport.update({
    id: '/groups/$groupId',
    path: '/groups/$groupId',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

const organizationCertManagerOverviewPageRouteRoute =
  organizationCertManagerOverviewPageRouteImport.update({
    id: '/cert-manager/overview',
    path: '/cert-manager/overview',
    getParentRoute: () => organizationLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticate': {
      id: '/_authenticate'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof middlewaresAuthenticateImport
      parentRoute: typeof rootRoute
    }
    '/_restrict-login-signup': {
      id: '/_restrict-login-signup'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof middlewaresRestrictLoginSignupImport
      parentRoute: typeof rootRoute
    }
    '/_restrict-login-signup/email-not-verified': {
      id: '/_restrict-login-signup/email-not-verified'
      path: '/email-not-verified'
      fullPath: '/email-not-verified'
      preLoaderRoute: typeof authEmailNotVerifiedPageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/password-reset': {
      id: '/_restrict-login-signup/password-reset'
      path: '/password-reset'
      fullPath: '/password-reset'
      preLoaderRoute: typeof authPasswordResetPageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/requestnewinvite': {
      id: '/_restrict-login-signup/requestnewinvite'
      path: '/requestnewinvite'
      fullPath: '/requestnewinvite'
      preLoaderRoute: typeof authRequestNewInvitePageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/signupinvite': {
      id: '/_restrict-login-signup/signupinvite'
      path: '/signupinvite'
      fullPath: '/signupinvite'
      preLoaderRoute: typeof authSignUpInvitePageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/verify-email': {
      id: '/_restrict-login-signup/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof authVerifyEmailPageRouteImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_authenticate/_inject-org-details': {
      id: '/_authenticate/_inject-org-details'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof middlewaresInjectOrgDetailsImport
      parentRoute: typeof middlewaresAuthenticateImport
    }
    '/_authenticate/personal-settings': {
      id: '/_authenticate/personal-settings'
      path: '/personal-settings'
      fullPath: '/personal-settings'
      preLoaderRoute: typeof AuthenticatePersonalSettingsImport
      parentRoute: typeof middlewaresAuthenticateImport
    }
    '/_restrict-login-signup/login': {
      id: '/_restrict-login-signup/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof RestrictLoginSignupLoginImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/signup': {
      id: '/_restrict-login-signup/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof RestrictLoginSignupSignupImport
      parentRoute: typeof middlewaresRestrictLoginSignupImport
    }
    '/_restrict-login-signup/login/': {
      id: '/_restrict-login-signup/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof authLoginPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/signup/': {
      id: '/_restrict-login-signup/signup/'
      path: '/'
      fullPath: '/signup/'
      preLoaderRoute: typeof authSignUpPageRouteImport
      parentRoute: typeof RestrictLoginSignupSignupImport
    }
    '/_restrict-login-signup/login/ldap': {
      id: '/_restrict-login-signup/login/ldap'
      path: '/ldap'
      fullPath: '/login/ldap'
      preLoaderRoute: typeof authLoginLdapPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/login/select-organization': {
      id: '/_restrict-login-signup/login/select-organization'
      path: '/select-organization'
      fullPath: '/login/select-organization'
      preLoaderRoute: typeof authSelectOrgPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/login/sso': {
      id: '/_restrict-login-signup/login/sso'
      path: '/sso'
      fullPath: '/login/sso'
      preLoaderRoute: typeof authLoginSsoPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/signup/sso': {
      id: '/_restrict-login-signup/signup/sso'
      path: '/sso'
      fullPath: '/signup/sso'
      preLoaderRoute: typeof authSignUpSsoPageRouteImport
      parentRoute: typeof RestrictLoginSignupSignupImport
    }
    '/_authenticate/_inject-org-details/organization': {
      id: '/_authenticate/_inject-org-details/organization'
      path: '/organization'
      fullPath: '/organization'
      preLoaderRoute: typeof AuthenticateInjectOrgDetailsOrganizationImport
      parentRoute: typeof middlewaresInjectOrgDetailsImport
    }
    '/_authenticate/personal-settings/_layout': {
      id: '/_authenticate/personal-settings/_layout'
      path: ''
      fullPath: '/personal-settings'
      preLoaderRoute: typeof userLayoutImport
      parentRoute: typeof AuthenticatePersonalSettingsImport
    }
    '/_authenticate/personal-settings/_layout/': {
      id: '/_authenticate/personal-settings/_layout/'
      path: '/'
      fullPath: '/personal-settings/'
      preLoaderRoute: typeof userPersonalSettingsPageRouteImport
      parentRoute: typeof userLayoutImport
    }
    '/_restrict-login-signup/login/provider/error': {
      id: '/_restrict-login-signup/login/provider/error'
      path: '/provider/error'
      fullPath: '/login/provider/error'
      preLoaderRoute: typeof authProviderErrorPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_restrict-login-signup/login/provider/success': {
      id: '/_restrict-login-signup/login/provider/success'
      path: '/provider/success'
      fullPath: '/login/provider/success'
      preLoaderRoute: typeof authProviderSuccessPageRouteImport
      parentRoute: typeof RestrictLoginSignupLoginImport
    }
    '/_authenticate/_inject-org-details/organization/_layout': {
      id: '/_authenticate/_inject-org-details/organization/_layout'
      path: ''
      fullPath: '/organization'
      preLoaderRoute: typeof organizationLayoutImport
      parentRoute: typeof AuthenticateInjectOrgDetailsOrganizationImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/access-management': {
      id: '/_authenticate/_inject-org-details/organization/_layout/access-management'
      path: '/access-management'
      fullPath: '/organization/access-management'
      preLoaderRoute: typeof organizationAccessManagementPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/admin': {
      id: '/_authenticate/_inject-org-details/organization/_layout/admin'
      path: '/admin'
      fullPath: '/organization/admin'
      preLoaderRoute: typeof organizationAdminPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/audit-logs': {
      id: '/_authenticate/_inject-org-details/organization/_layout/audit-logs'
      path: '/audit-logs'
      fullPath: '/organization/audit-logs'
      preLoaderRoute: typeof organizationAuditLogsPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/billing': {
      id: '/_authenticate/_inject-org-details/organization/_layout/billing'
      path: '/billing'
      fullPath: '/organization/billing'
      preLoaderRoute: typeof organizationBillingPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/none': {
      id: '/_authenticate/_inject-org-details/organization/_layout/none'
      path: '/none'
      fullPath: '/organization/none'
      preLoaderRoute: typeof organizationNoOrgPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/secret-scanning': {
      id: '/_authenticate/_inject-org-details/organization/_layout/secret-scanning'
      path: '/secret-scanning'
      fullPath: '/organization/secret-scanning'
      preLoaderRoute: typeof organizationSecretScanningPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/secret-sharing': {
      id: '/_authenticate/_inject-org-details/organization/_layout/secret-sharing'
      path: '/secret-sharing'
      fullPath: '/organization/secret-sharing'
      preLoaderRoute: typeof organizationSecretSharingPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/settings': {
      id: '/_authenticate/_inject-org-details/organization/_layout/settings'
      path: '/settings'
      fullPath: '/organization/settings'
      preLoaderRoute: typeof organizationSettingsPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/cert-manager/overview': {
      id: '/_authenticate/_inject-org-details/organization/_layout/cert-manager/overview'
      path: '/cert-manager/overview'
      fullPath: '/organization/cert-manager/overview'
      preLoaderRoute: typeof organizationCertManagerOverviewPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/groups/$groupId': {
      id: '/_authenticate/_inject-org-details/organization/_layout/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/organization/groups/$groupId'
      preLoaderRoute: typeof organizationGroupDetailsByIDPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/identities/$identityId': {
      id: '/_authenticate/_inject-org-details/organization/_layout/identities/$identityId'
      path: '/identities/$identityId'
      fullPath: '/organization/identities/$identityId'
      preLoaderRoute: typeof organizationIdentityDetailsByIDPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/kms/overview': {
      id: '/_authenticate/_inject-org-details/organization/_layout/kms/overview'
      path: '/kms/overview'
      fullPath: '/organization/kms/overview'
      preLoaderRoute: typeof organizationKmsOverviewPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/members/$membershipId': {
      id: '/_authenticate/_inject-org-details/organization/_layout/members/$membershipId'
      path: '/members/$membershipId'
      fullPath: '/organization/members/$membershipId'
      preLoaderRoute: typeof organizationUserDetailsByIDPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/roles/$roleId': {
      id: '/_authenticate/_inject-org-details/organization/_layout/roles/$roleId'
      path: '/roles/$roleId'
      fullPath: '/organization/roles/$roleId'
      preLoaderRoute: typeof organizationRoleByIDPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
    '/_authenticate/_inject-org-details/organization/_layout/secret-manager/overview': {
      id: '/_authenticate/_inject-org-details/organization/_layout/secret-manager/overview'
      path: '/secret-manager/overview'
      fullPath: '/organization/secret-manager/overview'
      preLoaderRoute: typeof organizationSecretManagerOverviewPageRouteImport
      parentRoute: typeof organizationLayoutImport
    }
  }
}

// Create and export the route tree

interface organizationLayoutRouteChildren {
  organizationAccessManagementPageRouteRoute: typeof organizationAccessManagementPageRouteRoute
  organizationAdminPageRouteRoute: typeof organizationAdminPageRouteRoute
  organizationAuditLogsPageRouteRoute: typeof organizationAuditLogsPageRouteRoute
  organizationBillingPageRouteRoute: typeof organizationBillingPageRouteRoute
  organizationNoOrgPageRouteRoute: typeof organizationNoOrgPageRouteRoute
  organizationSecretScanningPageRouteRoute: typeof organizationSecretScanningPageRouteRoute
  organizationSecretSharingPageRouteRoute: typeof organizationSecretSharingPageRouteRoute
  organizationSettingsPageRouteRoute: typeof organizationSettingsPageRouteRoute
  organizationCertManagerOverviewPageRouteRoute: typeof organizationCertManagerOverviewPageRouteRoute
  organizationGroupDetailsByIDPageRouteRoute: typeof organizationGroupDetailsByIDPageRouteRoute
  organizationIdentityDetailsByIDPageRouteRoute: typeof organizationIdentityDetailsByIDPageRouteRoute
  organizationKmsOverviewPageRouteRoute: typeof organizationKmsOverviewPageRouteRoute
  organizationUserDetailsByIDPageRouteRoute: typeof organizationUserDetailsByIDPageRouteRoute
  organizationRoleByIDPageRouteRoute: typeof organizationRoleByIDPageRouteRoute
  organizationSecretManagerOverviewPageRouteRoute: typeof organizationSecretManagerOverviewPageRouteRoute
}

const organizationLayoutRouteChildren: organizationLayoutRouteChildren = {
  organizationAccessManagementPageRouteRoute:
    organizationAccessManagementPageRouteRoute,
  organizationAdminPageRouteRoute: organizationAdminPageRouteRoute,
  organizationAuditLogsPageRouteRoute: organizationAuditLogsPageRouteRoute,
  organizationBillingPageRouteRoute: organizationBillingPageRouteRoute,
  organizationNoOrgPageRouteRoute: organizationNoOrgPageRouteRoute,
  organizationSecretScanningPageRouteRoute:
    organizationSecretScanningPageRouteRoute,
  organizationSecretSharingPageRouteRoute:
    organizationSecretSharingPageRouteRoute,
  organizationSettingsPageRouteRoute: organizationSettingsPageRouteRoute,
  organizationCertManagerOverviewPageRouteRoute:
    organizationCertManagerOverviewPageRouteRoute,
  organizationGroupDetailsByIDPageRouteRoute:
    organizationGroupDetailsByIDPageRouteRoute,
  organizationIdentityDetailsByIDPageRouteRoute:
    organizationIdentityDetailsByIDPageRouteRoute,
  organizationKmsOverviewPageRouteRoute: organizationKmsOverviewPageRouteRoute,
  organizationUserDetailsByIDPageRouteRoute:
    organizationUserDetailsByIDPageRouteRoute,
  organizationRoleByIDPageRouteRoute: organizationRoleByIDPageRouteRoute,
  organizationSecretManagerOverviewPageRouteRoute:
    organizationSecretManagerOverviewPageRouteRoute,
}

const organizationLayoutRouteWithChildren =
  organizationLayoutRoute._addFileChildren(organizationLayoutRouteChildren)

interface AuthenticateInjectOrgDetailsOrganizationRouteChildren {
  organizationLayoutRoute: typeof organizationLayoutRouteWithChildren
}

const AuthenticateInjectOrgDetailsOrganizationRouteChildren: AuthenticateInjectOrgDetailsOrganizationRouteChildren =
  {
    organizationLayoutRoute: organizationLayoutRouteWithChildren,
  }

const AuthenticateInjectOrgDetailsOrganizationRouteWithChildren =
  AuthenticateInjectOrgDetailsOrganizationRoute._addFileChildren(
    AuthenticateInjectOrgDetailsOrganizationRouteChildren,
  )

interface middlewaresInjectOrgDetailsRouteChildren {
  AuthenticateInjectOrgDetailsOrganizationRoute: typeof AuthenticateInjectOrgDetailsOrganizationRouteWithChildren
}

const middlewaresInjectOrgDetailsRouteChildren: middlewaresInjectOrgDetailsRouteChildren =
  {
    AuthenticateInjectOrgDetailsOrganizationRoute:
      AuthenticateInjectOrgDetailsOrganizationRouteWithChildren,
  }

const middlewaresInjectOrgDetailsRouteWithChildren =
  middlewaresInjectOrgDetailsRoute._addFileChildren(
    middlewaresInjectOrgDetailsRouteChildren,
  )

interface userLayoutRouteChildren {
  userPersonalSettingsPageRouteRoute: typeof userPersonalSettingsPageRouteRoute
}

const userLayoutRouteChildren: userLayoutRouteChildren = {
  userPersonalSettingsPageRouteRoute: userPersonalSettingsPageRouteRoute,
}

const userLayoutRouteWithChildren = userLayoutRoute._addFileChildren(
  userLayoutRouteChildren,
)

interface AuthenticatePersonalSettingsRouteChildren {
  userLayoutRoute: typeof userLayoutRouteWithChildren
}

const AuthenticatePersonalSettingsRouteChildren: AuthenticatePersonalSettingsRouteChildren =
  {
    userLayoutRoute: userLayoutRouteWithChildren,
  }

const AuthenticatePersonalSettingsRouteWithChildren =
  AuthenticatePersonalSettingsRoute._addFileChildren(
    AuthenticatePersonalSettingsRouteChildren,
  )

interface middlewaresAuthenticateRouteChildren {
  middlewaresInjectOrgDetailsRoute: typeof middlewaresInjectOrgDetailsRouteWithChildren
  AuthenticatePersonalSettingsRoute: typeof AuthenticatePersonalSettingsRouteWithChildren
}

const middlewaresAuthenticateRouteChildren: middlewaresAuthenticateRouteChildren =
  {
    middlewaresInjectOrgDetailsRoute:
      middlewaresInjectOrgDetailsRouteWithChildren,
    AuthenticatePersonalSettingsRoute:
      AuthenticatePersonalSettingsRouteWithChildren,
  }

const middlewaresAuthenticateRouteWithChildren =
  middlewaresAuthenticateRoute._addFileChildren(
    middlewaresAuthenticateRouteChildren,
  )

interface RestrictLoginSignupLoginRouteChildren {
  authLoginPageRouteRoute: typeof authLoginPageRouteRoute
  authLoginLdapPageRouteRoute: typeof authLoginLdapPageRouteRoute
  authSelectOrgPageRouteRoute: typeof authSelectOrgPageRouteRoute
  authLoginSsoPageRouteRoute: typeof authLoginSsoPageRouteRoute
  authProviderErrorPageRouteRoute: typeof authProviderErrorPageRouteRoute
  authProviderSuccessPageRouteRoute: typeof authProviderSuccessPageRouteRoute
}

const RestrictLoginSignupLoginRouteChildren: RestrictLoginSignupLoginRouteChildren =
  {
    authLoginPageRouteRoute: authLoginPageRouteRoute,
    authLoginLdapPageRouteRoute: authLoginLdapPageRouteRoute,
    authSelectOrgPageRouteRoute: authSelectOrgPageRouteRoute,
    authLoginSsoPageRouteRoute: authLoginSsoPageRouteRoute,
    authProviderErrorPageRouteRoute: authProviderErrorPageRouteRoute,
    authProviderSuccessPageRouteRoute: authProviderSuccessPageRouteRoute,
  }

const RestrictLoginSignupLoginRouteWithChildren =
  RestrictLoginSignupLoginRoute._addFileChildren(
    RestrictLoginSignupLoginRouteChildren,
  )

interface RestrictLoginSignupSignupRouteChildren {
  authSignUpPageRouteRoute: typeof authSignUpPageRouteRoute
  authSignUpSsoPageRouteRoute: typeof authSignUpSsoPageRouteRoute
}

const RestrictLoginSignupSignupRouteChildren: RestrictLoginSignupSignupRouteChildren =
  {
    authSignUpPageRouteRoute: authSignUpPageRouteRoute,
    authSignUpSsoPageRouteRoute: authSignUpSsoPageRouteRoute,
  }

const RestrictLoginSignupSignupRouteWithChildren =
  RestrictLoginSignupSignupRoute._addFileChildren(
    RestrictLoginSignupSignupRouteChildren,
  )

interface middlewaresRestrictLoginSignupRouteChildren {
  authEmailNotVerifiedPageRouteRoute: typeof authEmailNotVerifiedPageRouteRoute
  authPasswordResetPageRouteRoute: typeof authPasswordResetPageRouteRoute
  authRequestNewInvitePageRouteRoute: typeof authRequestNewInvitePageRouteRoute
  authSignUpInvitePageRouteRoute: typeof authSignUpInvitePageRouteRoute
  authVerifyEmailPageRouteRoute: typeof authVerifyEmailPageRouteRoute
  RestrictLoginSignupLoginRoute: typeof RestrictLoginSignupLoginRouteWithChildren
  RestrictLoginSignupSignupRoute: typeof RestrictLoginSignupSignupRouteWithChildren
}

const middlewaresRestrictLoginSignupRouteChildren: middlewaresRestrictLoginSignupRouteChildren =
  {
    authEmailNotVerifiedPageRouteRoute: authEmailNotVerifiedPageRouteRoute,
    authPasswordResetPageRouteRoute: authPasswordResetPageRouteRoute,
    authRequestNewInvitePageRouteRoute: authRequestNewInvitePageRouteRoute,
    authSignUpInvitePageRouteRoute: authSignUpInvitePageRouteRoute,
    authVerifyEmailPageRouteRoute: authVerifyEmailPageRouteRoute,
    RestrictLoginSignupLoginRoute: RestrictLoginSignupLoginRouteWithChildren,
    RestrictLoginSignupSignupRoute: RestrictLoginSignupSignupRouteWithChildren,
  }

const middlewaresRestrictLoginSignupRouteWithChildren =
  middlewaresRestrictLoginSignupRoute._addFileChildren(
    middlewaresRestrictLoginSignupRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof indexRoute
  '': typeof middlewaresInjectOrgDetailsRouteWithChildren
  '/email-not-verified': typeof authEmailNotVerifiedPageRouteRoute
  '/password-reset': typeof authPasswordResetPageRouteRoute
  '/requestnewinvite': typeof authRequestNewInvitePageRouteRoute
  '/signupinvite': typeof authSignUpInvitePageRouteRoute
  '/verify-email': typeof authVerifyEmailPageRouteRoute
  '/personal-settings': typeof userLayoutRouteWithChildren
  '/login': typeof RestrictLoginSignupLoginRouteWithChildren
  '/signup': typeof RestrictLoginSignupSignupRouteWithChildren
  '/login/': typeof authLoginPageRouteRoute
  '/signup/': typeof authSignUpPageRouteRoute
  '/login/ldap': typeof authLoginLdapPageRouteRoute
  '/login/select-organization': typeof authSelectOrgPageRouteRoute
  '/login/sso': typeof authLoginSsoPageRouteRoute
  '/signup/sso': typeof authSignUpSsoPageRouteRoute
  '/organization': typeof organizationLayoutRouteWithChildren
  '/personal-settings/': typeof userPersonalSettingsPageRouteRoute
  '/login/provider/error': typeof authProviderErrorPageRouteRoute
  '/login/provider/success': typeof authProviderSuccessPageRouteRoute
  '/organization/access-management': typeof organizationAccessManagementPageRouteRoute
  '/organization/admin': typeof organizationAdminPageRouteRoute
  '/organization/audit-logs': typeof organizationAuditLogsPageRouteRoute
  '/organization/billing': typeof organizationBillingPageRouteRoute
  '/organization/none': typeof organizationNoOrgPageRouteRoute
  '/organization/secret-scanning': typeof organizationSecretScanningPageRouteRoute
  '/organization/secret-sharing': typeof organizationSecretSharingPageRouteRoute
  '/organization/settings': typeof organizationSettingsPageRouteRoute
  '/organization/cert-manager/overview': typeof organizationCertManagerOverviewPageRouteRoute
  '/organization/groups/$groupId': typeof organizationGroupDetailsByIDPageRouteRoute
  '/organization/identities/$identityId': typeof organizationIdentityDetailsByIDPageRouteRoute
  '/organization/kms/overview': typeof organizationKmsOverviewPageRouteRoute
  '/organization/members/$membershipId': typeof organizationUserDetailsByIDPageRouteRoute
  '/organization/roles/$roleId': typeof organizationRoleByIDPageRouteRoute
  '/organization/secret-manager/overview': typeof organizationSecretManagerOverviewPageRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof indexRoute
  '': typeof middlewaresInjectOrgDetailsRouteWithChildren
  '/email-not-verified': typeof authEmailNotVerifiedPageRouteRoute
  '/password-reset': typeof authPasswordResetPageRouteRoute
  '/requestnewinvite': typeof authRequestNewInvitePageRouteRoute
  '/signupinvite': typeof authSignUpInvitePageRouteRoute
  '/verify-email': typeof authVerifyEmailPageRouteRoute
  '/personal-settings': typeof userPersonalSettingsPageRouteRoute
  '/login': typeof authLoginPageRouteRoute
  '/signup': typeof authSignUpPageRouteRoute
  '/login/ldap': typeof authLoginLdapPageRouteRoute
  '/login/select-organization': typeof authSelectOrgPageRouteRoute
  '/login/sso': typeof authLoginSsoPageRouteRoute
  '/signup/sso': typeof authSignUpSsoPageRouteRoute
  '/organization': typeof organizationLayoutRouteWithChildren
  '/login/provider/error': typeof authProviderErrorPageRouteRoute
  '/login/provider/success': typeof authProviderSuccessPageRouteRoute
  '/organization/access-management': typeof organizationAccessManagementPageRouteRoute
  '/organization/admin': typeof organizationAdminPageRouteRoute
  '/organization/audit-logs': typeof organizationAuditLogsPageRouteRoute
  '/organization/billing': typeof organizationBillingPageRouteRoute
  '/organization/none': typeof organizationNoOrgPageRouteRoute
  '/organization/secret-scanning': typeof organizationSecretScanningPageRouteRoute
  '/organization/secret-sharing': typeof organizationSecretSharingPageRouteRoute
  '/organization/settings': typeof organizationSettingsPageRouteRoute
  '/organization/cert-manager/overview': typeof organizationCertManagerOverviewPageRouteRoute
  '/organization/groups/$groupId': typeof organizationGroupDetailsByIDPageRouteRoute
  '/organization/identities/$identityId': typeof organizationIdentityDetailsByIDPageRouteRoute
  '/organization/kms/overview': typeof organizationKmsOverviewPageRouteRoute
  '/organization/members/$membershipId': typeof organizationUserDetailsByIDPageRouteRoute
  '/organization/roles/$roleId': typeof organizationRoleByIDPageRouteRoute
  '/organization/secret-manager/overview': typeof organizationSecretManagerOverviewPageRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof indexRoute
  '/_authenticate': typeof middlewaresAuthenticateRouteWithChildren
  '/_restrict-login-signup': typeof middlewaresRestrictLoginSignupRouteWithChildren
  '/_restrict-login-signup/email-not-verified': typeof authEmailNotVerifiedPageRouteRoute
  '/_restrict-login-signup/password-reset': typeof authPasswordResetPageRouteRoute
  '/_restrict-login-signup/requestnewinvite': typeof authRequestNewInvitePageRouteRoute
  '/_restrict-login-signup/signupinvite': typeof authSignUpInvitePageRouteRoute
  '/_restrict-login-signup/verify-email': typeof authVerifyEmailPageRouteRoute
  '/_authenticate/_inject-org-details': typeof middlewaresInjectOrgDetailsRouteWithChildren
  '/_authenticate/personal-settings': typeof AuthenticatePersonalSettingsRouteWithChildren
  '/_restrict-login-signup/login': typeof RestrictLoginSignupLoginRouteWithChildren
  '/_restrict-login-signup/signup': typeof RestrictLoginSignupSignupRouteWithChildren
  '/_restrict-login-signup/login/': typeof authLoginPageRouteRoute
  '/_restrict-login-signup/signup/': typeof authSignUpPageRouteRoute
  '/_restrict-login-signup/login/ldap': typeof authLoginLdapPageRouteRoute
  '/_restrict-login-signup/login/select-organization': typeof authSelectOrgPageRouteRoute
  '/_restrict-login-signup/login/sso': typeof authLoginSsoPageRouteRoute
  '/_restrict-login-signup/signup/sso': typeof authSignUpSsoPageRouteRoute
  '/_authenticate/_inject-org-details/organization': typeof AuthenticateInjectOrgDetailsOrganizationRouteWithChildren
  '/_authenticate/personal-settings/_layout': typeof userLayoutRouteWithChildren
  '/_authenticate/personal-settings/_layout/': typeof userPersonalSettingsPageRouteRoute
  '/_restrict-login-signup/login/provider/error': typeof authProviderErrorPageRouteRoute
  '/_restrict-login-signup/login/provider/success': typeof authProviderSuccessPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout': typeof organizationLayoutRouteWithChildren
  '/_authenticate/_inject-org-details/organization/_layout/access-management': typeof organizationAccessManagementPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/admin': typeof organizationAdminPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/audit-logs': typeof organizationAuditLogsPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/billing': typeof organizationBillingPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/none': typeof organizationNoOrgPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/secret-scanning': typeof organizationSecretScanningPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/secret-sharing': typeof organizationSecretSharingPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/settings': typeof organizationSettingsPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/cert-manager/overview': typeof organizationCertManagerOverviewPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/groups/$groupId': typeof organizationGroupDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/identities/$identityId': typeof organizationIdentityDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/kms/overview': typeof organizationKmsOverviewPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/members/$membershipId': typeof organizationUserDetailsByIDPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/roles/$roleId': typeof organizationRoleByIDPageRouteRoute
  '/_authenticate/_inject-org-details/organization/_layout/secret-manager/overview': typeof organizationSecretManagerOverviewPageRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/email-not-verified'
    | '/password-reset'
    | '/requestnewinvite'
    | '/signupinvite'
    | '/verify-email'
    | '/personal-settings'
    | '/login'
    | '/signup'
    | '/login/'
    | '/signup/'
    | '/login/ldap'
    | '/login/select-organization'
    | '/login/sso'
    | '/signup/sso'
    | '/organization'
    | '/personal-settings/'
    | '/login/provider/error'
    | '/login/provider/success'
    | '/organization/access-management'
    | '/organization/admin'
    | '/organization/audit-logs'
    | '/organization/billing'
    | '/organization/none'
    | '/organization/secret-scanning'
    | '/organization/secret-sharing'
    | '/organization/settings'
    | '/organization/cert-manager/overview'
    | '/organization/groups/$groupId'
    | '/organization/identities/$identityId'
    | '/organization/kms/overview'
    | '/organization/members/$membershipId'
    | '/organization/roles/$roleId'
    | '/organization/secret-manager/overview'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/email-not-verified'
    | '/password-reset'
    | '/requestnewinvite'
    | '/signupinvite'
    | '/verify-email'
    | '/personal-settings'
    | '/login'
    | '/signup'
    | '/login/ldap'
    | '/login/select-organization'
    | '/login/sso'
    | '/signup/sso'
    | '/organization'
    | '/login/provider/error'
    | '/login/provider/success'
    | '/organization/access-management'
    | '/organization/admin'
    | '/organization/audit-logs'
    | '/organization/billing'
    | '/organization/none'
    | '/organization/secret-scanning'
    | '/organization/secret-sharing'
    | '/organization/settings'
    | '/organization/cert-manager/overview'
    | '/organization/groups/$groupId'
    | '/organization/identities/$identityId'
    | '/organization/kms/overview'
    | '/organization/members/$membershipId'
    | '/organization/roles/$roleId'
    | '/organization/secret-manager/overview'
  id:
    | '__root__'
    | '/'
    | '/_authenticate'
    | '/_restrict-login-signup'
    | '/_restrict-login-signup/email-not-verified'
    | '/_restrict-login-signup/password-reset'
    | '/_restrict-login-signup/requestnewinvite'
    | '/_restrict-login-signup/signupinvite'
    | '/_restrict-login-signup/verify-email'
    | '/_authenticate/_inject-org-details'
    | '/_authenticate/personal-settings'
    | '/_restrict-login-signup/login'
    | '/_restrict-login-signup/signup'
    | '/_restrict-login-signup/login/'
    | '/_restrict-login-signup/signup/'
    | '/_restrict-login-signup/login/ldap'
    | '/_restrict-login-signup/login/select-organization'
    | '/_restrict-login-signup/login/sso'
    | '/_restrict-login-signup/signup/sso'
    | '/_authenticate/_inject-org-details/organization'
    | '/_authenticate/personal-settings/_layout'
    | '/_authenticate/personal-settings/_layout/'
    | '/_restrict-login-signup/login/provider/error'
    | '/_restrict-login-signup/login/provider/success'
    | '/_authenticate/_inject-org-details/organization/_layout'
    | '/_authenticate/_inject-org-details/organization/_layout/access-management'
    | '/_authenticate/_inject-org-details/organization/_layout/admin'
    | '/_authenticate/_inject-org-details/organization/_layout/audit-logs'
    | '/_authenticate/_inject-org-details/organization/_layout/billing'
    | '/_authenticate/_inject-org-details/organization/_layout/none'
    | '/_authenticate/_inject-org-details/organization/_layout/secret-scanning'
    | '/_authenticate/_inject-org-details/organization/_layout/secret-sharing'
    | '/_authenticate/_inject-org-details/organization/_layout/settings'
    | '/_authenticate/_inject-org-details/organization/_layout/cert-manager/overview'
    | '/_authenticate/_inject-org-details/organization/_layout/groups/$groupId'
    | '/_authenticate/_inject-org-details/organization/_layout/identities/$identityId'
    | '/_authenticate/_inject-org-details/organization/_layout/kms/overview'
    | '/_authenticate/_inject-org-details/organization/_layout/members/$membershipId'
    | '/_authenticate/_inject-org-details/organization/_layout/roles/$roleId'
    | '/_authenticate/_inject-org-details/organization/_layout/secret-manager/overview'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  indexRoute: typeof indexRoute
  middlewaresAuthenticateRoute: typeof middlewaresAuthenticateRouteWithChildren
  middlewaresRestrictLoginSignupRoute: typeof middlewaresRestrictLoginSignupRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  indexRoute: indexRoute,
  middlewaresAuthenticateRoute: middlewaresAuthenticateRouteWithChildren,
  middlewaresRestrictLoginSignupRoute:
    middlewaresRestrictLoginSignupRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "root.tsx",
      "children": [
        "/",
        "/_authenticate",
        "/_restrict-login-signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticate": {
      "filePath": "middlewares/authenticate.tsx",
      "children": [
        "/_authenticate/_inject-org-details",
        "/_authenticate/personal-settings"
      ]
    },
    "/_restrict-login-signup": {
      "filePath": "middlewares/restrict-login-signup.tsx",
      "children": [
        "/_restrict-login-signup/email-not-verified",
        "/_restrict-login-signup/password-reset",
        "/_restrict-login-signup/requestnewinvite",
        "/_restrict-login-signup/signupinvite",
        "/_restrict-login-signup/verify-email",
        "/_restrict-login-signup/login",
        "/_restrict-login-signup/signup"
      ]
    },
    "/_restrict-login-signup/email-not-verified": {
      "filePath": "auth/EmailNotVerifiedPage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/password-reset": {
      "filePath": "auth/PasswordResetPage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/requestnewinvite": {
      "filePath": "auth/RequestNewInvitePage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/signupinvite": {
      "filePath": "auth/SignUpInvitePage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_restrict-login-signup/verify-email": {
      "filePath": "auth/VerifyEmailPage/route.tsx",
      "parent": "/_restrict-login-signup"
    },
    "/_authenticate/_inject-org-details": {
      "filePath": "middlewares/inject-org-details.tsx",
      "parent": "/_authenticate",
      "children": [
        "/_authenticate/_inject-org-details/organization"
      ]
    },
    "/_authenticate/personal-settings": {
      "filePath": "",
      "parent": "/_authenticate",
      "children": [
        "/_authenticate/personal-settings/_layout"
      ]
    },
    "/_restrict-login-signup/login": {
      "filePath": "",
      "parent": "/_restrict-login-signup",
      "children": [
        "/_restrict-login-signup/login/",
        "/_restrict-login-signup/login/ldap",
        "/_restrict-login-signup/login/select-organization",
        "/_restrict-login-signup/login/sso",
        "/_restrict-login-signup/login/provider/error",
        "/_restrict-login-signup/login/provider/success"
      ]
    },
    "/_restrict-login-signup/signup": {
      "filePath": "",
      "parent": "/_restrict-login-signup",
      "children": [
        "/_restrict-login-signup/signup/",
        "/_restrict-login-signup/signup/sso"
      ]
    },
    "/_restrict-login-signup/login/": {
      "filePath": "auth/LoginPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/signup/": {
      "filePath": "auth/SignUpPage/route.tsx",
      "parent": "/_restrict-login-signup/signup"
    },
    "/_restrict-login-signup/login/ldap": {
      "filePath": "auth/LoginLdapPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/login/select-organization": {
      "filePath": "auth/SelectOrgPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/login/sso": {
      "filePath": "auth/LoginSsoPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/signup/sso": {
      "filePath": "auth/SignUpSsoPage/route.tsx",
      "parent": "/_restrict-login-signup/signup"
    },
    "/_authenticate/_inject-org-details/organization": {
      "filePath": "",
      "parent": "/_authenticate/_inject-org-details",
      "children": [
        "/_authenticate/_inject-org-details/organization/_layout"
      ]
    },
    "/_authenticate/personal-settings/_layout": {
      "filePath": "user/layout.tsx",
      "parent": "/_authenticate/personal-settings",
      "children": [
        "/_authenticate/personal-settings/_layout/"
      ]
    },
    "/_authenticate/personal-settings/_layout/": {
      "filePath": "user/PersonalSettingsPage/route.tsx",
      "parent": "/_authenticate/personal-settings/_layout"
    },
    "/_restrict-login-signup/login/provider/error": {
      "filePath": "auth/ProviderErrorPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_restrict-login-signup/login/provider/success": {
      "filePath": "auth/ProviderSuccessPage/route.tsx",
      "parent": "/_restrict-login-signup/login"
    },
    "/_authenticate/_inject-org-details/organization/_layout": {
      "filePath": "organization/layout.tsx",
      "parent": "/_authenticate/_inject-org-details/organization",
      "children": [
        "/_authenticate/_inject-org-details/organization/_layout/access-management",
        "/_authenticate/_inject-org-details/organization/_layout/admin",
        "/_authenticate/_inject-org-details/organization/_layout/audit-logs",
        "/_authenticate/_inject-org-details/organization/_layout/billing",
        "/_authenticate/_inject-org-details/organization/_layout/none",
        "/_authenticate/_inject-org-details/organization/_layout/secret-scanning",
        "/_authenticate/_inject-org-details/organization/_layout/secret-sharing",
        "/_authenticate/_inject-org-details/organization/_layout/settings",
        "/_authenticate/_inject-org-details/organization/_layout/cert-manager/overview",
        "/_authenticate/_inject-org-details/organization/_layout/groups/$groupId",
        "/_authenticate/_inject-org-details/organization/_layout/identities/$identityId",
        "/_authenticate/_inject-org-details/organization/_layout/kms/overview",
        "/_authenticate/_inject-org-details/organization/_layout/members/$membershipId",
        "/_authenticate/_inject-org-details/organization/_layout/roles/$roleId",
        "/_authenticate/_inject-org-details/organization/_layout/secret-manager/overview"
      ]
    },
    "/_authenticate/_inject-org-details/organization/_layout/access-management": {
      "filePath": "organization/AccessManagementPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/admin": {
      "filePath": "organization/AdminPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/audit-logs": {
      "filePath": "organization/AuditLogsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/billing": {
      "filePath": "organization/BillingPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/none": {
      "filePath": "organization/NoOrgPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/secret-scanning": {
      "filePath": "organization/SecretScanningPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/secret-sharing": {
      "filePath": "organization/SecretSharingPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/settings": {
      "filePath": "organization/SettingsPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/cert-manager/overview": {
      "filePath": "organization/CertManagerOverviewPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/groups/$groupId": {
      "filePath": "organization/GroupDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/identities/$identityId": {
      "filePath": "organization/IdentityDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/kms/overview": {
      "filePath": "organization/KmsOverviewPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/members/$membershipId": {
      "filePath": "organization/UserDetailsByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/roles/$roleId": {
      "filePath": "organization/RoleByIDPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    },
    "/_authenticate/_inject-org-details/organization/_layout/secret-manager/overview": {
      "filePath": "organization/SecretManagerOverviewPage/route.tsx",
      "parent": "/_authenticate/_inject-org-details/organization/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
