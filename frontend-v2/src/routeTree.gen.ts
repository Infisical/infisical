/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SignupIndexImport } from './routes/signup/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as SignupSsoIndexImport } from './routes/signup/sso/index'
import { Route as LoginSsoIndexImport } from './routes/login/sso/index'
import { Route as LoginSelectOrganizationIndexImport } from './routes/login/select-organization/index'
import { Route as LoginLdapIndexImport } from './routes/login/ldap/index'
import { Route as LoginProviderSuccessImport } from './routes/login/provider/success'
import { Route as LoginProviderErrorImport } from './routes/login/provider/error'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SignupIndexRoute = SignupIndexImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const SignupSsoIndexRoute = SignupSsoIndexImport.update({
  id: '/signup/sso/',
  path: '/signup/sso/',
  getParentRoute: () => rootRoute,
} as any)

const LoginSsoIndexRoute = LoginSsoIndexImport.update({
  id: '/login/sso/',
  path: '/login/sso/',
  getParentRoute: () => rootRoute,
} as any)

const LoginSelectOrganizationIndexRoute =
  LoginSelectOrganizationIndexImport.update({
    id: '/login/select-organization/',
    path: '/login/select-organization/',
    getParentRoute: () => rootRoute,
  } as any)

const LoginLdapIndexRoute = LoginLdapIndexImport.update({
  id: '/login/ldap/',
  path: '/login/ldap/',
  getParentRoute: () => rootRoute,
} as any)

const LoginProviderSuccessRoute = LoginProviderSuccessImport.update({
  id: '/login/provider/success',
  path: '/login/provider/success',
  getParentRoute: () => rootRoute,
} as any)

const LoginProviderErrorRoute = LoginProviderErrorImport.update({
  id: '/login/provider/error',
  path: '/login/provider/error',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/signup/': {
      id: '/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/provider/error': {
      id: '/login/provider/error'
      path: '/login/provider/error'
      fullPath: '/login/provider/error'
      preLoaderRoute: typeof LoginProviderErrorImport
      parentRoute: typeof rootRoute
    }
    '/login/provider/success': {
      id: '/login/provider/success'
      path: '/login/provider/success'
      fullPath: '/login/provider/success'
      preLoaderRoute: typeof LoginProviderSuccessImport
      parentRoute: typeof rootRoute
    }
    '/login/ldap/': {
      id: '/login/ldap/'
      path: '/login/ldap'
      fullPath: '/login/ldap'
      preLoaderRoute: typeof LoginLdapIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/select-organization/': {
      id: '/login/select-organization/'
      path: '/login/select-organization'
      fullPath: '/login/select-organization'
      preLoaderRoute: typeof LoginSelectOrganizationIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/sso/': {
      id: '/login/sso/'
      path: '/login/sso'
      fullPath: '/login/sso'
      preLoaderRoute: typeof LoginSsoIndexImport
      parentRoute: typeof rootRoute
    }
    '/signup/sso/': {
      id: '/signup/sso/'
      path: '/signup/sso'
      fullPath: '/signup/sso'
      preLoaderRoute: typeof SignupSsoIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/signup': typeof SignupIndexRoute
  '/login/provider/error': typeof LoginProviderErrorRoute
  '/login/provider/success': typeof LoginProviderSuccessRoute
  '/login/ldap': typeof LoginLdapIndexRoute
  '/login/select-organization': typeof LoginSelectOrganizationIndexRoute
  '/login/sso': typeof LoginSsoIndexRoute
  '/signup/sso': typeof SignupSsoIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/signup': typeof SignupIndexRoute
  '/login/provider/error': typeof LoginProviderErrorRoute
  '/login/provider/success': typeof LoginProviderSuccessRoute
  '/login/ldap': typeof LoginLdapIndexRoute
  '/login/select-organization': typeof LoginSelectOrganizationIndexRoute
  '/login/sso': typeof LoginSsoIndexRoute
  '/signup/sso': typeof SignupSsoIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login/': typeof LoginIndexRoute
  '/signup/': typeof SignupIndexRoute
  '/login/provider/error': typeof LoginProviderErrorRoute
  '/login/provider/success': typeof LoginProviderSuccessRoute
  '/login/ldap/': typeof LoginLdapIndexRoute
  '/login/select-organization/': typeof LoginSelectOrganizationIndexRoute
  '/login/sso/': typeof LoginSsoIndexRoute
  '/signup/sso/': typeof SignupSsoIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/login/provider/error'
    | '/login/provider/success'
    | '/login/ldap'
    | '/login/select-organization'
    | '/login/sso'
    | '/signup/sso'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/login/provider/error'
    | '/login/provider/success'
    | '/login/ldap'
    | '/login/select-organization'
    | '/login/sso'
    | '/signup/sso'
  id:
    | '__root__'
    | '/'
    | '/login/'
    | '/signup/'
    | '/login/provider/error'
    | '/login/provider/success'
    | '/login/ldap/'
    | '/login/select-organization/'
    | '/login/sso/'
    | '/signup/sso/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  SignupIndexRoute: typeof SignupIndexRoute
  LoginProviderErrorRoute: typeof LoginProviderErrorRoute
  LoginProviderSuccessRoute: typeof LoginProviderSuccessRoute
  LoginLdapIndexRoute: typeof LoginLdapIndexRoute
  LoginSelectOrganizationIndexRoute: typeof LoginSelectOrganizationIndexRoute
  LoginSsoIndexRoute: typeof LoginSsoIndexRoute
  SignupSsoIndexRoute: typeof SignupSsoIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  SignupIndexRoute: SignupIndexRoute,
  LoginProviderErrorRoute: LoginProviderErrorRoute,
  LoginProviderSuccessRoute: LoginProviderSuccessRoute,
  LoginLdapIndexRoute: LoginLdapIndexRoute,
  LoginSelectOrganizationIndexRoute: LoginSelectOrganizationIndexRoute,
  LoginSsoIndexRoute: LoginSsoIndexRoute,
  SignupSsoIndexRoute: SignupSsoIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login/",
        "/signup/",
        "/login/provider/error",
        "/login/provider/success",
        "/login/ldap/",
        "/login/select-organization/",
        "/login/sso/",
        "/signup/sso/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/signup/": {
      "filePath": "signup/index.tsx"
    },
    "/login/provider/error": {
      "filePath": "login/provider/error.tsx"
    },
    "/login/provider/success": {
      "filePath": "login/provider/success.tsx"
    },
    "/login/ldap/": {
      "filePath": "login/ldap/index.tsx"
    },
    "/login/select-organization/": {
      "filePath": "login/select-organization/index.tsx"
    },
    "/login/sso/": {
      "filePath": "login/sso/index.tsx"
    },
    "/signup/sso/": {
      "filePath": "signup/sso/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
