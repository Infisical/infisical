// Code generated by automation script, DO NOT EDIT.
// Automated by pulling database and generating zod schema
// To update. Just run npm run generate:schema
// Written by akhilmhdh.

import { z } from "zod";

import { zodBuffer } from "@app/lib/zod";

import { TImmutableDBKeys } from "./models";

export const IdentityKubernetesAuthsSchema = z.object({
  id: z.string().uuid(),
  accessTokenTTL: z.coerce.number().default(7200),
  accessTokenMaxTTL: z.coerce.number().default(7200),
  accessTokenNumUsesLimit: z.coerce.number().default(0),
  accessTokenTrustedIps: z.unknown(),
  createdAt: z.date(),
  updatedAt: z.date(),
  identityId: z.string().uuid(),
  kubernetesHost: z.string().nullable().optional(),
  encryptedCaCert: z.string().nullable().optional(),
  caCertIV: z.string().nullable().optional(),
  caCertTag: z.string().nullable().optional(),
  encryptedTokenReviewerJwt: z.string().nullable().optional(),
  tokenReviewerJwtIV: z.string().nullable().optional(),
  tokenReviewerJwtTag: z.string().nullable().optional(),
  allowedNamespaces: z.string(),
  allowedNames: z.string(),
  allowedAudience: z.string(),
  encryptedKubernetesTokenReviewerJwt: zodBuffer.nullable().optional(),
  encryptedKubernetesCaCertificate: zodBuffer.nullable().optional(),
  gatewayId: z.string().uuid().nullable().optional(),
  accessTokenPeriod: z.coerce.number().default(0),
  tokenReviewMode: z.string().default("api"),
  gatewayV2Id: z.string().uuid().nullable().optional()
});

export type TIdentityKubernetesAuths = z.infer<typeof IdentityKubernetesAuthsSchema>;
export type TIdentityKubernetesAuthsInsert = Omit<z.input<typeof IdentityKubernetesAuthsSchema>, TImmutableDBKeys>;
export type TIdentityKubernetesAuthsUpdate = Partial<
  Omit<z.input<typeof IdentityKubernetesAuthsSchema>, TImmutableDBKeys>
>;
