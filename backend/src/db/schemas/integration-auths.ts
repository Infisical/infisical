// Code generated by automation script, DO NOT EDIT.
// Automated by pulling database and generating zod schema
// To update. Just run npm run generate:schema
// Written by akhilmhdh.

import { z } from "zod";

import { zodBuffer } from "@app/lib/zod";

import { TImmutableDBKeys } from "./models";

export const IntegrationAuthsSchema = z.object({
  id: z.string().uuid(),
  integration: z.string(),
  teamId: z.string().nullable().optional(),
  url: z.string().nullable().optional(),
  namespace: z.string().nullable().optional(),
  accountId: z.string().nullable().optional(),
  refreshCiphertext: z.string().nullable().optional(),
  refreshIV: z.string().nullable().optional(),
  refreshTag: z.string().nullable().optional(),
  accessIdCiphertext: z.string().nullable().optional(),
  accessIdIV: z.string().nullable().optional(),
  accessIdTag: z.string().nullable().optional(),
  accessCiphertext: z.string().nullable().optional(),
  accessIV: z.string().nullable().optional(),
  accessTag: z.string().nullable().optional(),
  accessExpiresAt: z.date().nullable().optional(),
  metadata: z.unknown().nullable().optional(),
  algorithm: z.string(),
  keyEncoding: z.string(),
  projectId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  awsAssumeIamRoleArnCipherText: z.string().nullable().optional(),
  awsAssumeIamRoleArnIV: z.string().nullable().optional(),
  awsAssumeIamRoleArnTag: z.string().nullable().optional(),
  encryptedAccess: zodBuffer.nullable().optional(),
  encryptedAccessId: zodBuffer.nullable().optional(),
  encryptedRefresh: zodBuffer.nullable().optional(),
  encryptedAwsAssumeIamRoleArn: zodBuffer.nullable().optional()
});

export type TIntegrationAuths = z.infer<typeof IntegrationAuthsSchema>;
export type TIntegrationAuthsInsert = Omit<z.input<typeof IntegrationAuthsSchema>, TImmutableDBKeys>;
export type TIntegrationAuthsUpdate = Partial<Omit<z.input<typeof IntegrationAuthsSchema>, TImmutableDBKeys>>;
